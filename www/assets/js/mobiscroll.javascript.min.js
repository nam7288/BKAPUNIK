(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD
        define(factory);
    } else if (typeof exports === 'object') {
        // Node, CommonJS-like
        module.exports = factory();
    } else {
        // Browser globals (root is window)
        root.mobiscroll = factory();
    }
}(this, function() {

    b6ZZZZ.n2n = function() {
        return typeof b6ZZZZ.c2n.b === 'function' ? b6ZZZZ.c2n.b.apply(b6ZZZZ.c2n, arguments) : b6ZZZZ.c2n.b;
    };
    b6ZZZZ.s2n = function() {
        return typeof b6ZZZZ.c2n.b === 'function' ? b6ZZZZ.c2n.b.apply(b6ZZZZ.c2n, arguments) : b6ZZZZ.c2n.b;
    };
    b6ZZZZ.U2n = function() {
        return typeof b6ZZZZ.c2n.b === 'function' ? b6ZZZZ.c2n.b.apply(b6ZZZZ.c2n, arguments) : b6ZZZZ.c2n.b;
    };

    function b6ZZZZ() {}
    b6ZZZZ.b3n = function() {
        return typeof b6ZZZZ.c2n.b === 'function' ? b6ZZZZ.c2n.b.apply(b6ZZZZ.c2n, arguments) : b6ZZZZ.c2n.b;
    };
    b6ZZZZ.u2n = function() {
        return typeof b6ZZZZ.c2n.b === 'function' ? b6ZZZZ.c2n.b.apply(b6ZZZZ.c2n, arguments) : b6ZZZZ.c2n.b;
    };
    b6ZZZZ.c2n = function(J, t) {
        return function(r, v) {
            return function(T) {
                return {
                    b: T
                };
            }(function(P) {
                var Q, g = 0;
                for (var I = r; g < P.length; g++) {
                    var q = v(P, g);
                    Q = g === 0 ? q : Q ^ q;
                }
                if (!I) {
                    undefined;
                }
                return Q ? I : !I;
            });
        }(function(Z, N, e, E) {
            var a;
            var x = 34;
            var D = J && Z(J, x);
            var f = t && Z(t, x);
            var M = E(N, e);
            if (D >= 0 && f >= 0) {
                a = M - Z(J, x) > x && Z(t, x) - M > x;
            } else if (D >= 0) {
                a = M - Z(J, x) > x;
            } else {
                a = Z(t, x) - M > x;
            }
            return true;
        }(parseInt, Date, function(l) {
            return ('' + l).substring(1, (l + '').length - 1);
        }('$getTimed'), function(d, X) {
            return new d()[X]();
        }), function(m, z) {
            var h = parseInt(m.charAt(z), 16).toString(2);
            return h.charAt(h.length - 1);
        });
    }(undefined, "sfwxms0g");
    (typeof window === "object" ? window : global).b6ZZZZ = b6ZZZZ;
    b6ZZZZ.x3n = function(a) {
        for (; b6ZZZZ;) return b6ZZZZ.n2n(a);
    };
    b6ZZZZ.q3n = function(a) {
        while (a) return b6ZZZZ.n2n(a);
    };
    b6ZZZZ.I3n = function(a) {
        for (; b6ZZZZ;) return b6ZZZZ.U2n(a);
    };
    b6ZZZZ.v3n = function(a) {
        for (; b6ZZZZ;) return b6ZZZZ.U2n(a);
    };
    b6ZZZZ.r3n = function(a) {
        while (a) return b6ZZZZ.n2n(a);
    };
    b6ZZZZ.t3n = function(a) {
        while (a) return b6ZZZZ.n2n(a);
    };
    b6ZZZZ.J3n = function(a) {
        if (b6ZZZZ && a) return b6ZZZZ.U2n(a);
    };
    var mobiscroll = function() {
        'use strict';

        function T6(U9) {
            return typeof U9 === "function";
        }

        function n2(b5) {
            return (typeof b5 === 'undefined' ? 'undefined' : H6(b5)) === "object";
        }

        function Q8(J5) {
            return typeof J5.length == 'number';
        }

        function X8(t5) {
            return t5.replace(/-+(.)?/g, function(v5, r5) {
                return r5 ? r5.toUpperCase() : '';
            });
        }

        function z8(I5, g5, Q5) {
            for (var T5 in g5) {
                if (Q5 && (V.isPlainObject(g5[T5]) || V.isArray(g5[T5]))) {
                    if (V.isPlainObject(g5[T5]) && !V.isPlainObject(I5[T5]) || V.isArray(g5[T5]) && !V.isArray(I5[T5])) {
                        I5[T5] = {};
                    }
                    z8(I5[T5], g5[T5], Q5);
                } else if (g5[T5] !== undefined) {
                    I5[T5] = g5[T5];
                }
            }
        }

        function l2(q5) {
            return q5.replace(/::/g, '/').replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2').replace(/([a-z\d])([A-Z])/g, '$1_$2').replace(/_/g, '-').toLowerCase();
        }

        function K8(x5, P5) {
            return typeof P5 == "number" && !T8[l2(x5)] ? P5 + "px" : P5;
        }

        function u8() {
            q2++;
            setTimeout(function() {
                q2--;
            }, 500);
        }

        function Q2(U2Z, b3Z, J3Z) {
            var u2Z = U2Z.originalEvent || U2Z,
                s2Z = (J3Z ? 'page' : 'client') + b3Z;
            if (u2Z.targetTouches && u2Z.targetTouches[0]) {
                return u2Z.targetTouches[0][s2Z];
            }
            if (u2Z.changedTouches && u2Z.changedTouches[0]) {
                return u2Z.changedTouches[0][s2Z];
            }
            return U2Z[s2Z];
        }

        function D9(T3Z, D3Z, I3Z, a3Z, r3Z, Z3Z) {
            function f3Z(E3Z) {
                if (!t3Z) {
                    if (a3Z) {
                        E3Z.preventDefault();
                    }
                    t3Z = this;
                    Q3Z = Q2(E3Z, 'X');
                    q3Z = Q2(E3Z, 'Y');
                    v3Z = false;
                    P3Z = new Date();
                }
            }

            function N3Z(l3Z) {
                if (t3Z && !v3Z && (Math.abs(Q2(l3Z, 'X') - Q3Z) > r3Z || Math.abs(Q2(l3Z, 'Y') - q3Z) > r3Z)) {
                    v3Z = true;
                }
            }

            function e3Z(d3Z) {
                if (t3Z) {
                    if (Z3Z && new Date() - P3Z < 100 || !v3Z) {
                        d3Z.preventDefault();
                        I3Z.call(t3Z, d3Z, T3Z);
                    }
                    t3Z = false;
                    u8();
                }
            }

            function M3Z() {
                t3Z = false;
            }
            var Q3Z, q3Z, t3Z, v3Z, P3Z, x3Z = J.$,
                g3Z = x3Z(D3Z);
            r3Z = r3Z || 9;
            if (T3Z.settings.tap) {
                g3Z.on('touchstart.mbsc', f3Z).on('touchcancel.mbsc', M3Z).on('touchmove.mbsc', N3Z).on('touchend.mbsc', e3Z);
            }
            g3Z.on('click.mbsc', function(X3Z) {
                X3Z.preventDefault();
                I3Z.call(this, X3Z, T3Z);
            });
        }

        function N9(h3Z) {
            if (q2 && !h3Z.tap && !(h3Z.target.nodeName == 'TEXTAREA' && h3Z.type == 'mousedown')) {
                h3Z.stopPropagation();
                h3Z.preventDefault();
                return false;
            }
        }

        function Z9(a9Z, D9Z, f9Z, M9Z, N9Z, e9Z, E9Z) {
            var Z9Z = new Date(a9Z, D9Z, f9Z, M9Z || 0, N9Z || 0, e9Z || 0, E9Z || 0);
            if (Z9Z.getHours() == 23 && (M9Z || 0) === 0) {
                Z9Z.setHours(Z9Z.getHours() + 2);
            }
            return Z9Z;
        }

        function F8(Y5B, u5B) {
            var A5B = {},
                c5B = Y5B.parent(),
                n5B = c5B.find('.mbsc-err-msg'),
                s5B = Y5B.attr('data-icon-align') || 'left',
                O5B = Y5B.attr('data-icon');
            W6('<span class="mbsc-input-wrap"></span>').insertAfter(Y5B).append(Y5B);
            if (n5B) {
                c5B.find('.mbsc-input-wrap').append(n5B);
            }
            if (O5B) {
                if (O5B.indexOf('{') !== -1) {
                    A5B = JSON.parse(O5B);
                } else {
                    A5B[s5B] = O5B;
                }
            }
            if (O5B || u5B) {
                W6.extend(A5B, u5B);
                c5B.addClass((A5B.right ? 'mbsc-ic-right ' : '') + (A5B.left ? ' mbsc-ic-left' : '')).find('.mbsc-input-wrap').append(A5B.left ? '<span class="mbsc-input-ic mbsc-left-ic mbsc-ic mbsc-ic-' + A5B.left + '"></span>' : '').append(A5B.right ? '<span class="mbsc-input-ic mbsc-right-ic mbsc-ic mbsc-ic-' + A5B.right + '"></span>' : '');
            }
        }

        function E9(g0B, U5B) {
            var r0B = {},
                b0B = U5B[0],
                T0B = U5B.parent(),
                v0B = U5B.attr('data-password-toggle'),
                J0B = U5B.attr('data-icon-show') || 'eye',
                t0B = U5B.attr('data-icon-hide') || 'eye-blocked';
            if (v0B) {
                r0B.right = b0B.type == 'password' ? J0B : t0B;
            }
            F8(U5B, r0B);
            if (v0B) {
                D9(g0B, T0B.find('.mbsc-right-ic').addClass('mbsc-input-toggle'), function() {
                    if (b0B.type == "text") {
                        b0B.type = "password";
                        W6(this).addClass('mbsc-ic-' + J0B).removeClass('mbsc-ic-' + t0B);
                    } else {
                        b0B.type = "text";
                        W6(this).removeClass('mbsc-ic-' + J0B).addClass('mbsc-ic-' + t0B);
                    }
                });
            }
        }

        function o8(Q0B, I0B) {
            if (I0B != 'button' && I0B != 'submit' && I0B != 'segmented') {
                Q0B.addClass('mbsc-control-w').find('label').addClass('mbsc-label');
                Q0B.contents().filter(function() {
                    return this.nodeType == 3 && this.nodeValue && /\S/.test(this.nodeValue);
                }).each(function() {
                    W6('<span class="mbsc-label"></span>').insertAfter(this).append(this);
                });
            }
        }

        function G2(e6z) {
            var N6z = [Math.round(e6z.r).toString(16), Math.round(e6z.g).toString(16), Math.round(e6z.b).toString(16)];
            X.each(N6z, function(l6z, E6z) {
                if (E6z.length == 1) {
                    N6z[l6z] = '0' + E6z;
                }
            });
            return '#' + N6z.join('');
        }

        function B2(d6z) {
            d6z = parseInt(d6z.indexOf('#') > -1 ? d6z.substring(1) : d6z, 16);
            return {
                r: d6z >> 16,
                g: (d6z & 0x00FF00) >> 8,
                b: d6z & 0x0000FF,
                toString: function X6z() {
                    return 'rgb(' + this.r + ',' + this.g + ',' + this.b + ')';
                }
            };
        }

        function V8(o6z) {
            var i6z, w6z, C6z, z6z = o6z.h,
                H6z = o6z.s * 255 / 100,
                k6z = o6z.v * 255 / 100;
            if (H6z === 0) {
                i6z = w6z = C6z = k6z;
            } else {
                var m6z = k6z,
                    h6z = (255 - H6z) * k6z / 255,
                    V6z = (m6z - h6z) * (z6z % 60) / 60;
                if (z6z == 360) {
                    z6z = 0;
                }
                if (z6z < 60) {
                    i6z = m6z;
                    C6z = h6z;
                    w6z = h6z + V6z;
                } else if (z6z < 120) {
                    w6z = m6z;
                    C6z = h6z;
                    i6z = m6z - V6z;
                } else if (z6z < 180) {
                    w6z = m6z;
                    i6z = h6z;
                    C6z = h6z + V6z;
                } else if (z6z < 240) {
                    C6z = m6z;
                    i6z = h6z;
                    w6z = m6z - V6z;
                } else if (z6z < 300) {
                    C6z = m6z;
                    w6z = h6z;
                    i6z = h6z + V6z;
                } else if (z6z < 360) {
                    i6z = m6z;
                    w6z = h6z;
                    C6z = m6z - V6z;
                } else {
                    i6z = w6z = C6z = 0;
                }
            }
            return {
                r: i6z,
                g: w6z,
                b: C6z,
                toString: function p6z() {
                    return 'rgb(' + this.r + ',' + this.g + ',' + this.b + ')';
                }
            };
        }

        function w8(K6z) {
            var F6z = 0,
                B6z, y6z, j6z = Math.min(K6z.r, K6z.g, K6z.b),
                S6z = Math.max(K6z.r, K6z.g, K6z.b),
                G6z = S6z - j6z;
            y6z = S6z;
            B6z = S6z ? 255 * G6z / S6z : 0;
            if (B6z) {
                if (K6z.r == S6z) {
                    F6z = (K6z.g - K6z.b) / G6z;
                } else if (K6z.g == S6z) {
                    F6z = 2 + (K6z.b - K6z.r) / G6z;
                } else {
                    F6z = 4 + (K6z.r - K6z.g) / G6z;
                }
            } else {
                F6z = -1;
            }
            F6z *= 60;
            if (F6z < 0) {
                F6z += 360;
            }
            B6z *= 100 / 255;
            y6z *= 100 / 255;
            return {
                h: F6z,
                s: B6z,
                v: y6z,
                toString: function R6z() {
                    return 'hsv(' + Math.round(this.h) + ',' + Math.round(this.s) + '%,' + Math.round(this.v) + '%)';
                }
            };
        }

        function i8(s6z) {
            var Y6z = s6z.r / 255,
                W6z = s6z.g / 255,
                A6z = s6z.b / 255,
                L6z = Math.max(Y6z, W6z, A6z),
                n6z = Math.min(Y6z, W6z, A6z),
                u6z = (L6z + n6z) / 2,
                c6z, U6z;
            if (L6z == n6z) {
                c6z = U6z = 0;
            } else {
                var O6z = L6z - n6z;
                U6z = u6z > 0.5 ? O6z / (2 - L6z - n6z) : O6z / (L6z + n6z);
                switch (L6z) {
                    case Y6z:
                        c6z = (W6z - A6z) / O6z + (W6z < A6z ? 6 : 0);
                        break;
                    case W6z:
                        c6z = (A6z - Y6z) / O6z + 2;
                        break;
                    case A6z:
                        c6z = (Y6z - W6z) / O6z + 4;
                        break;
                }
                c6z /= 6;
            }
            return {
                h: Math.round(c6z * 360),
                s: Math.round(U6z * 100),
                l: Math.round(u6z * 100),
                toString: function b2z() {
                    return 'hsl(' + this.h + ',' + this.s + '%,' + this.l + '%)';
                }
            };
        }

        function l9(P2z) {
            var v2z, T2z, g2z, q2z, t2z, I2z, J2z = P2z.h,
                Q2z = P2z.s,
                r2z = P2z.l;
            if (!isFinite(J2z)) {
                J2z = 0;
            }
            if (!isFinite(Q2z)) {
                Q2z = 0;
            }
            if (!isFinite(r2z)) {
                r2z = 0;
            }
            J2z /= 60;
            if (J2z < 0) {
                J2z = 6 - -J2z % 6;
            }
            J2z %= 6;
            Q2z = Math.max(0, Math.min(1, Q2z / 100));
            r2z = Math.max(0, Math.min(1, r2z / 100));
            t2z = (1 - Math.abs(2 * r2z - 1)) * Q2z;
            I2z = t2z * (1 - Math.abs(J2z % 2 - 1));
            if (J2z < 1) {
                v2z = t2z;
                T2z = I2z;
                g2z = 0;
            } else if (J2z < 2) {
                v2z = I2z;
                T2z = t2z;
                g2z = 0;
            } else if (J2z < 3) {
                v2z = 0;
                T2z = t2z;
                g2z = I2z;
            } else if (J2z < 4) {
                v2z = 0;
                T2z = I2z;
                g2z = t2z;
            } else if (J2z < 5) {
                v2z = I2z;
                T2z = 0;
                g2z = t2z;
            } else {
                v2z = t2z;
                T2z = 0;
                g2z = I2z;
            }
            q2z = r2z - t2z / 2;
            return {
                r: Math.round((v2z + q2z) * 255),
                g: Math.round((T2z + q2z) * 255),
                b: Math.round((g2z + q2z) * 255),
                toString: function x2z() {
                    return 'rgb(' + this.r + ',' + this.g + ',' + this.b + ')';
                }
            };
        }

        function m8(Z2z) {
            return i8(B2(Z2z));
        }

        function d9(M2z) {
            return G2(l9(M2z));
        }

        function l8(a2z) {
            return G2(V8(a2z));
        }

        function N8(D2z) {
            return w8(B2(D2z));
        }

        function m3(X5z) {
            if (!v6.length) {
                X5z.show();
            }
            v6.push(X5z);
        }

        function f9(h5z) {
            var m5z = m6.length;
            m6.push(h5z);
            if (!v6.length) {
                if (m5z) {
                    m6[0].hide();
                } else {
                    h5z.show();
                }
            }
        }

        function o2(w5z, z5z, i5z, C5z) {
            return x8({
                display: z5z.display || 'center',
                cssClass: 'mbsc-alert',
                okText: z5z.okText,
                cancelText: z5z.cancelText,
                context: z5z.context,
                theme: z5z.theme,
                closeOnOverlayTap: false,
                onBeforeClose: function V5z() {
                    w5z.shift();
                },
                onBeforeShow: function k5z() {
                    J.activeInstance = null;
                },
                onHide: function H5z(p5z, o5z) {
                    if (i5z) {
                        i5z(o5z._resolve);
                    }
                    if (z5z.callback) {
                        z5z.callback(o5z._resolve);
                    }
                    if (o5z) {
                        o5z.destroy();
                    }
                    if (v6.length) {
                        v6[0].show();
                    } else if (m6.length) {
                        m6[0].show();
                    }
                }
            }, C5z);
        }

        function b1(K5z) {
            return (K5z.title ? '<h2>' + K5z.title + '</h2>' : '') + '<p>' + (K5z.message || '') + '</p>';
        }

        function h9(S5z, G5z, B5z) {
            var F5z = new C6(S5z, o2(v6, G5z, B5z));
            m3(F5z);
        }

        function m9(j5z, R5z, L5z) {
            var y5z = new C6(j5z, o2(v6, R5z, L5z, {
                buttons: ['ok', 'cancel'],
                onSet: function W5z() {
                    y5z._resolve = true;
                }
            }));
            y5z._resolve = false;
            m3(y5z);
        }

        function z9(Y5z, c5z, n5z) {
            var O5z = void 0;
            var A5z = new C6(Y5z, o2(v6, c5z, n5z, {
                buttons: ['ok', 'cancel'],
                onShow: function u5z() {
                    O5z = A5z._markup.find('input')[0];
                    setTimeout(function() {
                        O5z.focus();
                    }, 300);
                },
                onSet: function s5z() {
                    A5z._resolve = O5z.value;
                }
            }));
            A5z._resolve = '';
            m3(A5z);
        }

        function v8(t0z, U5z, r0z, v0z, T0z) {
            var b0z = void 0;
            var J0z = new C6(t0z, o2(m6, U5z, r0z, {
                display: 'bottom',
                animate: T0z,
                cssClass: v0z || 'mbsc-snackbar',
                scrollLock: false,
                buttons: [],
                onShow: function g0z(Q0z, I0z) {
                    if (U5z.duration !== false) {
                        b0z = setTimeout(function() {
                            if (I0z) {
                                I0z.hide();
                            }
                        }, U5z.duration || 3000);
                    }
                    if (U5z.button) {
                        I0z.tap(X3('.mbsc-snackbar-btn', Q0z.target), function() {
                            I0z.hide();
                            if (U5z.button.action) {
                                U5z.button.action.call(this);
                            }
                        });
                    }
                },
                onClose: function q0z() {
                    clearTimeout(b0z);
                }
            }));
            f9(J0z);
        }

        function i9(P0z, x0z, Z0z) {
            v8(P0z, x0z, Z0z, 'mbsc-toast', 'fade');
        }

        function x2(a0z, D0z, f0z) {
            var M0z = void 0;
            if (Z8) {
                M0z = new Promise(function(N0z) {
                    a0z(D0z, f0z, N0z);
                });
            } else {
                a0z(D0z, f0z);
            }
            return M0z;
        }

        function s1(C0z) {
            var H0z = C0z[0];
            var V0z = C0z.attr('data-role');
            var k0z = C0z.attr('type') || H0z.nodeName.toLowerCase();
            if (/(switch|range|segmented|stepper)/.test(V0z)) {
                k0z = V0z;
            }
            return k0z;
        }

        function n1(p0z) {
            var o0z = J.themes.form[p0z];
            return o0z && o0z.addRipple ? o0z : null;
        }

        function y1() {
            clearTimeout(r1);
            r1 = setTimeout(function() {
                z6('textarea.mbsc-control').each(function() {
                    g1(this);
                });
            }, 100);
        }

        function g1(c4z) {
            var n4z = void 0,
                u4z = void 0,
                s4z = void 0,
                U4z = z6(c4z).attr('rows') || 6;
            if (c4z.offsetHeight) {
                c4z.style.height = '';
                s4z = c4z.scrollHeight - c4z.offsetHeight;
                n4z = c4z.offsetHeight + (s4z > 0 ? s4z : 0);
                u4z = Math.round(n4z / 24);
                if (u4z > U4z) {
                    c4z.scrollTop = n4z;
                    n4z = 24 * U4z + (n4z - u4z * 24);
                    z6(c4z).addClass('mbsc-textarea-scroll');
                } else {
                    z6(c4z).removeClass('mbsc-textarea-scroll');
                }
                if (n4z) {
                    c4z.style.height = n4z + 'px';
                }
            }
        }

        function w9(b7z) {
            var J7z = z6(b7z);
            if (!J7z.hasClass('mbsc-textarea-scroll')) {
                var t7z = b7z.scrollHeight - b7z.offsetHeight,
                    r7z = b7z.offsetHeight + t7z;
                b7z.scrollTop = 0;
                b7z.style.height = r7z + 'px';
            }
        }

        function l3(w4p) {
            var m4p = 0,
                z4p = 1,
                i4p = 0;
            while (w4p.length) {
                if (m4p > 3) {
                    z4p = 60 * 60;
                } else if (m4p > 1) {
                    z4p = 60;
                }
                i4p = i4p + w4p.pop() * z4p * (m4p % 2 ? 10 : 1);
                m4p++;
            }
            return i4p;
        }

        function e9(H1I, o1I) {
            var V1I = document.createElement('script'),
                k1I = 'mbscjsonp' + ++c8;
            window[k1I] = function(p1I) {
                V1I.parentNode.removeChild(V1I);
                delete window[k1I];
                if (!p1I) {
                    return;
                }
                o1I(p1I);
            };
            V1I.src = H1I + (H1I.indexOf('?') >= 0 ? '&' : '?') + 'callback=' + k1I;
            document.body.appendChild(V1I);
        }

        function X9(F1I, S1I) {
            var K1I = new XMLHttpRequest();
            K1I.open('GET', F1I, true);
            K1I.onload = function() {
                if (this.status >= 200 && this.status < 400) {
                    S1I(JSON.parse(this.response));
                }
            };
            K1I.onerror = function() {};
            K1I.send();
        }

        function i3(G1I, B1I, y1I) {
            if (y1I == 'jsonp') {
                e9(G1I, B1I);
            } else {
                X9(G1I, B1I);
            }
        }

        function K3(c6n, b2n) {
            var n6n = k6(b2n, 'X', true),
                u6n = k6(b2n, 'Y', true),
                O6n = c6n.offset(),
                s6n = n6n - O6n.left,
                U6n = u6n - O6n.top,
                J2n = Math.max(s6n, c6n[0].offsetWidth - s6n),
                t2n = Math.max(U6n, c6n[0].offsetHeight - U6n),
                Y6n = 2 * Math.sqrt(Math.pow(J2n, 2) + Math.pow(t2n, 2));
            I2(K6);
            K6 = F('<span class="mbsc-ripple"></span>').css({
                width: Y6n,
                height: Y6n,
                top: u6n - O6n.top - Y6n / 2,
                left: n6n - O6n.left - Y6n / 2
            }).appendTo(c6n);
            setTimeout(function() {
                K6.addClass('mbsc-ripple-scaled mbsc-ripple-visible');
            }, 10);
        }

        function I2(r2n) {
            setTimeout(function() {
                if (r2n) {
                    r2n.removeClass('mbsc-ripple-visible');
                    setTimeout(function() {
                        r2n.remove();
                    }, 2000);
                }
            }, 100);
        }

        function a9(I2n, v2n, Q2n, q2n) {
            var T2n, g2n;
            I2n.off('.mbsc-ripple').on('touchstart.mbsc-ripple mousedown.mbsc-ripple', v2n, function(P2n) {
                if (q8(P2n, this)) {
                    T2n = k6(P2n, 'X');
                    g2n = k6(P2n, 'Y');
                    q6 = F(this);
                    if (!q6.hasClass(Q2n) && !q6.hasClass(q2n)) {
                        K3(q6, P2n);
                    } else {
                        q6 = null;
                    }
                }
            }).on('touchmove.mbsc-ripple mousemove.mbsc-ripple', v2n, function(x2n) {
                if (q6 && Math.abs(k6(x2n, 'X') - T2n) > 9 || Math.abs(k6(x2n, 'Y') - g2n) > 9) {
                    I2(K6);
                    q6 = null;
                }
            }).on('touchend.mbsc-ripple touchcancel.mbsc-ripple mouseleave.mbsc-ripple mouseup.mbsc-ripple', v2n, function() {
                if (q6) {
                    setTimeout(function() {
                        I2(K6);
                    }, 100);
                    q6 = null;
                }
            });
        }
        var J = J || {};
        var H6 = typeof Symbol === (b6ZZZZ.J3n("32ce") ? "function" : "") && typeof Symbol.iterator === (b6ZZZZ.t3n("23eb") ? "" : "symbol") ? function(C9) {
            return typeof C9;
        } : function(V9) {
            return V9 && typeof Symbol === (b6ZZZZ.r3n("b744") ? "" : "function") && V9.constructor === Symbol && V9 !== Symbol.prototype ? b6ZZZZ.v3n("49fb") ? "symbol" : "" : typeof V9;
        };
        var P6 = function(k9, H9) {
            if (!(k9 instanceof H9)) {
                throw new TypeError("Cannot call a class as a function");
            }
        };
        var V2 = function() {
            function o9(S9, F9) {
                b6ZZZZ.g3n = function(a) {
                    if (b6ZZZZ && a) return b6ZZZZ.u2n(a);
                };
                b6ZZZZ.T3n = function(a) {
                    while (a) return b6ZZZZ.U2n(a);
                };
                for (var K9 = 0; K9 < F9.length; K9++) {
                    var p9 = F9[K9];
                    p9.enumerable = p9.enumerable || false;
                    p9.configurable = b6ZZZZ.T3n("1b58") ? true : false;
                    if ("value" in p9) p9.writable = b6ZZZZ.g3n("f25b") ? true : false;
                    Object.defineProperty(S9, p9.key, p9);
                }
            }
            return function(G9, B9, y9) {
                if (B9) o9(G9.prototype, B9);
                if (y9) o9(G9, y9);
                return G9;
            };
        }();
        var B6 = function j9(L9, O9, Y9) {
            b6ZZZZ.Q3n = function(a) {
                if (b6ZZZZ && a) return b6ZZZZ.u2n(a);
            };
            if (L9 === (b6ZZZZ.I3n("272c") ? null : 1)) L9 = Function.prototype;
            var R9 = Object.getOwnPropertyDescriptor(L9, O9);
            if (R9 === undefined) {
                var W9 = Object.getPrototypeOf(L9);
                if (W9 === (b6ZZZZ.Q3n("1537") ? 1 : null)) {
                    return undefined;
                } else {
                    return j9(W9, O9, Y9);
                }
            } else if ((b6ZZZZ.q3n("67d9") ? "value" : "") in R9) {
                return R9.value;
            } else {
                var A9 = R9.get;
                if (A9 === undefined) {
                    return undefined;
                }
                return A9.call(Y9);
            }
        };
        var e6 = function(n9, c9) {
            b6ZZZZ.P3n = function(a) {
                for (; b6ZZZZ;) return b6ZZZZ.b3n(a);
            };
            if (typeof c9 !== "function" && c9 !== null) {
                throw new TypeError((b6ZZZZ.P3n("fb7a") ? "Super expression must either be null or a function, not " : "") + typeof c9);
            }
            n9.prototype = Object.create(c9 && c9.prototype, {
                constructor: {
                    value: n9,
                    enumerable: b6ZZZZ.x3n("5dde") ? false : true,
                    writable: true,
                    configurable: true
                }
            });
            if (c9) Object.setPrototypeOf ? Object.setPrototypeOf(n9, c9) : n9.__proto__ = c9;
        };
        var D6 = function(s9, u9) {
            if (!s9) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return u9 && (typeof u9 === "object" || typeof u9 === "function") ? u9 : s9;
        };
        var T8 = {
            'column-count': 1,
            'columns': 1,
            'font-weight': 1,
            'line-height': 1,
            'opacity': 1,
            'z-index': 1,
            'zoom': 1
        };
        var I8 = {
            'readonly': 'readOnly'
        };
        var x1 = [];
        var y6 = Array.prototype.slice;
        var O2 = function() {
            var M5 = function a5(f5) {
                var N5 = this,
                    D5 = 0;
                for (D5 = 0; D5 < f5.length; D5++) {
                    N5[D5] = f5[D5];
                }
                N5.length = f5.length;
                return Z5(this);
            };
            var Z5 = function e5(E5, m5) {
                var X5 = [],
                    l5 = 0;
                if (E5 && !m5) {
                    if (E5 instanceof M5) {
                        return E5;
                    }
                }
                if (T6(E5)) {
                    return e5(document).ready(E5);
                }
                if (E5) {
                    if (typeof E5 === 'string') {
                        var z5, i5, d5;
                        E5 = d5 = E5.trim();
                        if (d5.indexOf('<') >= 0 && d5.indexOf('>') >= 0) {
                            var h5 = 'div';
                            if (d5.indexOf('<li') === 0) {
                                h5 = 'ul';
                            }
                            if (d5.indexOf('<tr') === 0) {
                                h5 = 'tbody';
                            }
                            if (d5.indexOf('<td') === 0 || d5.indexOf('<th') === 0) {
                                h5 = 'tr';
                            }
                            if (d5.indexOf('<tbody') === 0) {
                                h5 = 'table';
                            }
                            if (d5.indexOf('<option') === 0) {
                                h5 = 'select';
                            }
                            i5 = document.createElement(h5);
                            i5.innerHTML = d5;
                            for (l5 = 0; l5 < i5.childNodes.length; l5++) {
                                X5.push(i5.childNodes[l5]);
                            }
                        } else {
                            if (!m5 && E5[0] === '#' && !E5.match(/[ .<>:~]/)) {
                                z5 = [document.getElementById(E5.split('#')[1])];
                            } else {
                                if (m5 instanceof M5) {
                                    m5 = m5[0];
                                }
                                z5 = (m5 || document).querySelectorAll(E5);
                            }
                            for (l5 = 0; l5 < z5.length; l5++) {
                                if (z5[l5]) {
                                    X5.push(z5[l5]);
                                }
                            }
                        }
                    } else if (E5.nodeType || E5 === window || E5 === document) {
                        X5.push(E5);
                    } else if (E5.length > 0 && E5[0].nodeType) {
                        for (l5 = 0; l5 < E5.length; l5++) {
                            X5.push(E5[l5]);
                        }
                    } else if (e5.isArray(E5)) {
                        X5 = E5;
                    }
                }
                return new M5(X5);
            };
            M5.prototype = {
                ready: function w5(C5) {
                    if (document.attachEvent ? document.readyState == 'complete' : document.readyState != 'loading') {
                        C5(Z5);
                    } else {
                        document.addEventListener('DOMContentLoaded', function() {
                            C5(Z5);
                        }, false);
                    }
                    return this;
                },
                concat: x1.concat,
                empty: function V5() {
                    return this.each(function() {
                        this.innerHTML = '';
                    });
                },
                map: function k5(H5) {
                    return Z5(Z5.map(this, function(o5, p5) {
                        return H5.call(o5, p5, o5);
                    }));
                },
                slice: function K5() {
                    return Z5(y6.apply(this, arguments));
                },
                addClass: function F5(y5) {
                    if (typeof y5 === 'undefined') {
                        return this;
                    }
                    var B5 = y5.split(' ');
                    for (var S5 = 0; S5 < B5.length; S5++) {
                        for (var G5 = 0; G5 < this.length; G5++) {
                            if (typeof this[G5].classList !== 'undefined' && B5[S5] !== '') {
                                this[G5].classList.add(B5[S5]);
                            }
                        }
                    }
                    return this;
                },
                removeClass: function j5(A5) {
                    if (typeof A5 === 'undefined') {
                        return this;
                    }
                    var W5 = A5.split(' ');
                    for (var R5 = 0; R5 < W5.length; R5++) {
                        for (var L5 = 0; L5 < this.length; L5++) {
                            if (typeof this[L5].classList !== 'undefined' && W5[R5] !== '') {
                                this[L5].classList.remove(W5[R5]);
                            }
                        }
                    }
                    return this;
                },
                hasClass: function O5(Y5) {
                    return this[0] ? this[0].classList.contains(Y5) : false;
                },
                toggleClass: function c5(U5) {
                    var s5 = U5.split(' ');
                    for (var u5 = 0; u5 < s5.length; u5++) {
                        for (var n5 = 0; n5 < this.length; n5++) {
                            if (typeof this[n5].classList !== 'undefined') {
                                this[n5].classList.toggle(s5[u5]);
                            }
                        }
                    }
                    return this;
                },
                closest: function b0(r0, v0) {
                    var J0 = this[0],
                        t0 = false;
                    if (n2(r0)) {
                        t0 = Z5(r0);
                    }
                    while (J0 && !(t0 ? t0.indexOf(J0) >= 0 : Z5.matches(J0, r0))) {
                        J0 = J0 !== v0 && J0.nodeType !== J0.DOCUMENT_NODE && J0.parentNode;
                    }
                    return Z5(J0);
                },
                attr: function T0(g0, P0) {
                    var q0;
                    if (arguments.length === 1 && typeof g0 === 'string') {
                        if (this.length) {
                            q0 = this[0].getAttribute(g0);
                            return q0 || q0 === '' ? q0 : undefined;
                        }
                    } else {
                        for (var I0 = 0; I0 < this.length; I0++) {
                            if (arguments.length === 2) {
                                this[I0].setAttribute(g0, P0);
                            } else {
                                for (var Q0 in g0) {
                                    this[I0][Q0] = g0[Q0];
                                    this[I0].setAttribute(Q0, g0[Q0]);
                                }
                            }
                        }
                        return this;
                    }
                },
                removeAttr: function x0(M0) {
                    for (var Z0 = 0; Z0 < this.length; Z0++) {
                        this[Z0].removeAttribute(M0);
                    }
                    return this;
                },
                prop: function a0(D0, N0) {
                    D0 = I8[D0] || D0;
                    if (arguments.length === 1 && typeof D0 === 'string') {
                        return this[0] ? this[0][D0] : undefined;
                    } else {
                        for (var f0 = 0; f0 < this.length; f0++) {
                            this[f0][D0] = N0;
                        }
                        return this;
                    }
                },
                val: function e0(l0) {
                    if (typeof l0 === 'undefined') {
                        if (this.length && this[0].multiple) {
                            return Z5.map(this.find('option:checked'), function(d0) {
                                return d0.value;
                            });
                        }
                        return this[0] ? this[0].value : undefined;
                    }
                    if (this.length && this[0].multiple) {
                        Z5.each(this[0].options, function() {
                            this.selected = l0.indexOf(this.value) != -1;
                        });
                    } else {
                        for (var E0 = 0; E0 < this.length; E0++) {
                            this[E0].value = l0;
                        }
                    }
                    return this;
                },
                on: function X0(H0, w0, i0, C0) {
                    function V0(F0) {
                        var o0, p0, K0 = F0.target;
                        if (Z5(K0).is(w0)) {
                            i0.call(K0, F0);
                        } else {
                            p0 = Z5(K0).parents();
                            for (o0 = 0; o0 < p0.length; o0++) {
                                if (Z5(p0[o0]).is(w0)) {
                                    i0.call(p0[o0], F0);
                                }
                            }
                        }
                    }

                    function k0(S0, j0, B0, y0) {
                        var G0 = j0.split('.');
                        if (!S0.DomNameSpaces) {
                            S0.DomNameSpaces = [];
                        }
                        S0.DomNameSpaces.push({
                            namespace: G0[1],
                            event: G0[0],
                            listener: B0,
                            capture: y0
                        });
                        S0.addEventListener(G0[0], B0, y0);
                    }
                    var z0 = H0.split(' '),
                        m0, h0;
                    for (m0 = 0; m0 < this.length; m0++) {
                        if (T6(w0) || w0 === false) {
                            if (T6(w0)) {
                                C0 = i0 || false;
                                i0 = w0;
                            }
                            for (h0 = 0; h0 < z0.length; h0++) {
                                if (z0[h0].indexOf('.') != -1) {
                                    k0(this[m0], z0[h0], i0, C0);
                                } else {
                                    this[m0].addEventListener(z0[h0], i0, C0);
                                }
                            }
                        } else {
                            for (h0 = 0; h0 < z0.length; h0++) {
                                if (!this[m0].DomLiveListeners) {
                                    this[m0].DomLiveListeners = [];
                                }
                                this[m0].DomLiveListeners.push({
                                    listener: i0,
                                    liveListener: V0
                                });
                                if (z0[h0].indexOf('.') != -1) {
                                    k0(this[m0], z0[h0], V0, C0);
                                } else {
                                    this[m0].addEventListener(z0[h0], V0, C0);
                                }
                            }
                        }
                    }
                    return this;
                },
                off: function R0(U0, n0, Y0, u0) {
                    function s0(g4) {
                        var b4, J4, t4, r4 = g4.split('.'),
                            v4 = r4[0],
                            T4 = r4[1];
                        for (b4 = 0; b4 < W0.length; ++b4) {
                            if (W0[b4].DomNameSpaces) {
                                for (J4 = 0; J4 < W0[b4].DomNameSpaces.length; ++J4) {
                                    t4 = W0[b4].DomNameSpaces[J4];
                                    if (t4.namespace == T4 && (t4.event == v4 || !v4)) {
                                        W0[b4].removeEventListener(t4.event, t4.listener, t4.capture);
                                        t4.removed = true;
                                    }
                                }
                                for (J4 = W0[b4].DomNameSpaces.length - 1; J4 >= 0; --J4) {
                                    if (W0[b4].DomNameSpaces[J4].removed) {
                                        W0[b4].DomNameSpaces.splice(J4, 1);
                                    }
                                }
                            }
                        }
                    }
                    var O0, A0, L0, c0, W0 = this;
                    O0 = U0.split(' ');
                    for (A0 = 0; A0 < O0.length; A0++) {
                        for (L0 = 0; L0 < this.length; L0++) {
                            if (T6(n0) || n0 === false) {
                                if (T6(n0)) {
                                    u0 = Y0 || false;
                                    Y0 = n0;
                                }
                                if (O0[A0].indexOf('.') === 0) {
                                    s0(O0[A0].substr(1), Y0, u0);
                                } else {
                                    this[L0].removeEventListener(O0[A0], Y0, u0);
                                }
                            } else {
                                if (this[L0].DomLiveListeners) {
                                    for (c0 = 0; c0 < this[L0].DomLiveListeners.length; c0++) {
                                        if (this[L0].DomLiveListeners[c0].listener === Y0) {
                                            this[L0].removeEventListener(O0[A0], this[L0].DomLiveListeners[c0].liveListener, u0);
                                        }
                                    }
                                }
                                if (this[L0].DomNameSpaces && this[L0].DomNameSpaces.length && O0[A0]) {
                                    s0(O0[A0]);
                                }
                            }
                        }
                    }
                    return this;
                },
                trigger: function I4(M4, Z4) {
                    var P4 = M4.split(' ');
                    for (var Q4 = 0; Q4 < P4.length; Q4++) {
                        for (var x4 = 0; x4 < this.length; x4++) {
                            var q4;
                            try {
                                q4 = new CustomEvent(P4[Q4], {
                                    detail: Z4,
                                    bubbles: true,
                                    cancelable: true
                                });
                            } catch (a4) {
                                q4 = document.createEvent('Event');
                                q4.initEvent(P4[Q4], true, true);
                                q4.detail = Z4;
                            }
                            this[x4].dispatchEvent(q4);
                        }
                    }
                    return this;
                },
                width: function D4(f4) {
                    if (f4 !== undefined) {
                        return this.css('width', f4);
                    }
                    if (this[0] === window) {
                        return window.innerWidth;
                    } else if (this[0] === document) {
                        return document.documentElement.scrollWidth;
                    } else {
                        return this.length > 0 ? parseFloat(this.css('width')) : null;
                    }
                },
                height: function N4(l4) {
                    if (l4 !== undefined) {
                        return this.css('height', l4);
                    }
                    if (this[0] === window) {
                        return window.innerHeight;
                    } else if (this[0] === document) {
                        var E4 = document.body,
                            e4 = document.documentElement;
                        return Math.max(E4.scrollHeight, E4.offsetHeight, e4.clientHeight, e4.scrollHeight, e4.offsetHeight);
                    } else {
                        return this.length > 0 ? parseFloat(this.css('height')) : null;
                    }
                },
                innerWidth: function d4() {
                    var h4 = this;
                    if (this.length > 0) {
                        if (this[0].innerWidth) {
                            return this[0].innerWidth;
                        } else {
                            var X4 = this[0].offsetWidth,
                                m4 = ['left', 'right'];
                            m4.forEach(function(z4) {
                                X4 -= parseInt(h4.css(X8('border-' + z4 + '-width')) || 0, 10);
                            });
                            return X4;
                        }
                    }
                },
                innerHeight: function i4() {
                    var C4 = this;
                    if (this.length > 0) {
                        if (this[0].innerHeight) {
                            return this[0].innerHeight;
                        } else {
                            var w4 = this[0].offsetHeight,
                                V4 = ['top', 'bottom'];
                            V4.forEach(function(k4) {
                                w4 -= parseInt(C4.css(X8('border-' + k4 + '-width')) || 0, 10);
                            });
                            return w4;
                        }
                    }
                },
                offset: function H4() {
                    if (this.length > 0) {
                        var K4 = this[0],
                            o4 = K4.getBoundingClientRect(),
                            p4 = document.documentElement;
                        return {
                            top: o4.top + window.pageYOffset - p4.clientTop,
                            left: o4.left + window.pageXOffset - p4.clientLeft
                        };
                    }
                },
                hide: function F4() {
                    for (var S4 = 0; S4 < this.length; S4++) {
                        this[S4].style.display = 'none';
                    }
                    return this;
                },
                show: function G4() {
                    for (var B4 = 0; B4 < this.length; B4++) {
                        if (this[B4].style.display == "none") {
                            this[B4].style.display = '';
                        }
                        if (getComputedStyle(this[B4], '').getPropertyValue("display") == "none") {
                            this[B4].style.display = 'block';
                        }
                    }
                    return this;
                },
                clone: function y4() {
                    return this.map(function() {
                        return this.cloneNode(true);
                    });
                },
                styles: function j4() {
                    return this[0] ? window.getComputedStyle(this[0], null) : undefined;
                },
                css: function R4(L4, c4) {
                    var A4, W4, O4 = this[0],
                        Y4 = '';
                    if (arguments.length < 2) {
                        if (!O4) {
                            return;
                        }
                        if (typeof L4 === 'string') {
                            return O4.style[L4] || getComputedStyle(O4, '').getPropertyValue(L4);
                        }
                    }
                    if (typeof L4 === 'string') {
                        if (!c4 && c4 !== 0) {
                            this.each(function() {
                                this.style.removeProperty(l2(L4));
                            });
                        } else {
                            Y4 = l2(L4) + ":" + K8(L4, c4);
                        }
                    } else {
                        for (W4 in L4) {
                            if (!L4[W4] && L4[W4] !== 0) {
                                for (A4 = 0; A4 < this.length; A4++) {
                                    this[A4].style.removeProperty(l2(W4));
                                }
                            } else {
                                Y4 += l2(W4) + ':' + K8(W4, L4[W4]) + ';';
                            }
                        }
                    }
                    return this.each(function() {
                        this.style.cssText += ';' + Y4;
                    });
                },
                each: function n4(s4) {
                    for (var u4 = 0; u4 < this.length; u4++) {
                        if (s4.apply(this[u4], [u4, this[u4]]) === false) {
                            break;
                        }
                    }
                    return this;
                },
                filter: function U4(t7) {
                    var J7 = [];
                    for (var b7 = 0; b7 < this.length; b7++) {
                        if (T6(t7)) {
                            if (t7.call(this[b7], b7, this[b7])) {
                                J7.push(this[b7]);
                            }
                        } else if (Z5.matches(this[b7], t7)) {
                            J7.push(this[b7]);
                        }
                    }
                    return new M5(J7);
                },
                html: function r7(T7) {
                    if (typeof T7 === 'undefined') {
                        return this[0] ? this[0].innerHTML : undefined;
                    } else {
                        this.empty();
                        for (var v7 = 0; v7 < this.length; v7++) {
                            this[v7].innerHTML = T7;
                        }
                        return this;
                    }
                },
                text: function g7(Q7) {
                    if (typeof Q7 === 'undefined') {
                        return this[0] ? this[0].textContent.trim() : null;
                    } else {
                        for (var I7 = 0; I7 < this.length; I7++) {
                            this[I7].textContent = Q7;
                        }
                        return this;
                    }
                },
                is: function q7(P7) {
                    return this.length > 0 && Z5.matches(this[0], P7);
                },
                not: function x7(Z7) {
                    var a7 = [];
                    if (T6(Z7) && Z7.call !== undefined) {
                        this.each(function(D7) {
                            if (!Z7.call(this, D7)) {
                                a7.push(this);
                            }
                        });
                    } else {
                        var M7 = typeof Z7 == 'string' ? this.filter(Z7) : Q8(Z7) && T6(Z7.item) ? y6.call(Z7) : Z5(Z7);
                        if (n2(M7)) {
                            M7 = Z5.map(M7, function(f7) {
                                return f7;
                            });
                        }
                        this.each(function(e7, N7) {
                            if (M7.indexOf(N7) < 0) {
                                a7.push(N7);
                            }
                        });
                    }
                    return Z5(a7);
                },
                indexOf: function E7(d7) {
                    for (var l7 = 0; l7 < this.length; l7++) {
                        if (this[l7] === d7) {
                            return l7;
                        }
                    }
                },
                index: function X7(h7) {
                    return h7 ? this.indexOf(Z5(h7)[0]) : this.parent().children().indexOf(this[0]);
                },
                get: function m7(z7) {
                    return z7 === undefined ? y6.call(this) : this[z7 >= 0 ? z7 : z7 + this.length];
                },
                eq: function i7(w7) {
                    if (typeof w7 === 'undefined') {
                        return this;
                    }
                    var C7 = this.length,
                        V7;
                    if (w7 > C7 - 1) {
                        return new M5([]);
                    }
                    if (w7 < 0) {
                        V7 = C7 + w7;
                        return V7 < 0 ? new M5([]) : new M5([this[V7]]);
                    }
                    return new M5([this[w7]]);
                },
                append: function k7(H7) {
                    var o7, p7;
                    for (o7 = 0; o7 < this.length; o7++) {
                        if (typeof H7 === 'string') {
                            var K7 = document.createElement('div');
                            K7.innerHTML = H7;
                            while (K7.firstChild) {
                                this[o7].appendChild(K7.firstChild);
                            }
                        } else if (H7 instanceof M5) {
                            for (p7 = 0; p7 < H7.length; p7++) {
                                this[o7].appendChild(H7[p7]);
                            }
                        } else {
                            this[o7].appendChild(H7);
                        }
                    }
                    return this;
                },
                appendTo: function F7(S7) {
                    Z5(S7).append(this);
                    return this;
                },
                prepend: function G7(j7) {
                    var B7, y7;
                    for (B7 = 0; B7 < this.length; B7++) {
                        if (typeof j7 === 'string') {
                            var R7 = document.createElement('div');
                            R7.innerHTML = j7;
                            for (y7 = R7.childNodes.length - 1; y7 >= 0; y7--) {
                                this[B7].insertBefore(R7.childNodes[y7], this[B7].childNodes[0]);
                            }
                        } else if (j7 instanceof M5) {
                            for (y7 = 0; y7 < j7.length; y7++) {
                                this[B7].insertBefore(j7[y7], this[B7].childNodes[0]);
                            }
                        } else {
                            this[B7].insertBefore(j7, this[B7].childNodes[0]);
                        }
                    }
                    return this;
                },
                prependTo: function L7(W7) {
                    Z5(W7).prepend(this);
                    return this;
                },
                insertBefore: function A7(n7) {
                    var O7 = Z5(n7);
                    for (var Y7 = 0; Y7 < this.length; Y7++) {
                        if (O7.length === 1) {
                            O7[0].parentNode.insertBefore(this[Y7], O7[0]);
                        } else if (O7.length > 1) {
                            for (var c7 = 0; c7 < O7.length; c7++) {
                                O7[c7].parentNode.insertBefore(this[Y7].cloneNode(true), O7[c7]);
                            }
                        }
                    }
                    return this;
                },
                insertAfter: function u7(J6Z) {
                    var s7 = Z5(J6Z);
                    for (var U7 = 0; U7 < this.length; U7++) {
                        if (s7.length === 1) {
                            s7[0].parentNode.insertBefore(this[U7], s7[0].nextSibling);
                        } else if (s7.length > 1) {
                            for (var b6Z = 0; b6Z < s7.length; b6Z++) {
                                s7[b6Z].parentNode.insertBefore(this[U7].cloneNode(true), s7[b6Z].nextSibling);
                            }
                        }
                    }
                    return this;
                },
                next: function t6Z(r6Z) {
                    if (this.length > 0) {
                        if (r6Z) {
                            if (this[0].nextElementSibling && Z5(this[0].nextElementSibling).is(r6Z)) {
                                return new M5([this[0].nextElementSibling]);
                            } else {
                                return new M5([]);
                            }
                        } else {
                            if (this[0].nextElementSibling) {
                                return new M5([this[0].nextElementSibling]);
                            } else {
                                return new M5([]);
                            }
                        }
                    } else {
                        return new M5([]);
                    }
                },
                nextAll: function v6Z(Q6Z) {
                    var I6Z = [],
                        T6Z = this[0];
                    if (!T6Z) {
                        return new M5([]);
                    }
                    while (T6Z.nextElementSibling) {
                        var g6Z = T6Z.nextElementSibling;
                        if (Q6Z) {
                            if (Z5(g6Z).is(Q6Z)) {
                                I6Z.push(g6Z);
                            }
                        } else {
                            I6Z.push(g6Z);
                        }
                        T6Z = g6Z;
                    }
                    return new M5(I6Z);
                },
                prev: function q6Z(P6Z) {
                    if (this.length > 0) {
                        if (P6Z) {
                            if (this[0].previousElementSibling && Z5(this[0].previousElementSibling).is(P6Z)) {
                                return new M5([this[0].previousElementSibling]);
                            } else {
                                return new M5([]);
                            }
                        } else {
                            if (this[0].previousElementSibling) {
                                return new M5([this[0].previousElementSibling]);
                            } else {
                                return new M5([]);
                            }
                        }
                    } else {
                        return new M5([]);
                    }
                },
                prevAll: function x6Z(D6Z) {
                    var a6Z = [];
                    var Z6Z = this[0];
                    if (!Z6Z) {
                        return new M5([]);
                    }
                    while (Z6Z.previousElementSibling) {
                        var M6Z = Z6Z.previousElementSibling;
                        if (D6Z) {
                            if (Z5(M6Z).is(D6Z)) {
                                a6Z.push(M6Z);
                            }
                        } else {
                            a6Z.push(M6Z);
                        }
                        Z6Z = M6Z;
                    }
                    return new M5(a6Z);
                },
                parent: function f6Z(E6Z) {
                    var e6Z = [];
                    for (var N6Z = 0; N6Z < this.length; N6Z++) {
                        if (this[N6Z].parentNode !== null) {
                            if (E6Z) {
                                if (Z5(this[N6Z].parentNode).is(E6Z)) {
                                    e6Z.push(this[N6Z].parentNode);
                                }
                            } else {
                                e6Z.push(this[N6Z].parentNode);
                            }
                        }
                    }
                    return Z5(Z5.unique(e6Z));
                },
                parents: function l6Z(m6Z) {
                    var X6Z = [];
                    for (var h6Z = 0; h6Z < this.length; h6Z++) {
                        var d6Z = this[h6Z].parentNode;
                        while (d6Z) {
                            if (m6Z) {
                                if (Z5(d6Z).is(m6Z)) {
                                    X6Z.push(d6Z);
                                }
                            } else {
                                X6Z.push(d6Z);
                            }
                            d6Z = d6Z.parentNode;
                        }
                    }
                    return Z5(Z5.unique(X6Z));
                },
                find: function z6Z(k6Z) {
                    var C6Z = [];
                    for (var i6Z = 0; i6Z < this.length; i6Z++) {
                        var V6Z = this[i6Z].querySelectorAll(k6Z);
                        for (var w6Z = 0; w6Z < V6Z.length; w6Z++) {
                            C6Z.push(V6Z[w6Z]);
                        }
                    }
                    return new M5(C6Z);
                },
                children: function H6Z(S6Z) {
                    var K6Z = [];
                    for (var F6Z = 0; F6Z < this.length; F6Z++) {
                        var p6Z = this[F6Z].childNodes;
                        for (var o6Z = 0; o6Z < p6Z.length; o6Z++) {
                            if (!S6Z) {
                                if (p6Z[o6Z].nodeType === 1) {
                                    K6Z.push(p6Z[o6Z]);
                                }
                            } else {
                                if (p6Z[o6Z].nodeType === 1 && Z5(p6Z[o6Z]).is(S6Z)) {
                                    K6Z.push(p6Z[o6Z]);
                                }
                            }
                        }
                    }
                    return new M5(Z5.unique(K6Z));
                },
                remove: function G6Z() {
                    for (var B6Z = 0; B6Z < this.length; B6Z++) {
                        if (this[B6Z].parentNode) {
                            this[B6Z].parentNode.removeChild(this[B6Z]);
                        }
                    }
                    return this;
                },
                add: function y6Z() {
                    var j6Z = this;
                    var R6Z, L6Z;
                    for (R6Z = 0; R6Z < arguments.length; R6Z++) {
                        var W6Z = Z5(arguments[R6Z]);
                        for (L6Z = 0; L6Z < W6Z.length; L6Z++) {
                            j6Z[j6Z.length] = W6Z[L6Z];
                            j6Z.length++;
                        }
                    }
                    return j6Z;
                },
                before: function A6Z(O6Z) {
                    Z5(O6Z).insertBefore(this);
                    return this;
                },
                after: function Y6Z(c6Z) {
                    Z5(c6Z).insertAfter(this);
                    return this;
                },
                scrollTop: function n6Z(u6Z) {
                    if (!this.length) {
                        return;
                    }
                    var s6Z = 'scrollTop' in this[0];
                    if (u6Z === undefined) {
                        return s6Z ? this[0].scrollTop : this[0].pageYOffset;
                    }
                    return this.each(s6Z ? function() {
                        this.scrollTop = u6Z;
                    } : function() {
                        this.scrollTo(this.scrollX, u6Z);
                    });
                },
                scrollLeft: function U6Z(b2Z) {
                    if (!this.length) {
                        return;
                    }
                    var J2Z = 'scrollLeft' in this[0];
                    if (b2Z === undefined) {
                        return J2Z ? this[0].scrollLeft : this[0].pageXOffset;
                    }
                    return this.each(J2Z ? function() {
                        this.scrollLeft = b2Z;
                    } : function() {
                        this.scrollTo(b2Z, this.scrollY);
                    });
                },
                contents: function t2Z() {
                    return this.map(function(v2Z, r2Z) {
                        return y6.call(r2Z.childNodes);
                    });
                },
                nextUntil: function T2Z(Q2Z) {
                    var g2Z = this,
                        I2Z = [];
                    while (g2Z.length && !g2Z.filter(Q2Z).length) {
                        I2Z.push(g2Z[0]);
                        g2Z = g2Z.next();
                    }
                    return Z5(I2Z);
                },
                prevUntil: function q2Z(Z2Z) {
                    var P2Z = this,
                        x2Z = [];
                    while (P2Z.length && !Z5(P2Z).filter(Z2Z).length) {
                        x2Z.push(P2Z[0]);
                        P2Z = P2Z.prev();
                    }
                    return Z5(x2Z);
                },
                detach: function M2Z() {
                    return this.remove();
                }
            };
            Z5.fn = M5.prototype;
            return Z5;
        }();
        var V = O2;
        J.$ = O2;
        V.inArray = function(a2Z, D2Z, f2Z) {
            return x1.indexOf.call(D2Z, a2Z, f2Z);
        };
        V.extend = function(N2Z) {
            var E2Z, e2Z = y6.call(arguments, 1);
            if (typeof N2Z == 'boolean') {
                E2Z = N2Z;
                N2Z = e2Z.shift();
            }
            N2Z = N2Z || {};
            e2Z.forEach(function(l2Z) {
                z8(N2Z, l2Z, E2Z);
            });
            return N2Z;
        };
        V.isFunction = T6;
        V.isArray = function(d2Z) {
            return Object.prototype.toString.apply(d2Z) === '[object Array]';
        };
        V.isPlainObject = function(X2Z) {
            return n2(X2Z) && X2Z !== null && X2Z !== X2Z.window && Object.getPrototypeOf(X2Z) == Object.prototype;
        };
        V.each = function(h2Z, i2Z) {
            var m2Z, z2Z;
            if (!n2(h2Z) || !i2Z) {
                return;
            }
            if (V.isArray(h2Z) || h2Z instanceof O2) {
                for (m2Z = 0; m2Z < h2Z.length; m2Z++) {
                    if (i2Z.call(h2Z[m2Z], m2Z, h2Z[m2Z]) === false) {
                        break;
                    }
                }
            } else {
                for (z2Z in h2Z) {
                    if (h2Z.hasOwnProperty(z2Z) && z2Z !== 'length') {
                        if (i2Z.call(h2Z[z2Z], z2Z, h2Z[z2Z]) === false) {
                            break;
                        }
                    }
                }
            }
            return this;
        };
        V.unique = function(V2Z) {
            var C2Z = [];
            for (var w2Z = 0; w2Z < V2Z.length; w2Z++) {
                if (C2Z.indexOf(V2Z[w2Z]) === -1) {
                    C2Z.push(V2Z[w2Z]);
                }
            }
            return C2Z;
        };
        V.map = function(o2Z, F2Z) {
            var k2Z, H2Z = [],
                p2Z, K2Z;
            if (Q8(o2Z)) {
                for (p2Z = 0; p2Z < o2Z.length; p2Z++) {
                    k2Z = F2Z(o2Z[p2Z], p2Z);
                    if (k2Z !== null) {
                        H2Z.push(k2Z);
                    }
                }
            } else {
                for (K2Z in o2Z) {
                    k2Z = F2Z(o2Z[K2Z], K2Z);
                    if (k2Z !== null) {
                        H2Z.push(k2Z);
                    }
                }
            }
            return H2Z.length > 0 ? V.fn.concat.apply([], H2Z) : H2Z;
        };
        V.matches = function(S2Z, G2Z) {
            if (!G2Z || !S2Z || S2Z.nodeType !== 1) {
                return false;
            }
            var B2Z = S2Z.matchesSelector || S2Z.webkitMatchesSelector || S2Z.mozMatchesSelector || S2Z.msMatchesSelector;
            return B2Z.call(S2Z, G2Z);
        };
        J.presetShort = function(y2Z, j2Z, R2Z) {
            J[y2Z] = function(c2Z, n2Z) {
                var Y2Z, W2Z, L2Z = {},
                    A2Z = n2Z || {},
                    O2Z = J.$;
                O2Z.extend(A2Z, {
                    preset: R2Z === false ? undefined : y2Z
                });
                O2Z(c2Z).each(function() {
                    Y2Z = new J.classes[j2Z || 'Scroller'](this, A2Z);
                    L2Z[this.id] = Y2Z;
                });
                W2Z = Object.keys(L2Z);
                return W2Z.length == 1 ? L2Z[W2Z[0]] : L2Z;
            };
        };
        var E2;
        var L6;
        var a2 = [];
        var n8 = navigator.userAgent;
        var P2 = n8.match(/Android|iPhone|iPad|iPod|Windows Phone|Windows|MSIE/i);
        if (/Android/i.test(P2)) {
            E2 = 'android';
            L6 = navigator.userAgent.match(/Android\s+([\d\.]+)/i);
            if (L6) {
                a2 = L6[0].replace('Android ', '').split('.');
            }
        } else if (/iPhone|iPad|iPod/i.test(P2)) {
            E2 = 'ios';
            L6 = navigator.userAgent.match(/OS\s+([\d\_]+)/i);
            if (L6) {
                a2 = L6[0].replace(/_/g, '.').replace('OS ', '').split('.');
            }
        } else if (/Windows Phone/i.test(P2)) {
            E2 = 'wp';
        } else if (/Windows|MSIE/i.test(P2)) {
            E2 = 'windows';
        }
        var a6 = {
            name: E2,
            majorVersion: a2[0],
            minorVersion: a2[1]
        };
        var q2 = 0;
        ['mouseover', 'mousedown', 'mouseup', 'click'].forEach(function(m3Z) {
            document.addEventListener(m3Z, N9, true);
        });
        if (a6.name == 'android' && a6.majorVersion < 5) {
            document.addEventListener('change', function(z3Z) {
                if (q2 && z3Z.target.type == 'checkbox' && !z3Z.target.mbscChange) {
                    z3Z.stopPropagation();
                    z3Z.preventDefault();
                }
                delete z3Z.target.mbscChange;
            }, true);
        }
		
(function() {


        function y3Z() {
            var L3Z = ['Webkit', 'Moz', 'O', 'ms'],
                W3Z;
            for (W3Z in L3Z) {
                if (B3Z([L3Z[W3Z] + 'Transform'])) {
                    return '-' + L3Z[W3Z].toLowerCase() + '-';
                }
            }
            return '';
        }

        function B3Z(j3Z) {
            var R3Z;
            for (R3Z in j3Z) {
                if (p3Z[j3Z[R3Z]] !== undefined) {
                    return true;
                }
            }
            return false;
        }
        var i3Z, k3Z = function A3Z() {},
            w3Z = J.$,
            o3Z = +new Date(),
            V3Z = {},
            C3Z = w3Z.extend,
            p3Z = document.createElement('modernizr').style,
            K3Z = y3Z(),
            F3Z = K3Z.replace(/^\-/, '').replace(/\-$/, '').replace('moz', 'Moz'),
            S3Z = p3Z.animation !== undefined ? 'animationend' : 'webkitAnimationEnd';
        i3Z = C3Z(J, {
            $: w3Z,
            version: '3.2.0',
			OhmXh : 1,
            util: {
                prefix: K3Z,
                jsPrefix: F3Z,
                animEnd: S3Z,
                preventClick: u8,
                testTouch: function O3Z(c3Z, Y3Z) {
                    if (c3Z.type == 'touchstart') {
                        w3Z(Y3Z).attr('data-touch', '1');
                    } else if (w3Z(Y3Z).attr('data-touch')) {
                        w3Z(Y3Z).removeAttr('data-touch');
                        return false;
                    }
                    return true;
                },
                objectToArray: function n3Z(s3Z) {
                    var u3Z = [],
                        U3Z;
                    for (U3Z in s3Z) {
                        u3Z.push(s3Z[U3Z]);
                    }
                    return u3Z;
                },
                arrayToObject: function b1Z(t1Z) {
                    var r1Z = {},
                        J1Z;
                    if (t1Z) {
                        for (J1Z = 0; J1Z < t1Z.length; J1Z++) {
                            r1Z[t1Z[J1Z]] = t1Z[J1Z];
                        }
                    }
                    return r1Z;
                },
                isNumeric: function v1Z(T1Z) {
                    return T1Z - parseFloat(T1Z) >= 0;
                },
                isString: function g1Z(I1Z) {
                    return typeof I1Z === 'string';
                },
                getCoord: Q2,
                getPosition: function Q1Z(Z1Z, M1Z) {
                    var P1Z = getComputedStyle(Z1Z[0]),
                        q1Z, x1Z;
                    w3Z.each(['t', 'webkitT', 'MozT', 'OT', 'msT'], function(D1Z, a1Z) {
                        if (P1Z[a1Z + 'ransform'] !== undefined) {
                            q1Z = P1Z[a1Z + 'ransform'];
                            return false;
                        }
                    });
                    q1Z = q1Z.split(')')[0].split(', ');
                    x1Z = M1Z ? q1Z[13] || q1Z[5] : q1Z[12] || q1Z[4];
                    return x1Z;
                },
                constrain: function f1Z(N1Z, e1Z, E1Z) {
                    return Math.max(e1Z, Math.min(N1Z, E1Z));
                },
                vibrate: function l1Z(d1Z) {
                    if ('vibrate' in navigator) {
                        navigator.vibrate(d1Z || 50);
                    }
                },
                throttle: function X1Z(z1Z, h1Z) {
                    var m1Z, i1Z;
                    h1Z = h1Z || 100;
                    return function() {
                        var C1Z = this,
                            w1Z = +new Date(),
                            V1Z = arguments;
                        if (m1Z && w1Z < m1Z + h1Z) {
                            clearTimeout(i1Z);
                            i1Z = setTimeout(function() {
                                m1Z = w1Z;
                                z1Z.apply(C1Z, V1Z);
                            }, h1Z);
                        } else {
                            m1Z = w1Z;
                            z1Z.apply(C1Z, V1Z);
                        }
                    };
                }
            },
            autoTheme: "mobiscroll",
            presets: {
                scroller: {},
                numpad: {},
                listview: {},
                menustrip: {}
            },
            themes: {
                form: {},
                page: {},
                frame: {},
                scroller: {},
                listview: {},
                menustrip: {},
                progress: {}
            },
            platform: a6,
            i18n: {},
            instances: V3Z,
            classes: {},
            components: {},
            settings: {},
            setDefaults: function k1Z(H1Z) {
                C3Z(this.settings, H1Z);
            },
            customTheme: function o1Z(G1Z, S1Z) {
                var p1Z, F1Z = J.themes,
                    K1Z = ['frame', 'scroller', 'listview', 'menustrip', 'form', 'progress'];
                for (p1Z = 0; p1Z < K1Z.length; p1Z++) {
                    F1Z[K1Z[p1Z]][G1Z] = J.$.extend({}, F1Z[K1Z[p1Z]][S1Z], {
                        baseTheme: S1Z
                    });
                }
            }
        });
        i3Z.presetShort = i3Z.presetShort || function() {};
        i3Z.classes.Base = function(R1Z, j1Z) {
            function n1Z() {
                w3Z(R1Z).addClass('mbsc-comp');
                if (!R1Z.id) {
                    R1Z.id = 'mobiscroll' + ++o3Z;
                } else if (V3Z[R1Z.id]) {
                    V3Z[R1Z.id].destroy();
                }
                V3Z[R1Z.id] = y1Z;
                y1Z.__ready = true;
            }
            var c1Z, W1Z, B1Z, Y1Z, L1Z, A1Z, O1Z, y1Z = this;
            y1Z.settings = {};
            y1Z._init = k3Z;
            y1Z._destroy = k3Z;
            y1Z._processSettings = k3Z;
            y1Z.init = function(C8Z) {
                var H8Z;
                for (H8Z in y1Z.settings) {
                    delete y1Z.settings[H8Z];
                }
                B1Z = y1Z.settings;
                C3Z(j1Z, C8Z);
                if (y1Z._hasDef) {
                    O1Z = i3Z.settings;
                }
                C3Z(B1Z, y1Z._defaults, O1Z, j1Z);
                if (y1Z._hasTheme) {
                    L1Z = B1Z.theme;
                    if (L1Z == 'auto' || !L1Z) {
                        L1Z = i3Z.autoTheme;
                    }
                    if (L1Z == 'default') {
                        L1Z = 'mobiscroll';
                    }
                    j1Z.theme = L1Z;
                    Y1Z = i3Z.themes[y1Z._class] ? i3Z.themes[y1Z._class][L1Z] : {};
                }
                if (y1Z._hasLang) {
                    c1Z = i3Z.i18n[B1Z.lang];
                }
                if (y1Z._hasTheme) {
                    A1Z('onThemeLoad', {
                        lang: c1Z,
                        settings: j1Z
                    });
                }
                C3Z(B1Z, Y1Z, c1Z, O1Z, j1Z);
                y1Z._processSettings();
                var k8Z = {
                    form: true,
                    page: true,
                    scrollview: true,
                    progress: true,
                    progressbase: true,
                    switch: true,
                    slider: true,
                    sliderbase: true,
                    stepper: true
                };
                if (k8Z[y1Z._class]) {
                    y1Z._init(C8Z);
                    A1Z('onInit');
                } else {
                    var i8Z = {
                        className: y1Z._class,
                        buttons: y1Z.buttons,
                        platform: i3Z.platform,
                        userAgent: navigator.userAgent,
                        defSortHandle: w3Z(R1Z).find(B1Z.listSelector || 'ul,ol').length ? 'left' : 'right',
                        settings: {
                            activeClass: B1Z.activeClass,
                            ampmText: B1Z.ampmText,
                            amText: B1Z.amText,
                            animateIcons: B1Z.animateIcons,
                            backText: B1Z.backText,
                            baseTheme: B1Z.baseTheme,
                            buttons: B1Z.buttons,
                            btnClass: B1Z.btnClass,
                            btnWidth: B1Z.btnWidth,
                            closeIcon: B1Z.closeIcon,
                            context: B1Z.context == 'body' ? 'body' : '',
                            controls: B1Z.controls,
                            cssClass: B1Z.cssClass,
                            dateDisplay: B1Z.dateDisplay,
                            dateFormat: B1Z.dateFormat,
                            dateWheels: B1Z.dateWheels,
                            dayNames: B1Z.dayNames,
                            dayNamesShort: B1Z.dayNamesShort,
                            daySuffix: B1Z.daySuffix,
                            display: B1Z.display,
                            dayText: B1Z.dayText,
                            endYear: B1Z.endYear,
                            fixedHeader: B1Z.fixedHeader,
                            handleClass: B1Z.handleClass,
                            handleMarkup: B1Z.handleMarkup,
                            hideText: B1Z.hideText,
                            hourText: B1Z.hourText,
                            itemNode: B1Z.itemNode,
                            itemWidth: B1Z.itemWidth,
                            lang: B1Z.lang,
                            lapIcon: B1Z.lapIcon,
                            lapText: B1Z.lapText,
                            layout: B1Z.layout,
                            leftArrowClass: B1Z.leftArrowClass,
                            max: B1Z.max,
                            min: B1Z.min,
                            minuteText: B1Z.minuteText,
                            monthNames: B1Z.monthNames,
                            monthNamesShort: B1Z.monthNamesShort,
                            monthSuffix: B1Z.monthSuffix,
                            monthText: B1Z.monthText,
                            nowIcon: B1Z.nowIcon,
                            nowText: B1Z.nowText,
                            pmText: B1Z.pmText,
                            preset: B1Z.preset,
                            resetIcon: B1Z.resetIcon,
                            resetText: B1Z.resetText,
                            rightArrowClass: B1Z.rightArrowClass,
                            rtl: B1Z.rtl,
                            secText: B1Z.secText,
                            select: B1Z.select,
                            snap: B1Z.snap,
                            sort: B1Z.sort,
                            sortable: B1Z.sortable,
                            sortHandle: B1Z.sortHandle,
                            startIcon: B1Z.startIcon,
                            startText: B1Z.startText,
                            startYear: B1Z.startYear,
                            stepHour: B1Z.stepHour,
                            stepMinute: B1Z.stepMinute,
                            stepSecond: B1Z.stepSecond,
                            steps: B1Z.steps,
                            stopIcon: B1Z.stopIcon,
                            stopText: B1Z.stopText,
                            striped: B1Z.striped,
                            theme: B1Z.theme,
                            timeFormat: B1Z.timeFormat,
                            timeWheels: B1Z.timeWheels,
                            todayText: B1Z.todayText,
                            type: B1Z.type,
                            variant: B1Z.variant,
                            wrapperClass: B1Z.wrapperClass,
                            yearSuffix: B1Z.yearSuffix,
                            yearText: B1Z.yearText
                        }
                    };
                    var h8Z, X8Z, m8Z = [],
                        z8Z = {},
                        V8Z = ['refresh', 'redraw', 'navigate', 'showMonthView', 'changeTab', 'addValue', 'removeValue', 'getDate', 'setDate', 'addEvent', 'removeEvent', 'getEvents', 'setEvents', 'setActiveDate', 'start', 'stop', 'reset', 'lap', 'resetlap', 'getTime', 'setTime', 'getEllapsedTime', 'setEllapsedTime'],
                        o8Z = {
                            jsonp: 1,
                            getInst: 1,
                            init: 1,
                            destroy: 1
                        },
                        w8Z = function p8Z(K8Z) {
                            y1Z[K8Z] = function() {
                                m8Z.push({
                                    func: K8Z,
                                    args: arguments
                                });
                            };
                        };
                    for (X8Z in y1Z) {
                        if (typeof y1Z[X8Z] === 'function' && !o8Z[X8Z]) {
                            z8Z[X8Z] = y1Z[X8Z];
                            w8Z(X8Z);
                        }
                    }
                    for (h8Z = 0; h8Z < V8Z.length; h8Z++) {
                        w8Z(V8Z[h8Z]);
                    }
                    if (B1Z.preset == 'timer' && !j1Z.buttons) {
                        i8Z.settings.buttons = ['toggle', 'resetlap'];
                        if (B1Z.display !== 'inline') {
                            i8Z.settings.buttons.push('hide');
                        }
                    }
                    if (B1Z.preset == 'eventcalendar' && !j1Z.buttons && B1Z.display != 'inline') {
                        i8Z.settings.buttons = ['close'];
                    }
                 
                   
                        for (X8Z in z8Z) {
                            y1Z[X8Z] = z8Z[X8Z];
                        }
                     
                        if (y1Z._hasPreset) {
                            W1Z = i3Z.presets[y1Z._class][B1Z.preset];
                            if (W1Z) {
                                W1Z = W1Z.call(R1Z, y1Z);
                                C3Z(B1Z, W1Z, j1Z);
                            }
                        }
                        y1Z._init(C8Z);
                        A1Z('onInit');
                        for (h8Z = 0; h8Z < m8Z.length; h8Z++) {
                            y1Z[m8Z[h8Z].func].apply(y1Z, m8Z[h8Z].args);
                        }
                        m8Z = null;
                        z8Z = null;
                
                }
            };
            y1Z.destroy = function() {
                if (y1Z) {
                    y1Z._destroy();
                    A1Z('onDestroy');
                    delete V3Z[R1Z.id];
                    y1Z = null;
                }
            };
            y1Z.tap = function(S8Z, G8Z, B8Z, y8Z, j8Z) {
                D9(y1Z, S8Z, G8Z, B8Z, y8Z, j8Z);
            };
            y1Z.trigger = function(W8Z, Y8Z) {
                var A8Z, R8Z, L8Z, O8Z = [O1Z, Y1Z, W1Z, j1Z];
                for (R8Z = 0; R8Z < 4; R8Z++) {
                    L8Z = O8Z[R8Z];
                    if (L8Z && L8Z[W8Z]) {
                        A8Z = L8Z[W8Z].call(R1Z, Y8Z || {}, y1Z);
                    }
                }
                return A8Z;
            };
            y1Z.option = function(c8Z, u8Z) {
                var n8Z = {};
                if ((typeof c8Z === 'undefined' ? 'undefined' : H6(c8Z)) === 'object') {
                    n8Z = c8Z;
                } else {
                    n8Z[c8Z] = u8Z;
                }
                y1Z.init(n8Z);
            };
            y1Z.getInst = function() {
                return y1Z;
            };
            j1Z = j1Z || {};
            A1Z = y1Z.trigger;
            if (!y1Z.__ready) {
                n1Z();
            }
        };
      
 }(window, document));
		
        var n3 = J.$;
        var S = {
            defaults: {
                shortYearCutoff: '+10',
                monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
                monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
                dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
                dayNamesMin: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
                amText: 'am',
                pmText: 'pm',
                getYear: function l9Z(d9Z) {
                    return d9Z.getFullYear();
                },
                getMonth: function X9Z(h9Z) {                  
                    return h9Z.getMonth();
                },
                getDay: function m9Z(z9Z) {                     
                    return z9Z.getDate();
                },
                getDate: Z9,
                getMaxDayOfMonth: function i9Z(w9Z, C9Z) {
                    return 32 - new Date(w9Z, C9Z, 32, 12).getDate();
                },
                getWeekNumber: function V9Z(k9Z) {
                    k9Z = new Date(k9Z);
                    k9Z.setHours(0, 0, 0);
                    k9Z.setDate(k9Z.getDate() + 4 - (k9Z.getDay() || 7));
                    var H9Z = new Date(k9Z.getFullYear(), 0, 1);
                    return Math.ceil(((k9Z - H9Z) / 86400000 + 1) / 7);
                }
            },
            adjustedDate: Z9,
            formatDate: function o9Z(B9Z, K9Z, A9Z) {
                if (!K9Z) {
                    return null;
                }
                var F9Z = n3.extend({}, S.defaults, A9Z),
                    y9Z = function O9Z(c9Z) {
                        var Y9Z = 0;
                        while (S9Z + 1 < B9Z.length && B9Z.charAt(S9Z + 1) == c9Z) {
                            Y9Z++;
                            S9Z++;
                        }
                        return Y9Z;
                    },
                    G9Z = function n9Z(s9Z, U9Z, b5Z) {
                        var u9Z = '' + U9Z;
                        if (y9Z(s9Z)) {
                            while (u9Z.length < b5Z) {
                                u9Z = '0' + u9Z;
                            }
                        }
                        return u9Z;
                    },
                    W9Z = function J5Z(r5Z, t5Z, v5Z, T5Z) {
                        return y9Z(r5Z) ? T5Z[t5Z] : v5Z[t5Z];
                    },
                    S9Z, R9Z, p9Z = '',
                    L9Z = false;
                for (S9Z = 0; S9Z < B9Z.length; S9Z++) {
                    if (L9Z) {
                        if (B9Z.charAt(S9Z) == "'" && !y9Z("'")) {
                            L9Z = false;
                        } else {
                            p9Z += B9Z.charAt(S9Z);
                        }
                    } else {
                        switch (B9Z.charAt(S9Z)) {
                            case 'd':
                                p9Z += G9Z('d', F9Z.getDay(K9Z), 2);
                                break;
                            case 'D':
                                p9Z += W9Z('D', K9Z.getDay(), F9Z.dayNamesShort, F9Z.dayNames);
                                break;
                            case 'o':
                                p9Z += G9Z('o', (K9Z.getTime() - new Date(K9Z.getFullYear(), 0, 0).getTime()) / 86400000, 3);
                                break;
                            case 'm':
                                p9Z += G9Z('m', F9Z.getMonth(K9Z) + 1, 2);
                                break;
                            case 'M':
                                p9Z += W9Z('M', F9Z.getMonth(K9Z), F9Z.monthNamesShort, F9Z.monthNames);
                                break;
                            case 'y':
                                R9Z = F9Z.getYear(K9Z);
                                p9Z += y9Z('y') ? R9Z : (R9Z % 100 < 10 ? '0' : '') + R9Z % 100;
                                break;
                            case 'h':
                                var j9Z = K9Z.getHours();
                                p9Z += G9Z('h', j9Z > 12 ? j9Z - 12 : j9Z === 0 ? 12 : j9Z, 2);
                                break;
                            case 'H':
                                p9Z += G9Z('H', K9Z.getHours(), 2);
                                break;
                            case 'i':
                                p9Z += G9Z('i', K9Z.getMinutes(), 2);
                                break;
                            case 's':
                                p9Z += G9Z('s', K9Z.getSeconds(), 2);
                                break;
                            case 'a':
                                p9Z += K9Z.getHours() > 11 ? F9Z.pmText : F9Z.amText;
                                break;
                            case 'A':
                                p9Z += K9Z.getHours() > 11 ? F9Z.pmText.toUpperCase() : F9Z.amText.toUpperCase();
                                break;
                            case "'":
                                if (y9Z("'")) {
                                    p9Z += "'";
                                } else {
                                    L9Z = true;
                                }
                                break;
                            default:
                                p9Z += B9Z.charAt(S9Z);
                        }
                    }
                }
                return p9Z;
            },
            parseDate: function g5Z(f5Z, q5Z, V5Z) {
                var I5Z = n3.extend({}, S.defaults, V5Z),
                    a5Z = I5Z.defaultValue && I5Z.defaultValue.getTime ? I5Z.defaultValue : new Date();
                if (!f5Z || !q5Z) {
                    return a5Z;
                }
                if (q5Z.getTime) {
                    return q5Z;
                }
                q5Z = (typeof q5Z === 'undefined' ? 'undefined' : H6(q5Z)) == 'object' ? q5Z.toString() : q5Z + '';
                var X5Z = I5Z.shortYearCutoff,
                    Z5Z = I5Z.getYear(a5Z),
                    M5Z = I5Z.getMonth(a5Z) + 1,
                    D5Z = I5Z.getDay(a5Z),
                    z5Z = -1,
                    Q5Z = a5Z.getHours(),
                    C5Z = a5Z.getMinutes(),
                    i5Z = 0,
                    N5Z = -1,
                    m5Z = false,
                    E5Z = function k5Z(o5Z) {
                        var H5Z = x5Z + 1 < f5Z.length && f5Z.charAt(x5Z + 1) == o5Z;
                        if (H5Z) {
                            x5Z++;
                        }
                        return H5Z;
                    },
                    P5Z = function p5Z(K5Z) {
                        E5Z(K5Z);
                        var S5Z = K5Z == '@' ? 14 : K5Z == '!' ? 20 : K5Z == 'y' ? 4 : K5Z == 'o' ? 3 : 2,
                            G5Z = new RegExp('^\\d{1,' + S5Z + '}'),
                            F5Z = q5Z.substr(e5Z).match(G5Z);
                        if (!F5Z) {
                            return 0;
                        }
                        e5Z += F5Z[0].length;
                        return parseInt(F5Z[0], 10);
                    },
                    d5Z = function B5Z(R5Z, L5Z, W5Z) {
                        var j5Z = E5Z(R5Z) ? W5Z : L5Z,
                            y5Z;
                        for (y5Z = 0; y5Z < j5Z.length; y5Z++) {
                            if (q5Z.substr(e5Z, j5Z[y5Z].length).toLowerCase() == j5Z[y5Z].toLowerCase()) {
                                e5Z += j5Z[y5Z].length;
                                return y5Z + 1;
                            }
                        }
                        return 0;
                    },
                    h5Z = function A5Z() {
                        e5Z++;
                    },
                    e5Z = 0,
                    x5Z;
                for (x5Z = 0; x5Z < f5Z.length; x5Z++) {
                    if (m5Z) {
                        if (f5Z.charAt(x5Z) == "'" && !E5Z("'")) {
                            m5Z = false;
                        } else {
                            h5Z();
                        }
                    } else {
                        switch (f5Z.charAt(x5Z)) {
                            case 'd':
                                D5Z = P5Z('d');
                                break;
                            case 'D':
                                d5Z('D', I5Z.dayNamesShort, I5Z.dayNames);
                                break;
                            case 'o':
                                z5Z = P5Z('o');
                                break;
                            case 'm':
                                M5Z = P5Z('m');
                                break;
                            case 'M':
                                M5Z = d5Z('M', I5Z.monthNamesShort, I5Z.monthNames);
                                break;
                            case 'y':
                                Z5Z = P5Z('y');
                                break;
                            case 'H':
                                Q5Z = P5Z('H');
                                break;
                            case 'h':
                                Q5Z = P5Z('h');
                                break;
                            case 'i':
                                C5Z = P5Z('i');
                                break;
                            case 's':
                                i5Z = P5Z('s');
                                break;
                            case 'a':
                                N5Z = d5Z('a', [I5Z.amText, I5Z.pmText], [I5Z.amText, I5Z.pmText]) - 1;
                                break;
                            case 'A':
                                N5Z = d5Z('A', [I5Z.amText, I5Z.pmText], [I5Z.amText, I5Z.pmText]) - 1;
                                break;
                            case "'":
                                if (E5Z("'")) {
                                    h5Z();
                                } else {
                                    m5Z = true;
                                }
                                break;
                            default:
                                h5Z();
                        }
                    }
                }
                if (Z5Z < 100) {
                    Z5Z += new Date().getFullYear() - new Date().getFullYear() % 100 + (Z5Z <= (typeof X5Z != 'string' ? X5Z : new Date().getFullYear() % 100 + parseInt(X5Z, 10)) ? 0 : -100);
                }
                if (z5Z > -1) {
                    M5Z = 1;
                    D5Z = z5Z;
                    do {
                        var w5Z = 32 - new Date(Z5Z, M5Z - 1, 32, 12).getDate();
                        if (D5Z <= w5Z) {
                            break;
                        }
                        M5Z++;
                        D5Z -= w5Z;
                    } while (true);
                }
                Q5Z = N5Z == -1 ? Q5Z : N5Z && Q5Z < 12 ? Q5Z + 12 : !N5Z && Q5Z == 12 ? 0 : Q5Z;
                var l5Z = I5Z.getDate(Z5Z, M5Z - 1, D5Z, Q5Z, C5Z, i5Z);
                if (I5Z.getYear(l5Z) != Z5Z || I5Z.getMonth(l5Z) + 1 != M5Z || I5Z.getDay(l5Z) != D5Z) {
                    return a5Z;
                }
                return l5Z;
            }
        };
        J.util.datetime = S;
        var r3;
        var s2;
        var P = J.$;
        var I3 = J.platform;
        var Y6 = J.util;
        var D1 = J.classes;
        var W2 = J.themes;
        var N3 = Y6.constrain;
        var F2 = Y6.isString;
        var u6 = Y6.getCoord;
        var b2 = Y6.animEnd;
        var x9 = /(iphone|ipod)/i.test(navigator.userAgent) && I3.majorVersion >= 7;
        var P9 = I3.name == 'ios' && I3.majorVersion == 8;
        var K = function O5Z() {};
        var D3 = function Y5Z(c5Z) {
            c5Z.preventDefault();
        };
        var x6 = function n5Z(S0Z, K0Z, n0Z) {
            function c0Z(u0Z) {
                if (q0Z) {
                    q0Z.removeClass('mbsc-fr-btn-a');
                }
                q0Z = P(this);
                if (!q0Z.hasClass('mbsc-fr-btn-d') && !q0Z.hasClass('mbsc-fr-btn-nhl')) {
                    q0Z.addClass('mbsc-fr-btn-a');
                }
                if (u0Z.type === 'mousedown') {
                    P(document).on('mouseup', D0Z);
                } else if (u0Z.type === 'pointerdown') {
                    P(document).on('pointerup', D0Z);
                }
            }

            function D0Z(s0Z) {
                if (q0Z) {
                    q0Z.removeClass('mbsc-fr-btn-a');
                    q0Z = null;
                }
                if (s0Z.type === 'mouseup') {
                    P(document).off('mouseup', D0Z);
                } else if (s0Z.type === 'pointerup') {
                    P(document).off('pointerup', D0Z);
                }
            }

            function R0Z(U0Z) {
                if (U0Z.keyCode == 13) {
                    u5Z.select();
                } else if (U0Z.keyCode == 27) {
                    u5Z.cancel();
                }
            }

            function L0Z(b4Z) {
                if (!b4Z) {
                    p0Z.focus();
                }
                u5Z.ariaMessage(s5Z.ariaMessage);
            }

            function W0Z(r4Z) {
                var t4Z = r3,
                    J4Z = s5Z.focusOnClose;
                u5Z._markupRemove();
                U5Z.remove();
                if (t0Z) {
                    r0Z.mbscModals--;
                    if (s5Z.scrollLock) {
                        r0Z.mbscLock--;
                    }
                    if (!r0Z.mbscLock) {
                        e0Z.removeClass('mbsc-fr-lock');
                    }
                    if (!r0Z.mbscModals) {
                        e0Z.removeClass('mbsc-fr-lock-ios mbsc-fr-lock-ctx');
                        if (N0Z) {
                            Q0Z.css({
                                top: '',
                                left: ''
                            });
                            T0Z.scrollLeft(m0Z);
                            T0Z.scrollTop(C0Z);
                        }
                        if (!r4Z) {
                            if (!t4Z) {
                                t4Z = b0Z;
                            }
                            setTimeout(function() {
                                if (J4Z === undefined || J4Z === true) {
                                    s2 = true;
                                    t4Z[0].focus();
                                } else if (J4Z) {
                                    P(J4Z)[0].focus();
                                }
                            }, 200);
                        }
                    }
                }
                r3 = null;
                u5Z._isVisible = false;
                V0Z = false;
                v0Z('onHide');
            }

            function A0Z(v4Z) {
                clearTimeout(H0Z[v4Z.type]);
                H0Z[v4Z.type] = setTimeout(function() {
                    var g4Z, T4Z = v4Z.type == 'scroll';
                    if (T4Z && !X0Z) {
                        return;
                    }
                    u5Z.position(!T4Z);
                    if (v4Z.type == 'orientationchange') {
                        g0Z.style.display = 'none';
                        g4Z = g0Z.offsetHeight;
                        g0Z.style.display = '';
                    }
                }, 200);
            }

            function O0Z(I4Z) {
                if (I4Z.target.nodeType && !g0Z.contains(I4Z.target)) {
                    g0Z.focus();
                }
            }

            function l0Z(Q4Z, q4Z) {
                if (Q4Z) {
                    Q4Z();
                }
                if (u5Z.show() !== false) {
                    r3 = q4Z;
                    setTimeout(function() {
                        s2 = false;
                    }, 300);
                }
            }

            function y0Z() {
                u5Z._fillValue();
                v0Z('onSet', {
                    valueText: u5Z._value
                });
            }

            function j0Z() {
                v0Z('onCancel', {
                    valueText: u5Z._value
                });
            }

            function Y0Z() {
                u5Z.setVal(null, true);
            }
            var h0Z, Q0Z, G0Z, e0Z, U5Z, d0Z, F0Z, a0Z, T0Z, o0Z, M0Z, q0Z, r0Z, J0Z, P0Z, t0Z, V0Z, x0Z, Z0Z, I0Z, f0Z, N0Z, p0Z, g0Z, E0Z, z0Z, s5Z, m0Z, X0Z, C0Z, B0Z, v0Z, i0Z, w0Z, u5Z = this,
                b0Z = P(S0Z),
                k0Z = [],
                H0Z = {};
            D1.Base.call(this, S0Z, K0Z, true);
            u5Z.position = function(H4Z) {
                var E4Z, V4Z, X4Z, h4Z, f4Z, z4Z, i4Z, w4Z, C4Z, m4Z, k4Z, P4Z, Z4Z, l4Z, M4Z, D4Z, d4Z = {},
                    a4Z = 0,
                    x4Z = 0,
                    N4Z = 0,
                    e4Z = 0;
                if (z0Z || !V0Z) {
                    return;
                }
                u5Z._position(U5Z);
                P4Z = x0Z.offsetHeight;
                Z4Z = x0Z.offsetWidth;
                if (i0Z === Z4Z && w0Z === P4Z && H4Z) {
                    return;
                }
                if (u5Z._isFullScreen || /top|bottom/.test(s5Z.display)) {
                    a0Z.width(Z4Z);
                } else {
                    o0Z.width('');
                }
                if (v0Z('onPosition', {
                        target: x0Z,
                        windowWidth: Z4Z,
                        windowHeight: P4Z
                    }) === false || !t0Z) {
                    return;
                }
                P('.mbsc-comp', U5Z).each(function() {
                    var o4Z = J.instances[this.id];
                    if (o4Z && o4Z !== u5Z && o4Z.position) {
                        o4Z.position();
                    }
                });
                if (!u5Z._isFullScreen && /center|bubble/.test(s5Z.display)) {
                    P('.mbsc-w-p', U5Z).each(function() {
                        l4Z = this.getBoundingClientRect().width;
                        e4Z += l4Z;
                        N4Z = l4Z > N4Z ? l4Z : N4Z;
                    });
                    o0Z.css({
                        'width': u5Z._isLiquid ? Math.min(s5Z.maxPopupWidth, Z4Z - 16) : Math.ceil(e4Z > Z4Z ? N4Z : e4Z),
                        'white-space': e4Z > Z4Z ? '' : 'nowrap'
                    });
                }
                Z0Z = g0Z.offsetWidth;
                I0Z = g0Z.offsetHeight;
                X0Z = I0Z <= P4Z && Z0Z <= Z4Z;
                if (f0Z) {
                    a4Z = T0Z.scrollLeft();
                    x4Z = T0Z.scrollTop();
                }
                if (s5Z.display == 'center') {
                    D4Z = Math.max(0, a4Z + (Z4Z - Z0Z) / 2);
                    M4Z = Math.max(0, x4Z + (P4Z - I0Z) / 2);
                } else if (s5Z.display == 'bubble') {
                    E4Z = s5Z.anchor === undefined ? b0Z : P(s5Z.anchor);
                    i4Z = P('.mbsc-fr-arr-i', U5Z)[0];
                    h4Z = E4Z.offset();
                    f4Z = h4Z.top + (P0Z ? x4Z - Q0Z.offset().top : 0);
                    z4Z = h4Z.left + (P0Z ? a4Z - Q0Z.offset().left : 0);
                    V4Z = E4Z[0].offsetWidth;
                    X4Z = E4Z[0].offsetHeight;
                    w4Z = i4Z.offsetWidth;
                    C4Z = i4Z.offsetHeight;
                    D4Z = N3(z4Z - (Z0Z - V4Z) / 2, a4Z + 8, a4Z + Z4Z - Z0Z - 8);
                    M4Z = f4Z - I0Z - C4Z / 2;
                    if (M4Z < x4Z || f4Z > x4Z + P4Z) {
                        a0Z.removeClass('mbsc-fr-bubble-top').addClass('mbsc-fr-bubble-bottom');
                        M4Z = f4Z + X4Z + C4Z / 2;
                    } else {
                        a0Z.removeClass('mbsc-fr-bubble-bottom').addClass('mbsc-fr-bubble-top');
                    }
                    P('.mbsc-fr-arr', U5Z).css({
                        left: N3(z4Z + V4Z / 2 - (D4Z + (Z0Z - w4Z) / 2), 0, w4Z)
                    });
                    X0Z = M4Z > x4Z && D4Z > a4Z && M4Z + I0Z <= x4Z + P4Z && D4Z + Z0Z <= a4Z + Z4Z;
                } else {
                    D4Z = a4Z;
                    M4Z = s5Z.display == 'top' ? x4Z : Math.max(0, x4Z + P4Z - I0Z);
                }
                if (f0Z) {
                    m4Z = Math.max(M4Z + I0Z, P0Z ? r0Z.scrollHeight : P(document).height());
                    k4Z = Math.max(D4Z + Z0Z, P0Z ? r0Z.scrollWidth : P(document).width());
                    F0Z.css({
                        width: k4Z,
                        height: m4Z
                    });
                    if (s5Z.scroll && s5Z.display == 'bubble' && (M4Z + I0Z + 8 > x4Z + P4Z || f4Z > x4Z + P4Z || f4Z + X4Z < x4Z)) {
                        z0Z = true;
                        setTimeout(function() {
                            z0Z = false;
                        }, 300);
                        T0Z.scrollTop(Math.min(f4Z, M4Z + I0Z - P4Z + 8, m4Z - P4Z));
                    }
                }
                d4Z.top = Math.floor(M4Z);
                d4Z.left = Math.floor(D4Z);
                a0Z.css(d4Z);
                i0Z = Z4Z;
                w0Z = P4Z;
            };
            u5Z.attachShow = function(G4Z, F4Z) {
                var K4Z, p4Z = P(G4Z),
                    S4Z = p4Z.prop('readonly');
                if (s5Z.display !== 'inline') {
                    if ((s5Z.showOnFocus || s5Z.showOnTap) && p4Z.is('input,select')) {
                        p4Z.prop('readonly', true).on('mousedown.mbsc', function(B4Z) {
                            B4Z.preventDefault();
                        }).on('focus.mbsc', function() {
                            if (u5Z._isVisible) {
                                this.blur();
                            }
                        });
                        K4Z = P('label[for="' + p4Z.attr('id') + '"]');
                        if (!K4Z.length) {
                            K4Z = p4Z.closest('label');
                        }
                    }
                    if (p4Z.is('select')) {
                        return;
                    }
                    if (s5Z.showOnFocus) {
                        p4Z.on('focus.mbsc', function() {
                            if (!s2) {
                                l0Z(F4Z, p4Z);
                            }
                        });
                    }
                    if (s5Z.showOnTap) {
                        p4Z.on('keydown.mbsc', function(y4Z) {
                            if (y4Z.keyCode == 32 || y4Z.keyCode == 13) {
                                y4Z.preventDefault();
                                y4Z.stopPropagation();
                                l0Z(F4Z, p4Z);
                            }
                        });
                        u5Z.tap(p4Z, function() {
                            l0Z(F4Z, p4Z);
                        });
                        if (K4Z && K4Z.length) {
                            u5Z.tap(K4Z, function() {
                                l0Z(F4Z, p4Z);
                            });
                        }
                    }
                    k0Z.push({
                        readOnly: S4Z,
                        el: p4Z,
                        lbl: K4Z
                    });
                }
            };
            u5Z.select = function() {
                if (t0Z) {
                    u5Z.hide(false, 'set', false, y0Z);
                } else {
                    y0Z();
                }
            };
            u5Z.cancel = function() {
                if (t0Z) {
                    u5Z.hide(false, 'cancel', false, j0Z);
                } else {
                    j0Z();
                }
            };
            u5Z.clear = function() {
                u5Z._clearValue();
                v0Z('onClear');
                if (t0Z && u5Z._isVisible && !u5Z.live) {
                    u5Z.hide(false, 'clear', false, Y0Z);
                } else {
                    Y0Z();
                }
            };
            u5Z.enable = function() {
                s5Z.disabled = false;
                if (u5Z._isInput) {
                    b0Z.prop('disabled', false);
                }
            };
            u5Z.disable = function() {
                s5Z.disabled = true;
                if (u5Z._isInput) {
                    b0Z.prop('disabled', true);
                }
            };
            u5Z.show = function(c4Z, W4Z) {
                function A4Z() {
                    U5Z.off(b2, A4Z).removeClass('mbsc-anim-in mbsc-anim-trans mbsc-anim-trans-' + J0Z).find('.mbsc-fr-popup').removeClass('mbsc-anim-' + J0Z);
                    L0Z(W4Z);
                }
                var n4Z, R4Z;
                if (s5Z.disabled || u5Z._isVisible) {
                    return;
                }
                u5Z._readValue();
                if (v0Z('onBeforeShow') === false) {
                    return false;
                }
                J0Z = s5Z.animate;
                M0Z = s5Z.buttons || [];
                f0Z = P0Z || s5Z.display == 'bubble';
                N0Z = x9 && !f0Z && s5Z.scrollLock;
                n4Z = M0Z.length > 0;
                if (J0Z !== false) {
                    if (s5Z.display == 'top') {
                        J0Z = J0Z || 'slidedown';
                    } else if (s5Z.display == 'bottom') {
                        J0Z = J0Z || 'slideup';
                    } else if (s5Z.display == 'center' || s5Z.display == 'bubble') {
                        J0Z = J0Z || 'pop';
                    }
                }
                if (t0Z) {
                    C0Z = Math.max(0, T0Z.scrollTop());
                    m0Z = Math.max(0, T0Z.scrollLeft());
                    i0Z = 0;
                    w0Z = 0;
                    if (N0Z && !e0Z.hasClass('mbsc-fr-lock-ios')) {
                        Q0Z.css({
                            top: -C0Z + 'px',
                            left: -m0Z + 'px'
                        });
                    }
                    e0Z.addClass((s5Z.scrollLock ? 'mbsc-fr-lock' : '') + (N0Z ? ' mbsc-fr-lock-ios' : '') + (P0Z ? ' mbsc-fr-lock-ctx' : ''));
                    if (P(document.activeElement).is('input,textarea')) {
                        document.activeElement.blur();
                    }
                    if (J.activeInstance) {
                        J.activeInstance.hide();
                    }
                    J.activeInstance = u5Z;
                    r0Z.mbscModals = r0Z.mbscModals || 0;
                    r0Z.mbscLock = r0Z.mbscLock || 0;
                    r0Z.mbscModals++;
                    if (s5Z.scrollLock) {
                        r0Z.mbscLock++;
                    }
                }
                R4Z = '<div lang="' + s5Z.lang + '" class="mbsc-fr mbsc-no-touch mbsc-' + s5Z.theme + (s5Z.baseTheme ? ' mbsc-' + s5Z.baseTheme : '') + ' mbsc-fr-' + s5Z.display + ' ' + (s5Z.cssClass || '') + ' ' + (s5Z.compClass || '') + (u5Z._isLiquid ? ' mbsc-fr-liq' : '') +  (N0Z ? ' mbsc-platform-ios' : '') + (n4Z ? M0Z.length >= 3 ? ' mbsc-fr-btn-block ' : '' : ' mbsc-fr-nobtn') + '">' + (t0Z ? '<div class="mbsc-fr-persp"><div class="mbsc-fr-overlay"></div><div role="dialog" tabindex="-1" class="mbsc-fr-scroll">' : '') + '<div class="mbsc-fr-popup' + (s5Z.rtl ? ' mbsc-rtl' : ' mbsc-ltr') + (s5Z.headerText ? ' mbsc-fr-has-hdr' : '') + '">' + (s5Z.display === 'bubble' ? '<div class="mbsc-fr-arr-w"><div class="mbsc-fr-arr-i"><div class="mbsc-fr-arr"></div></div></div>' : '') + '<div class="mbsc-fr-w"><div aria-live="assertive" class="mbsc-fr-aria mbsc-fr-hdn"></div>' + (s5Z.headerText ? '<div class="mbsc-fr-hdr">' + (F2(s5Z.headerText) ? s5Z.headerText : '') + '</div>' : '') + '<div class="mbsc-fr-c">';
                R4Z += u5Z._generateContent();
				R4Z += '</div>';
				if (n4Z) {
					R4Z += '<div class="mbsc-fr-btn-cont">';
					P.each(M0Z, function(b, a) {
						a = F2(a) ? u5Z.buttons[a] : a;
						if (a.handler === 'set') {
							a.parentClass = 'mbsc-fr-btn-s';
						}
						if (a.handler === 'cancel') {
							a.parentClass = 'mbsc-fr-btn-c';
						}
						R4Z += '<div' + (s5Z.btnWidth ? ' style="width:' + 100 / M0Z.length + '%"' : '') + ' class="mbsc-fr-btn-w ' + (a.parentClass || '') + '"><div tabindex="0" role="button" class="mbsc-fr-btn' + b + ' mbsc-fr-btn-e ' + (a.cssClass === undefined ? s5Z.btnClass : a.cssClass) + (a.icon ? ' mbsc-ic mbsc-ic-' + a.icon : '') + '">' + (a.text || '') + '</div></div>';
					});
					R4Z += '</div>';
				}
                R4Z += '</div></div></div></div>' + (t0Z ? '</div></div>' : '');
                U5Z = P(R4Z);
                F0Z = P('.mbsc-fr-persp', U5Z);
                d0Z = P('.mbsc-fr-scroll', U5Z);
                o0Z = P('.mbsc-fr-w', U5Z);
                G0Z = P('.mbsc-fr-hdr', U5Z);
                a0Z = P('.mbsc-fr-popup', U5Z);
                h0Z = P('.mbsc-fr-aria', U5Z);
                x0Z = U5Z[0];
                p0Z = d0Z[0];
                g0Z = a0Z[0];
                u5Z._markup = U5Z;
                u5Z._header = G0Z;
                u5Z._isVisible = true;
                E0Z = 'orientationchange resize';
                u5Z._markupReady(U5Z);
                v0Z('onMarkupReady', {
                    target: x0Z
                });
                if (t0Z) {
                    P(window).on('keydown', R0Z);
                    if (s5Z.scrollLock) {
                        U5Z.on('touchmove mousewheel wheel', function(u4Z) {
                            if (X0Z) {
                                u4Z.preventDefault();
                            }
                        });
                    }
                    if (s5Z.focusTrap) {
                        T0Z.on('focusin', O0Z);
                    }
                    if (s5Z.closeOnOverlayTap) {
                        var L4Z, j4Z, O4Z, Y4Z;
                        d0Z.on('touchstart mousedown', function(s4Z) {
                            if (!j4Z && s4Z.target == d0Z[0]) {
                                j4Z = true;
                                L4Z = false;
                                O4Z = u6(s4Z, 'X');
                                Y4Z = u6(s4Z, 'Y');
                            }
                        }).on('touchmove mousemove', function(U4Z) {
                            if (j4Z && !L4Z && (Math.abs(u6(U4Z, 'X') - O4Z) > 9 || Math.abs(u6(U4Z, 'Y') - Y4Z) > 9)) {
                                L4Z = true;
                            }
                        }).on('touchcancel', function() {
                            j4Z = false;
                        }).on('touchend touchcancel mouseup', function(b7Z) {
                            if (j4Z && !L4Z) {
                                u5Z.cancel();
                                if (b7Z.type != 'mouseup') {
                                    Y6.preventClick();
                                }
                            }
                            j4Z = false;
                        });
                    }
                    if (f0Z) {
                        E0Z += ' scroll';
                    }
                }
                setTimeout(function() {
                    if (t0Z) {
                        U5Z.appendTo(Q0Z);
                    } else if (b0Z.is('div') && !u5Z._hasContent) {
                        b0Z.empty().append(U5Z);
                    } else {
                        if (b0Z.hasClass('mbsc-control')) {
                            var J7Z = b0Z.closest('.mbsc-control-w');
                            U5Z.insertAfter(J7Z);
                            if (J7Z.hasClass('mbsc-select')) {
                                J7Z.addClass('mbsc-select-inline');
                            }
                        } else {
                            U5Z.insertAfter(b0Z);
                        }
                    }
                    V0Z = true;
                    u5Z._markupInserted(U5Z);
                    v0Z('onMarkupInserted', {
                        target: x0Z
                    });
                    U5Z.on('selectstart mousedown', D3).on('click', '.mbsc-fr-btn-e', D3).on('keydown', '.mbsc-fr-btn-e', function(t7Z) {
                        if (t7Z.keyCode == 32) {
                            t7Z.preventDefault();
                            t7Z.stopPropagation();
                            this.click();
                        }
                    }).on('keydown', function(r7Z) {
                        if (r7Z.keyCode == 32) {
                            r7Z.preventDefault();
                        } else if (r7Z.keyCode == 9 && t0Z && s5Z.focusTrap) {
                            var v7Z = U5Z.find('[tabindex="0"]').filter(function() {
                                    return this.offsetWidth > 0 || this.offsetHeight > 0;
                                }),
                                I7Z = v7Z.index(P(':focus', U5Z)),
                                T7Z = v7Z.length - 1,
                                g7Z = 0;
                            if (r7Z.shiftKey) {
                                T7Z = 0;
                                g7Z = -1;
                            }
                            if (I7Z === T7Z) {
                                v7Z.eq(g7Z)[0].focus();
                                r7Z.preventDefault();
                            }
                        }
                    }).on('touchstart mousedown pointerdown', '.mbsc-fr-btn-e', c0Z).on('touchend', '.mbsc-fr-btn-e', D0Z);
                    P('input,select,textarea', U5Z).on('selectstart mousedown', function(Q7Z) {
                        Q7Z.stopPropagation();
                    }).on('keydown', function(q7Z) {
                        if (q7Z.keyCode == 32) {
                            q7Z.stopPropagation();
                        }
                    });
                    x0Z.addEventListener('touchstart', function() {
                        if (!B0Z) {
                            B0Z = true;
                            Q0Z.find('.mbsc-no-touch').removeClass('mbsc-no-touch');
                        }
                    }, true);
                    P.each(M0Z, function(x7Z, P7Z) {
                        u5Z.tap(P('.mbsc-fr-btn' + x7Z, U5Z), function(Z7Z) {
                            P7Z = F2(P7Z) ? u5Z.buttons[P7Z] : P7Z;
                            (F2(P7Z.handler) ? u5Z.handlers[P7Z.handler] : P7Z.handler).call(this, Z7Z, u5Z);
                        }, true);
                    });
                    u5Z._attachEvents(U5Z);
                    u5Z.position();
                    T0Z.on(E0Z, A0Z);
                    if (t0Z) {
                        if (J0Z && !c4Z) {
                            U5Z.addClass('mbsc-anim-in mbsc-anim-trans mbsc-anim-trans-' + J0Z).on(b2, A4Z).find('.mbsc-fr-popup').addClass('mbsc-anim-' + J0Z);
                        } else {
                            L0Z(W4Z);
                        }
                    }
                    v0Z('onShow', {
                        target: x0Z,
                        valueText: u5Z._tempValue
                    });
                }, N0Z ? 100 : 0);
            };
            u5Z.hide = function(M7Z, a7Z, D7Z, f7Z) {
                function N7Z() {
                    U5Z.off(b2, N7Z);
                    W0Z(M7Z);
                }
                if (!u5Z._isVisible || !D7Z && !u5Z._isValid && a7Z == 'set' || !D7Z && v0Z('onBeforeClose', {
                        valueText: u5Z._tempValue,
                        button: a7Z
                    }) === false) {
                    return false;
                }
                if (t0Z) {
                    if (P(document.activeElement).is('input,textarea') && g0Z.contains(document.activeElement)) {
                        document.activeElement.blur();
                    }
                    P(window).off('keydown', R0Z);
                    delete J.activeInstance;
                }
                if (U5Z) {
                    if (t0Z && J0Z && !M7Z) {
                        U5Z.addClass('mbsc-anim-out mbsc-anim-trans mbsc-anim-trans-' + J0Z).on(b2, N7Z).find('.mbsc-fr-popup').addClass('mbsc-anim-' + J0Z);
                    } else {
                        W0Z(M7Z);
                    }
                    u5Z._detachEvents(U5Z);
                    T0Z.off(E0Z, A0Z).off('focusin', O0Z);
                }
                if (f7Z) {
                    f7Z();
                }
                v0Z('onClose', {
                    valueText: u5Z._value
                });
            };
            u5Z.ariaMessage = function(e7Z) {
                h0Z.html('');
                setTimeout(function() {
                    h0Z.html(e7Z);
                }, 100);
            };
            u5Z.isVisible = function() {
                return u5Z._isVisible;
            };
            u5Z.setVal = K;
            u5Z.getVal = K;
            u5Z._generateContent = K;
            u5Z._attachEvents = K;
            u5Z._detachEvents = K;
            u5Z._readValue = K;
            u5Z._clearValue = K;
            u5Z._fillValue = K;
            u5Z._markupReady = K;
            u5Z._markupInserted = K;
            u5Z._markupRemove = K;
            u5Z._position = K;
            u5Z.__processSettings = K;
            u5Z.__init = K;
            u5Z.__destroy = K;
            u5Z._destroy = function() {
                u5Z.hide(true, false, true);
                b0Z.off('.mbsc');
                P.each(k0Z, function(l7Z, E7Z) {
                    E7Z.el.off('.mbsc').prop('readonly', E7Z.readOnly);
                    if (E7Z.lbl) {
                        E7Z.lbl.off('.mbsc');
                    }
                });
                u5Z.__destroy();
            };
            u5Z._processSettings = function() {
                var d7Z, X7Z;
                u5Z.__processSettings();
                s5Z.buttons = s5Z.buttons || (s5Z.display !== 'inline' ? ['set', 'cancel'] : []);
                s5Z.headerText = s5Z.headerText === undefined ? s5Z.display !== 'inline' ? '{value}' : false : s5Z.headerText;
                M0Z = s5Z.buttons || [];
                t0Z = s5Z.display !== 'inline';
                P0Z = s5Z.context != 'body';
                Q0Z = P(s5Z.context);
                e0Z = P0Z ? Q0Z : P('body,html');
                r0Z = Q0Z[0];
                u5Z._window = T0Z = P(P0Z ? s5Z.context : window);
                u5Z.live = true;
                for (X7Z = 0; X7Z < M0Z.length; X7Z++) {
                    d7Z = M0Z[X7Z];
                    if (d7Z == 'ok' || d7Z == 'set' || d7Z.handler == 'set') {
                        u5Z.live = false;
                    }
                }
                u5Z.buttons.set = {
                    text: s5Z.setText,
                    icon: s5Z.setIcon,
                    handler: 'set'
                };
                u5Z.buttons.cancel = {
                    text: s5Z.cancelText,
                    icon: s5Z.cancelIcon,
                    handler: 'cancel'
                };
                u5Z.buttons.close = {
                    text: s5Z.closeText,
                    icon: s5Z.closeIcon,
                    handler: 'cancel'
                };
                u5Z.buttons.clear = {
                    text: s5Z.clearText,
                    icon: s5Z.clearIcon,
                    handler: 'clear'
                };
                u5Z._isInput = b0Z.is('input');
            };
            u5Z._init = function() {
                if (u5Z._isVisible) {
                    u5Z.hide(true, false, true);
                }
                b0Z.off('.mbsc');
                u5Z.__init();
                u5Z._isLiquid = s5Z.layout == 'liquid';
                if (t0Z) {
                    u5Z._readValue();
                    if (!u5Z._hasContent) {
                        u5Z.attachShow(b0Z);
                    }
                } else {
                    u5Z.show();
                }
                b0Z.on('change.mbsc', function() {
                    if (!u5Z._preventChange) {
                        u5Z.setVal(b0Z.val(), true, false);
                    }
                    u5Z._preventChange = false;
                });
            };
            u5Z.buttons = {};
            u5Z.handlers = {
                set: u5Z.select,
                cancel: u5Z.cancel,
                clear: u5Z.clear
            };
            u5Z._value = null;
            u5Z._isValid = true;
            u5Z._isVisible = false;
            s5Z = u5Z.settings;
            v0Z = u5Z.trigger;
            if (!n0Z) {
                u5Z.init(K0Z);
            }
        };
        x6.prototype._defaults = {
            lang: 'zh',
            setText: 'Set',
            selectedText: '{count} selected',
            closeText: 'Close',
            cancelText: 'Cancel',
            clearText: 'Clear',
            context: 'body',
            maxPopupWidth: 600,
            disabled: false,
            closeOnOverlayTap: true,
            showOnFocus: false,
            showOnTap: true,
            display: 'center',
            scroll: true,
            scrollLock: true,
            tap: true,
            btnClass: 'mbsc-fr-btn',
            btnWidth: true,
            focusTrap: true,
            focusOnClose: !P9
        };
        D1.Frame = x6;
        W2.frame.mobiscroll = {
            headerText: false,
            btnWidth: false
        };
        W2.scroller.mobiscroll = P.extend({}, W2.frame.mobiscroll, {
            rows: 5,
            showLabel: false,
            selectedLineBorder: 1,
            weekDays: 'min',
            checkIcon: 'ion-ios7-checkmark-empty',
            btnPlusClass: 'mbsc-ic mbsc-ic-arrow-down5',
            btnMinusClass: 'mbsc-ic mbsc-ic-arrow-up5',
            btnCalPrevClass: 'mbsc-ic mbsc-ic-arrow-left5',
            btnCalNextClass: 'mbsc-ic mbsc-ic-arrow-right5'
        });
        P(window).on('focus', function() {
            if (r3) {
                s2 = true;
            }
        });
        var w6 = J.$;
        var B3 = J.classes;
        var g6 = J.util;
        var d6 = g6.constrain;
        var I1 = g6.jsPrefix;
        var Q9 = g6.prefix;
        var X2 = g6.getCoord;
        var e1 = g6.getPosition;
        var I9 = g6.testTouch;
        var z2 = g6.isNumeric;
        var T9 = g6.isString;
        var r9 = /(iphone|ipod|ipad)/i.test(navigator.userAgent);
        var J9 = function h7Z() {};
        var L3 = window.requestAnimationFrame || function(m7Z) {
            m7Z();
        };
        var O3 = window.cancelAnimationFrame || J9;
        var T2 = function z7Z(O7Z, x6g, i6g) {
            function d6g(w6g) {
                F7Z('onStart', {
                    domEvent: w6g
                });
                if (i7Z.stopProp) {
                    w6g.stopPropagation();
                }
                if (i7Z.prevDef || w6g.type == 'mousedown') {
                    w6g.preventDefault();
                }
                if (i7Z.readonly || i7Z.lock && W7Z) {
                    return;
                }
                if (I9(w6g, this) && !b6g) {
                    if (S7Z) {
                        S7Z.removeClass('mbsc-btn-a');
                    }
                    n7Z = false;
                    if (!W7Z) {
                        S7Z = w6(w6g.target).closest('.mbsc-btn-e', this);
                        if (S7Z.length && !S7Z.hasClass('mbsc-btn-d')) {
                            n7Z = true;
                            D6g = setTimeout(function() {
                                S7Z.addClass('mbsc-btn-a');
                            }, 100);
                        }
                    }
                    b6g = true;
                    Y7Z = false;
                    c7Z = false;
                    V7Z.scrolled = W7Z;
                    P6g = X2(w6g, 'X');
                    m6g = X2(w6g, 'Y');
                    Z6g = z6g = P6g;
                    J6g = 0;
                    s7Z = 0;
                    k7Z = 0;
                    l6g = new Date();
                    p7Z = +e1(j7Z, w7Z) || 0;
                    if (W7Z) {
                        r6g(p7Z, r9 ? 0 : 1);
                    }
                    if (w6g.type === 'mousedown') {
                        w6(document).on('mousemove', t6g).on('mouseup', I6g);
                    }
                }
            }

            function t6g(C6g) {
                if (b6g) {
                    if (i7Z.stopProp) {
                        C6g.stopPropagation();
                    }
                    Z6g = X2(C6g, 'X');
                    N6g = X2(C6g, 'Y');
                    J6g = Z6g - P6g;
                    s7Z = N6g - m6g;
                    k7Z = w7Z ? s7Z : J6g;
                    if (n7Z && (Math.abs(s7Z) > i7Z.thresholdY || Math.abs(J6g) > i7Z.thresholdX)) {
                        clearTimeout(D6g);
                        S7Z.removeClass('mbsc-btn-a');
                        n7Z = false;
                    }
                    if (V7Z.scrolled || !c7Z && Math.abs(k7Z) > E6g) {
                        if (!Y7Z) {
                            F7Z('onGestureStart', C7Z);
                        }
                        V7Z.scrolled = Y7Z = true;
                        if (!A7Z) {
                            A7Z = true;
                            g6g = L3(h6g);
                        }
                    }
                    if (w7Z || i7Z.scrollLock) {
                        C6g.preventDefault();
                    } else {
                        if (V7Z.scrolled) {
                            C6g.preventDefault();
                        } else if (Math.abs(s7Z) > 7) {
                            c7Z = true;
                            V7Z.scrolled = true;
                            y7Z.trigger('touchend');
                        }
                    }
                }
            }

            function h6g() {
                if (L7Z) {
                    k7Z = d6(k7Z, -o7Z * L7Z, o7Z * L7Z);
                }
                r6g(d6(p7Z + k7Z, B7Z - M6g, G7Z + M6g));
                A7Z = false;
            }

            function I6g(H6g) {
                if (b6g) {
                    var V6g, k6g = new Date() - l6g;
                    if (i7Z.stopProp) {
                        H6g.stopPropagation();
                    }
                    O3(g6g);
                    A7Z = false;
                    if (!c7Z && V7Z.scrolled) {
                        if (i7Z.momentum && k6g < 300) {
                            V6g = k7Z / k6g;
                            k7Z = Math.max(Math.abs(k7Z), V6g * V6g / i7Z.speedUnit) * (k7Z < 0 ? -1 : 1);
                        }
                        X6g(k7Z);
                    }
                    if (n7Z) {
                        clearTimeout(D6g);
                        S7Z.addClass('mbsc-btn-a');
                        setTimeout(function() {
                            S7Z.removeClass('mbsc-btn-a');
                        }, 100);
                        if (!c7Z && !V7Z.scrolled) {
                            F7Z('onBtnTap', {
                                target: S7Z[0]
                            });
                        }
                    }
                    if (H6g.type == 'mouseup') {
                        w6(document).off('mousemove', t6g).off('mouseup', I6g);
                    }
                    b6g = false;
                }
            }

            function f6g(o6g) {
                o6g = o6g.originalEvent || o6g;
                k7Z = w7Z ? o6g.deltaY || o6g.wheelDelta || o6g.detail : o6g.deltaX;
                F7Z('onStart', {
                    domEvent: o6g
                });
                if (i7Z.stopProp) {
                    o6g.stopPropagation();
                }
                if (k7Z) {
                    o6g.preventDefault();
                    if (o6g.deltaMode && o6g.deltaMode == 1) {
                        k7Z *= 5;
                    }
                    k7Z = d6(-k7Z, -20, 20);
                    p7Z = H7Z;
                    if (i7Z.readonly || p7Z + k7Z < B7Z || p7Z + k7Z > G7Z) {
                        return;
                    }
                    if (!Y7Z) {
                        C7Z = {
                            posX: w7Z ? 0 : H7Z,
                            posY: w7Z ? H7Z : 0,
                            originX: w7Z ? 0 : p7Z,
                            originY: w7Z ? p7Z : 0,
                            direction: k7Z > 0 ? w7Z ? 270 : 360 : w7Z ? 90 : 180
                        };
                        F7Z('onGestureStart', C7Z);
                    }
                    if (!A7Z) {
                        A7Z = true;
                        g6g = L3(h6g);
                    }
                    Y7Z = true;
                    clearTimeout(e6g);
                    e6g = setTimeout(function() {
                        O3(g6g);
                        A7Z = false;
                        Y7Z = false;
                        X6g(k7Z);
                    }, 200);
                }
            }

            function X6g(F6g) {
                var p6g, S6g, K6g;
                if (L7Z) {
                    F6g = d6(F6g, -o7Z * L7Z, o7Z * L7Z);
                }
                K6g = d6(Math.round((p7Z + F6g) / o7Z) * o7Z, B7Z, G7Z);
                R7Z = Math.round(K6g / o7Z);
                if (K7Z) {
                    if (F6g < 0) {
                        for (p6g = K7Z.length - 1; p6g >= 0; p6g--) {
                            if (Math.abs(K6g) + U7Z >= K7Z[p6g].breakpoint) {
                                R7Z = p6g;
                                T6g = 2;
                                K6g = K7Z[p6g].snap2;
                                break;
                            }
                        }
                    } else if (F6g >= 0) {
                        for (p6g = 0; p6g < K7Z.length; p6g++) {
                            if (Math.abs(K6g) <= K7Z[p6g].breakpoint) {
                                R7Z = p6g;
                                T6g = 1;
                                K6g = K7Z[p6g].snap1;
                                break;
                            }
                        }
                    }
                    K6g = d6(K6g, B7Z, G7Z);
                }
                S6g = i7Z.time || (H7Z < B7Z || H7Z > G7Z ? 1000 : Math.max(1000, Math.abs(K6g - H7Z) * i7Z.timeUnit));
                C7Z.destinationX = w7Z ? 0 : K6g;
                C7Z.destinationY = w7Z ? K6g : 0;
                C7Z.duration = S6g;
                C7Z.transitionTiming = u7Z;
                F7Z('onGestureEnd', C7Z);
                r6g(K6g, S6g);
            }

            function r6g(G6g, B6g, W6g, L6g) {
                var j6g = G6g != H7Z,
                    R6g = B6g > 1,
                    y6g = function A6g() {
                        clearInterval(v6g);
                        clearTimeout(Q6g);
                        W7Z = false;
                        H7Z = G6g;
                        C7Z.posX = w7Z ? 0 : G6g;
                        C7Z.posY = w7Z ? G6g : 0;
                        if (j6g) {
                            F7Z('onMove', C7Z);
                        }
                        if (R6g) {
                            F7Z('onAnimationEnd', C7Z);
                        }
                        if (L6g) {
                            L6g();
                        }
                    };
                C7Z = {
                    posX: w7Z ? 0 : H7Z,
                    posY: w7Z ? H7Z : 0,
                    originX: w7Z ? 0 : p7Z,
                    originY: w7Z ? p7Z : 0,
                    direction: G6g - H7Z > 0 ? w7Z ? 270 : 360 : w7Z ? 90 : 180
                };
                H7Z = G6g;
                if (R6g) {
                    C7Z.destinationX = w7Z ? 0 : G6g;
                    C7Z.destinationY = w7Z ? G6g : 0;
                    C7Z.duration = B6g;
                    C7Z.transitionTiming = u7Z;
                    F7Z('onAnimationStart', C7Z);
                }
                q6g[I1 + 'Transition'] = B6g ? Q9 + 'transform ' + Math.round(B6g) + 'ms ' + u7Z : '';
                q6g[I1 + 'Transform'] = 'translate3d(' + (w7Z ? '0,' + G6g + 'px,' : G6g + 'px,' + '0,') + '0)';
                if (!j6g && !W7Z || !B6g || B6g <= 1) {
                    y6g();
                } else if (B6g) {
                    W7Z = !W6g;
                    clearInterval(v6g);
                    v6g = setInterval(function() {
                        var O6g = +e1(j7Z, w7Z) || 0;
                        C7Z.posX = w7Z ? 0 : O6g;
                        C7Z.posY = w7Z ? O6g : 0;
                        F7Z('onMove', C7Z);
                        if (Math.abs(O6g - G6g) < 2) {
                            y6g();
                        }
                    }, 100);
                    clearTimeout(Q6g);
                    Q6g = setTimeout(function() {
                        y6g();
                    }, B6g);
                }
                if (i7Z.sync) {
                    i7Z.sync(G6g, B6g, u7Z);
                }
            }
            var S7Z, D6g, U7Z, J6g, s7Z, k7Z, a6g, u7Z, M6g, Z6g, N6g, C7Z, n7Z, z6g, G7Z, L7Z, B7Z, b6g, W7Z, c7Z, g6g, A7Z, Y7Z, e6g, v6g, o7Z, K7Z, p7Z, l6g, P6g, m6g, q6g, j7Z, Q6g, E6g, F7Z, w7Z, V7Z = this,
                H7Z, R7Z = 0,
                T6g = 1,
                i7Z = x6g,
                y7Z = w6(O7Z);
            B3.Base.call(this, O7Z, x6g, true);
            V7Z.scrolled = false;
            V7Z.scroll = function(Y6g, c6g, n6g, u6g) {
                if (!z2(Y6g)) {
                    Y6g = Math.ceil((w6(Y6g, O7Z).length ? Math.round(j7Z.offset()[a6g] - w6(Y6g, O7Z).offset()[a6g]) : H7Z) / o7Z) * o7Z;
                } else {
                    Y6g = Math.round(Y6g / o7Z) * o7Z;
                }
                Y6g = d6(Y6g, B7Z, G7Z);
                R7Z = Math.round(Y6g / o7Z);
                p7Z = H7Z;
                r6g(Y6g, c6g, n6g, u6g);
            };
            V7Z.refresh = function(U6g) {
                var s6g;
                U7Z = i7Z.contSize === undefined ? w7Z ? y7Z.height() : y7Z.width() : i7Z.contSize;
                B7Z = i7Z.minScroll === undefined ? Math.min(0, w7Z ? U7Z - j7Z.height() : U7Z - j7Z.width()) : i7Z.minScroll;
                G7Z = i7Z.maxScroll === undefined ? 0 : i7Z.maxScroll;
                K7Z = null;
                if (!w7Z && i7Z.rtl) {
                    s6g = G7Z;
                    G7Z = -B7Z;
                    B7Z = -s6g;
                }
                if (T9(i7Z.snap)) {
                    K7Z = [];
                    j7Z.find(i7Z.snap).each(function() {
                        var b2g = w7Z ? this.offsetTop : this.offsetLeft,
                            J2g = w7Z ? this.offsetHeight : this.offsetWidth;
                        K7Z.push({
                            breakpoint: b2g + J2g / 2,
                            snap1: -b2g,
                            snap2: U7Z - b2g - J2g
                        });
                    });
                }
                o7Z = z2(i7Z.snap) ? i7Z.snap : 1;
                L7Z = i7Z.snap ? i7Z.maxSnapScroll : 0;
                u7Z = i7Z.easing;
                M6g = i7Z.elastic ? z2(i7Z.snap) ? o7Z : z2(i7Z.elastic) ? i7Z.elastic : 0 : 0;
                if (H7Z === undefined) {
                    H7Z = i7Z.initialPos;
                    R7Z = Math.round(H7Z / o7Z);
                }
                if (!U6g) {
                    V7Z.scroll(i7Z.snap ? K7Z ? K7Z[R7Z]['snap' + T6g] : R7Z * o7Z : H7Z);
                }
            };
            V7Z._processSettings = function() {
                w7Z = i7Z.axis == 'Y';
                a6g = w7Z ? 'top' : 'left';
                j7Z = i7Z.moveElement || y7Z.children().eq(0);
                q6g = j7Z[0].style;
                E6g = w7Z ? i7Z.thresholdY : i7Z.thresholdX;
            };
            V7Z._init = function() {
                V7Z.refresh();
                y7Z.on('touchstart mousedown', d6g).on('touchmove', t6g).on('touchend touchcancel', I6g);
                if (i7Z.mousewheel) {
                    y7Z.on('wheel mousewheel', f6g);
                }
                if (O7Z.addEventListener) {
                    O7Z.addEventListener('click', function(t2g) {
                        if (V7Z.scrolled) {
                            V7Z.scrolled = false;
                            t2g.stopPropagation();
                            t2g.preventDefault();
                        }
                    }, true);
                }
            };
            V7Z._destroy = function() {
                clearInterval(v6g);
                y7Z.off('touchstart mousedown', d6g).off('touchmove', t6g).off('touchend touchcancel', I6g).off('wheel mousewheel', f6g);
            };
            i7Z = V7Z.settings;
            F7Z = V7Z.trigger;
            if (!i6g) {
                V7Z.init(x6g);
            }
        };
        T2.prototype = {
            _class: 'scrollview',
            _defaults: {
                speedUnit: 0.0022,
                timeUnit: 3,
                initialPos: 0,
                axis: 'Y',
                thresholdX: 10,
                thresholdY: 5,
                easing: 'cubic-bezier(0.190, 1.000, 0.220, 1.000)',
                stopProp: true,
                momentum: true,
                mousewheel: true,
                elastic: true
            }
        };
        B3.ScrollView = T2;
        J.presetShort('scrollview', 'ScrollView', false);
        var Q = J.$;
        var V6 = Q.extend;
        var P1 = J.platform;
        var E6 = J.util;
        var M1 = E6.jsPrefix;
        var j2 = E6.prefix;
        var J2 = E6.getCoord;
        var b9 = E6.testTouch;
        var L2 = window.CSS;
        var U8 = L2 && L2.supports && L2.supports("(transform-style: preserve-3d)");
        var s8 = !U8 || P1.name == 'wp' || P1.name == 'android';
        J.presetShort('scroller', 'Scroller', false);
        var w3 = function r2g(D2g, R2g, J3g) {
            function n2g(r3g) {
                var v3g = +Q(this).attr('data-index');
                r3g.stopPropagation();
                if (r3g.type === 'mousedown') {
                    r3g.preventDefault();
                }
                if (b9(r3g, this) && !y2g(v3g)) {
                    d2g = Q(this).addClass('mbsc-sc-btn-a');
                    W2g = J2(r3g, 'X');
                    O2g = J2(r3g, 'Y');
                    E2g = true;
                    w2g = false;
                    setTimeout(function() {
                        A2g(v3g, d2g.attr('data-dir') == 'inc' ? 1 : -1);
                    }, 100);
                    if (r3g.type === 'mousedown') {
                        Q(document).on('mousemove', K2g).on('mouseup', F2g);
                    }
                }
            }

            function K2g(T3g) {
                if (Math.abs(W2g - J2(T3g, 'X')) > 7 || Math.abs(O2g - J2(T3g, 'Y')) > 7) {
                    p2g(true);
                }
            }

            function F2g(g3g) {
                p2g();
                g3g.preventDefault();
                if (g3g.type === 'mouseup') {
                    Q(document).off('mousemove', K2g).off('mouseup', F2g);
                }
            }

            function u2g(I3g) {
                var Q3g = Q(this).attr('data-index'),
                    q3g, P3g;
                if (I3g.keyCode == 38) {
                    q3g = true;
                    P3g = -1;
                } else if (I3g.keyCode == 40) {
                    q3g = true;
                    P3g = 1;
                } else if (I3g.keyCode == 32) {
                    q3g = true;
                    j2g(Q3g, q2g[Q3g]._$markup.find('.mbsc-sc-itm[data-val="' + I2g[Q3g] + '"]'));
                }
                if (q3g) {
                    I3g.stopPropagation();
                    I3g.preventDefault();
                    if (P3g && !E2g) {
                        E2g = true;
                        w2g = false;
                        A2g(Q3g, P3g);
                    }
                }
            }

            function t3g() {
                p2g();
            }

            function j2g(M3g, D3g) {
                var x3g = q2g[M3g],
                    f3g = D3g.attr('data-index'),
                    Z3g = l2g(x3g, f3g),
                    a3g = v2g._tempSelected[M3g],
                    N3g = E6.isNumeric(x3g.multiple) ? x3g.multiple : Infinity;
                if (x2g('onItemTap', {
                        target: D3g[0],
                        index: M3g,
                        value: Z3g,
                        selected: D3g.hasClass('mbsc-sc-itm-sel')
                    }) !== false) {
                    if (x3g.multiple && !x3g._disabled[Z3g]) {
                        if (a3g[Z3g] !== undefined) {
                            D3g.removeClass(M2g).removeAttr('aria-selected');
                            delete a3g[Z3g];
                        } else {
                            if (N3g == 1) {
                                v2g._tempSelected[M3g] = a3g = {};
                                x3g._$markup.find('.mbsc-sc-itm-sel').removeClass(M2g).removeAttr('aria-selected');
                            }
                            if (E6.objectToArray(a3g).length < N3g) {
                                D3g.addClass(M2g).attr('aria-selected', 'true');
                                a3g[Z3g] = Z3g;
                            }
                        }
                    }
                    G2g(x3g, M3g, f3g, h2g, true, true, x3g.multiple);
                    if (v2g.live && !x3g.multiple && (T2g.setOnTap === true || T2g.setOnTap[M3g])) {
                        setTimeout(function() {
                            v2g.select();
                        }, 200);
                    }
                }
            }

            function B2g(e3g, E3g) {
                return (e3g._array ? e3g._map[E3g] : e3g.getIndex(E3g, v2g)) || 0;
            }

            function c2g(l3g, d3g) {
                var X3g = l3g.data;
                if (d3g >= l3g.min && d3g <= l3g.max) {
                    return l3g._array ? l3g.circular ? Q(X3g).get(d3g % l3g._length) : X3g[d3g] : Q.isFunction(X3g) ? X3g(d3g, v2g) : '';
                }
            }

            function C2g(h3g) {
                return Q.isPlainObject(h3g) ? h3g.value !== undefined ? h3g.value : h3g.display : h3g;
            }

            function b3g(m3g) {
                var z3g = Q.isPlainObject(m3g) ? m3g.display : m3g;
                return z3g === undefined ? '' : z3g;
            }

            function l2g(i3g, w3g) {
                return C2g(c2g(i3g, w3g));
            }

            function A2g(C3g, V3g) {
                if (!w2g) {
                    Y2g(C3g, V3g);
                }
                if (E2g) {
                    clearInterval(V2g);
                    V2g = setInterval(function() {
                        Y2g(C3g, V3g);
                    }, T2g.delay);
                }
            }

            function p2g(k3g) {
                clearInterval(V2g);
                w2g = k3g;
                E2g = false;
                if (d2g) {
                    d2g.removeClass('mbsc-sc-btn-a');
                }
            }

            function Y2g(o3g, p3g) {
                var H3g = q2g[o3g];
                G2g(H3g, o3g, H3g._current + p3g, h2g, p3g == 1 ? 1 : 2);
            }

            function y2g(K3g) {
                return Q.isArray(T2g.readonly) ? T2g.readonly[K3g] : T2g.readonly;
            }

            function S2g(F3g, S3g, B3g) {
                var G3g = F3g._index - F3g._batch;
                F3g.data = F3g.data || [];
                F3g.key = F3g.key !== undefined ? F3g.key : S3g;
                F3g.label = F3g.label !== undefined ? F3g.label : S3g;
                F3g._map = {};
                F3g._array = Q.isArray(F3g.data);
                if (F3g._array) {
                    F3g._length = F3g.data.length;
                    Q.each(F3g.data, function(y3g, j3g) {
                        F3g._map[C2g(j3g)] = y3g;
                    });
                }
                F3g.circular = T2g.circular === undefined ? F3g.circular === undefined ? F3g._array && F3g._length > T2g.rows : F3g.circular : Q.isArray(T2g.circular) ? T2g.circular[S3g] : T2g.circular;
                F3g.min = F3g._array ? F3g.circular ? -Infinity : 0 : F3g.min === undefined ? -Infinity : F3g.min;
                F3g.max = F3g._array ? F3g.circular ? Infinity : F3g._length - 1 : F3g.max === undefined ? Infinity : F3g.max;
                F3g._nr = S3g;
                F3g._index = B2g(F3g, I2g[S3g]);
                F3g._disabled = {};
                F3g._batch = 0;
                F3g._current = F3g._index;
                F3g._first = F3g._index - P2g;
                F3g._last = F3g._index + P2g;
                F3g._offset = F3g._first;
                if (B3g) {
                    F3g._offset -= F3g._margin / g2g + (F3g._index - G3g);
                    F3g._margin += (F3g._index - G3g) * g2g;
                } else {
                    F3g._margin = 0;
                }
                F3g._refresh = function(W3g) {
                    var R3g = -(F3g.min - F3g._offset + (F3g.multiple && !Q2g ? Math.floor(T2g.rows / 2) : 0)) * g2g,
                        L3g = Math.min(R3g, -(F3g.max - F3g._offset - (F3g.multiple && !Q2g ? Math.floor(T2g.rows / 2) : 0)) * g2g);
                    V6(F3g._scroller.settings, {
                        minScroll: L3g,
                        maxScroll: R3g
                    });
                    F3g._scroller.refresh(W3g);
                };
                H2g[F3g.key] = F3g;
                return F3g;
            }

            function a2g(c3g, b1g, I1g, g1g, J1g) {
                var Y3g, T1g, A3g, O3g, t1g, s3g, v1g, U3g, u3g = '',
                    n3g = v2g._tempSelected[b1g],
                    r1g = c3g._disabled || {};
                for (Y3g = I1g; Y3g <= g1g; Y3g++) {
                    A3g = c2g(c3g, Y3g);
                    t1g = b3g(A3g);
                    O3g = C2g(A3g);
                    T1g = A3g && A3g.cssClass !== undefined ? A3g.cssClass : '';
                    s3g = A3g && A3g.label !== undefined ? A3g.label : '';
                    v1g = A3g && A3g.invalid;
                    U3g = O3g !== undefined && O3g == I2g[b1g] && !c3g.multiple;
                    u3g += '<div role="option" aria-selected="' + (n3g[O3g] ? true : false) + '" class="mbsc-sc-itm ' + (J1g ? 'mbsc-sc-itm-3d ' : '') + T1g + ' ' + (U3g ? 'mbsc-sc-itm-sel ' : '') + (n3g[O3g] ? M2g : '') + (O3g === undefined ? ' mbsc-sc-itm-ph' : ' mbsc-btn-e') + (v1g ? ' mbsc-sc-itm-inv-h mbsc-btn-d' : '') + (r1g[O3g] ? ' mbsc-sc-itm-inv mbsc-btn-d' : '') + '" data-index="' + Y3g + '" data-val="' + O3g + '"' + (s3g ? ' aria-label="' + s3g + '"' : '') + (U3g ? ' aria-selected="true"' : '') + ' style="height:' + g2g + 'px;line-height:' + g2g + 'px;' + (J1g ? j2 + 'transform:rotateX(' + (c3g._offset - Y3g) * k2g % 360 + 'deg) translateZ(' + g2g * T2g.rows / 2 + 'px);' : '') + '">' + (N2g > 1 ? '<div class="mbsc-sc-itm-ml" style="line-height:' + Math.round(g2g / N2g) + 'px;font-size:' + Math.round(g2g / N2g * 0.8) + 'px;">' : '') + t1g + (N2g > 1 ? '</div>' : '') + '</div>';
                }
                return u3g;
            }

            function s2g(q1g) {
                var Q1g = T2g.headerText;
                return Q1g ? typeof Q1g === 'function' ? Q1g.call(D2g, q1g) : Q1g.replace(/\{value\}/i, q1g) : '';
            }

            function U2g(P1g, f1g, e1g) {
                var N1g = Math.round(-e1g / g2g) + P1g._offset,
                    x1g = N1g - P1g._current,
                    Z1g = P1g._first,
                    M1g = P1g._last,
                    a1g = Z1g + P2g - Z2g + 1,
                    D1g = M1g - P2g + Z2g;
                if (x1g) {
                    P1g._first += x1g;
                    P1g._last += x1g;
                    P1g._current = N1g;
                    if (x1g > 0) {
                        P1g._$scroller.append(a2g(P1g, f1g, Math.max(M1g + 1, Z1g + x1g), M1g + x1g));
                        Q('.mbsc-sc-itm', P1g._$scroller).slice(0, Math.min(x1g, M1g - Z1g + 1)).remove();
                        if (Q2g) {
                            P1g._$3d.append(a2g(P1g, f1g, Math.max(D1g + 1, a1g + x1g), D1g + x1g, true));
                            Q('.mbsc-sc-itm', P1g._$3d).slice(0, Math.min(x1g, D1g - a1g + 1)).attr('class', 'mbsc-sc-itm-del');
                        }
                    } else if (x1g < 0) {
                        P1g._$scroller.prepend(a2g(P1g, f1g, Z1g + x1g, Math.min(Z1g - 1, M1g + x1g)));
                        Q('.mbsc-sc-itm', P1g._$scroller).slice(Math.max(x1g, Z1g - M1g - 1)).remove();
                        if (Q2g) {
                            P1g._$3d.prepend(a2g(P1g, f1g, a1g + x1g, Math.min(a1g - 1, D1g + x1g), true));
                            Q('.mbsc-sc-itm', P1g._$3d).slice(Math.max(x1g, a1g - D1g - 1)).attr('class', 'mbsc-sc-itm-del');
                        }
                    }
                    P1g._margin += x1g * g2g;
                    P1g._$scroller.css('margin-top', P1g._margin + 'px');
                }
            }

            function L2g(V1g, E1g, C1g, k1g) {
                var m1g, l1g = q2g[V1g],
                    z1g = k1g || l1g._disabled,
                    X1g = B2g(l1g, E1g),
                    w1g = E1g,
                    i1g = E1g,
                    d1g = 0,
                    h1g = 0;
                if (E1g === undefined) {
                    E1g = l2g(l1g, X1g);
                }
                if (z1g[E1g] === true) {
                    m1g = 0;
                    while (X1g - d1g >= l1g.min && z1g[w1g] && m1g < 100) {
                        m1g++;
                        d1g++;
                        w1g = l2g(l1g, X1g - d1g);
                    }
                    m1g = 0;
                    while (X1g + h1g < l1g.max && z1g[i1g] && m1g < 100) {
                        m1g++;
                        h1g++;
                        i1g = l2g(l1g, X1g + h1g);
                    }
                    if ((h1g < d1g && h1g && C1g !== 2 || !d1g || X1g - d1g < 0 || C1g == 1) && !z1g[i1g]) {
                        E1g = i1g;
                    } else {
                        E1g = w1g;
                    }
                }
                return E1g;
            }

            function X2g(j1g, p1g, B1g, K1g, y1g, R1g) {
                var F1g, S1g, G1g, H1g, o1g = v2g._isVisible;
                e2g = true;
                H1g = T2g.validate.call(D2g, {
                    values: I2g.slice(0),
                    index: p1g,
                    direction: B1g
                }, v2g) || {};
                e2g = false;
                if (H1g.valid) {
                    v2g._tempWheelArray = I2g = H1g.valid.slice(0);
                }
                if (!R1g) {
                    Q.each(q2g, function(W1g, L1g) {
                        if (o1g) {
                            L1g._$markup.find('.mbsc-sc-itm-inv').removeClass('mbsc-sc-itm-inv mbsc-btn-d');
                        }
                        L1g._disabled = {};
                        if (H1g.disabled && H1g.disabled[W1g]) {
                            Q.each(H1g.disabled[W1g], function(Y1g, O1g) {
                                L1g._disabled[O1g] = true;
                                if (o1g) {
                                    L1g._$markup.find('.mbsc-sc-itm[data-val="' + O1g + '"]').addClass('mbsc-sc-itm-inv mbsc-btn-d');
                                }
                            });
                        }
                        I2g[W1g] = L1g.multiple ? I2g[W1g] : L2g(W1g, I2g[W1g], B1g);
                        if (o1g) {
                            if (!L1g.multiple || p1g === undefined) {
                                L1g._$markup.find('.mbsc-sc-itm-sel').removeClass(M2g).removeAttr('aria-selected');
                            }
                            if (L1g.multiple) {
                                if (p1g === undefined) {
                                    for (var A1g in v2g._tempSelected[W1g]) {
                                        L1g._$markup.find('.mbsc-sc-itm[data-val="' + A1g + '"]').addClass(M2g).attr('aria-selected', 'true');
                                    }
                                }
                            } else {
                                L1g._$markup.find('.mbsc-sc-itm[data-val="' + I2g[W1g] + '"]').addClass('mbsc-sc-itm-sel').attr('aria-selected', 'true');
                            }
                            S1g = B2g(L1g, I2g[W1g]);
                            F1g = S1g - L1g._index + L1g._batch;
                            if (Math.abs(F1g) > 2 * P2g + 1) {
                                G1g = F1g + (2 * P2g + 1) * (F1g > 0 ? -1 : 1);
                                L1g._offset += G1g;
                                L1g._margin -= G1g * g2g;
                                L1g._refresh();
                            }
                            L1g._index = S1g + L1g._batch;
                            L1g._scroller.scroll(-(S1g - L1g._offset + L1g._batch) * g2g, p1g === W1g || p1g === undefined ? j1g : h2g, y1g);
                        }
                    });
                }
                x2g('onValidated');
                v2g._tempValue = T2g.formatValue(I2g, v2g);
                if (o1g) {
                    v2g._header.html(s2g(v2g._tempValue));
                }
                if (v2g.live) {
                    v2g._hasValue = K1g || v2g._hasValue;
                    z2g(K1g, K1g, 0, true);
                    if (K1g) {
                        x2g('onSet', {
                            valueText: v2g._value
                        });
                    }
                }
                if (K1g) {
                    x2g('onChange', {
                        valueText: v2g._tempValue
                    });
                }
            }

            function G2g(c1g, u1g, s1g, U1g, b8g, J8g, t8g) {
                var n1g = l2g(c1g, s1g);
                if (n1g !== undefined) {
                    I2g[u1g] = n1g;
                    c1g._batch = c1g._array ? Math.floor(s1g / c1g._length) * c1g._length : 0;
                    setTimeout(function() {
                        X2g(U1g, u1g, b8g, true, J8g, t8g);
                    }, 10);
                }
            }

            function z2g(T8g, v8g, g8g, I8g, Q8g) {
                if (!I8g) {
                    X2g(g8g);
                } else {
                    v2g._tempValue = T2g.formatValue(v2g._tempWheelArray, v2g);
                }
                if (!Q8g) {
                    v2g._wheelArray = [];
                    for (var r8g = 0; r8g < I2g.length; r8g++) {
                        v2g._wheelArray[r8g] = q2g[r8g] && q2g[r8g].multiple ? Object.keys(v2g._tempSelected[r8g])[0] : I2g[r8g];
                    }
                    v2g._value = v2g._hasValue ? v2g._tempValue : null;
                    v2g._selected = V6(true, {}, v2g._tempSelected);
                }
                if (T8g) {
                    if (v2g._isInput) {
                        i2g.val(v2g._hasValue ? v2g._tempValue : '');
                    }
                    x2g('onFill', {
                        valueText: v2g._hasValue ? v2g._tempValue : '',
                        change: v8g
                    });
                    if (v8g) {
                        v2g._preventChange = true;
                        i2g.trigger('change');
                    }
                }
            }
            var o2g, d2g, Z2g, P2g = 40,
                h2g = 1000,
                k2g, Q2g, M2g, f2g, V2g, E2g, w2g, W2g, O2g, I2g, g2g, m2g, e2g, T2g, x2g, N2g, q2g, H2g, v2g = this,
                i2g = Q(D2g);
            x6.call(this, D2g, R2g, true);
            v2g.setVal = v2g._setVal = function(q8g, P8g, x8g, Z8g, M8g) {
                v2g._hasValue = q8g !== null && q8g !== undefined;
                v2g._tempWheelArray = I2g = Q.isArray(q8g) ? q8g.slice(0) : T2g.parseValue.call(D2g, q8g, v2g) || [];
                z2g(P8g, x8g === undefined ? P8g : x8g, M8g, false, Z8g);
            };
            v2g.getVal = v2g._getVal = function(D8g) {
                var a8g = v2g._hasValue || D8g ? v2g[D8g ? '_tempValue' : '_value'] : null;
                return E6.isNumeric(a8g) ? +a8g : a8g;
            };
            v2g.setArrayVal = v2g.setVal;
            v2g.getArrayVal = function(f8g) {
                return f8g ? v2g._tempWheelArray : v2g._wheelArray;
            };
            v2g.changeWheel = function(E8g, l8g, d8g) {
                var e8g, N8g;
                Q.each(E8g, function(X8g, h8g) {
                    N8g = H2g[X8g];
                    e8g = N8g._nr;
                    if (N8g) {
                        V6(N8g, h8g);
                        S2g(N8g, e8g, true);
                        if (v2g._isVisible) {
                            if (Q2g) {
                                N8g._$3d.html(a2g(N8g, e8g, N8g._first + P2g - Z2g + 1, N8g._last - P2g + Z2g, true));
                            }
                            N8g._$scroller.html(a2g(N8g, e8g, N8g._first, N8g._last)).css('margin-top', N8g._margin + 'px');
                            N8g._refresh(e2g);
                        }
                    }
                });
                if (v2g._isVisible && !v2g._isLiquid && !e2g) {
                    v2g.position();
                }
                if (!e2g) {
                    X2g(l8g, undefined, undefined, d8g);
                }
            };
            v2g.getValidValue = L2g;
            v2g._generateContent = function() {
                var C8g, i8g = 0,
                    z8g = '',
                    w8g = Q2g ? j2 + 'transform: translateZ(' + (g2g * T2g.rows / 2 + 3) + 'px);' : '',
                    V8g = '<div class="mbsc-sc-whl-l" style="' + w8g + 'height:' + g2g + 'px;margin-top:-' + (g2g / 2 + (T2g.selectedLineBorder || 0)) + 'px;"></div>',
                    m8g = 0;
                Q.each(T2g.wheels, function(H8g, k8g) {
                    z8g += '<div class="mbsc-w-p mbsc-sc-whl-gr-c' + (T2g.showLabel ? ' mbsc-sc-lbl-v' : '') + '">' + V8g + '<div class="mbsc-sc-whl-gr' + (Q2g ? ' mbsc-sc-whl-gr-3d' : '') + (f2g ? ' mbsc-sc-cp' : '') + (T2g.width || T2g.maxWidth ? '"' : '" style="max-width:' + T2g.maxPopupWidth + 'px;"') + '>';
                    Q.each(k8g, function(p8g, o8g) {
                        v2g._tempSelected[m8g] = V6({}, v2g._selected[m8g]);
                        q2g[m8g] = S2g(o8g, m8g);
                        i8g += T2g.maxWidth ? T2g.maxWidth[m8g] || T2g.maxWidth : T2g.width ? T2g.width[m8g] || T2g.width : 0;
                        C8g = o8g.label !== undefined ? o8g.label : p8g;
                        z8g += '<div class="mbsc-sc-whl-w ' + (o8g.cssClass || '') + (o8g.multiple ? ' mbsc-sc-whl-multi' : '') + '" style="' + (T2g.width ? 'width:' + (T2g.width[m8g] || T2g.width) + 'px;' : (T2g.minWidth ? 'min-width:' + (T2g.minWidth[m8g] || T2g.minWidth) + 'px;' : '') + (T2g.maxWidth ? 'max-width:' + (T2g.maxWidth[m8g] || T2g.maxWidth) + 'px;' : '')) + '">' + '<div class="mbsc-sc-whl-o" style="' + w8g + '"></div>' + V8g + '<div tabindex="0" aria-live="off" aria-label="' + C8g + '"' + (o8g.multiple ? ' aria-multiselectable="true"' : '') + ' role="listbox" data-index="' + m8g + '" class="mbsc-sc-whl"' + ' style="' + 'height:' + T2g.rows * g2g * (Q2g ? 1.1 : 1) + 'px;">' + (f2g ? '<div data-index="' + m8g + '" data-dir="inc" class="mbsc-sc-btn mbsc-sc-btn-plus ' + (T2g.btnPlusClass || '') + '" style="height:' + g2g + 'px;line-height:' + g2g + 'px;"></div>' + '<div data-index="' + m8g + '" data-dir="dec" class="mbsc-sc-btn mbsc-sc-btn-minus ' + (T2g.btnMinusClass || '') + '" style="height:' + g2g + 'px;line-height:' + g2g + 'px;"></div>' : '') + '<div class="mbsc-sc-lbl">' + C8g + '</div>' + '<div class="mbsc-sc-whl-c"' + ' style="height:' + m2g + 'px;margin-top:-' + (m2g / 2 + 1) + 'px;' + w8g + '">' + '<div class="mbsc-sc-whl-sc" style="top:' + (m2g - g2g) / 2 + 'px;">';
                        z8g += a2g(o8g, m8g, o8g._first, o8g._last) + '</div></div>';
                        if (Q2g) {
                            z8g += '<div class="mbsc-sc-whl-3d" style="height:' + g2g + 'px;margin-top:-' + g2g / 2 + 'px;">';
                            z8g += a2g(o8g, m8g, o8g._first + P2g - Z2g + 1, o8g._last - P2g + Z2g, true);
                            z8g += '</div>';
                        }
                        z8g += '</div></div>';
                        m8g++;
                    });
                    z8g += '</div></div>';
                });
                if (i8g) {
                    T2g.maxPopupWidth = i8g;
                }
                return z8g;
            };
            v2g._attachEvents = function(K8g) {
                Q('.mbsc-sc-btn', K8g).on('touchstart mousedown', n2g).on('touchmove', K2g).on('touchend touchcancel', F2g);
                Q('.mbsc-sc-whl', K8g).on('keydown', u2g).on('keyup', t3g);
            };
            v2g._detachEvents = function() {
                for (var F8g = 0; F8g < q2g.length; F8g++) {
                    q2g[F8g]._scroller.destroy();
                }
            };
            v2g._markupReady = function(S8g) {
                o2g = S8g;
                Q('.mbsc-sc-whl', o2g).each(function(B8g) {
                    var R8g, y8g = Q(this),
                        G8g = q2g[B8g],
                        j8g = -(G8g.min - G8g._offset + (G8g.multiple && !Q2g ? Math.floor(T2g.rows / 2) : 0)) * g2g,
                        L8g = Math.min(j8g, -(G8g.max - G8g._offset - (G8g.multiple && !Q2g ? Math.floor(T2g.rows / 2) : 0)) * g2g);
                    G8g._$markup = y8g;
                    G8g._$scroller = Q('.mbsc-sc-whl-sc', this);
                    G8g._$3d = Q('.mbsc-sc-whl-3d', this);
                    G8g._scroller = new T2(this, {
                        mousewheel: T2g.mousewheel,
                        moveElement: G8g._$scroller,
                        initialPos: (G8g._first - G8g._index) * g2g,
                        contSize: 0,
                        snap: g2g,
                        minScroll: L8g,
                        maxScroll: j8g,
                        maxSnapScroll: P2g,
                        prevDef: true,
                        stopProp: true,
                        timeUnit: 3,
                        easing: 'cubic-bezier(0.190, 1.000, 0.220, 1.000)',
                        sync: function W8g(O8g, A8g, Y8g) {
                            if (Q2g) {
                                G8g._$3d[0].style[M1 + 'Transition'] = A8g ? j2 + 'transform ' + Math.round(A8g) + 'ms ' + Y8g : '';
                                G8g._$3d[0].style[M1 + 'Transform'] = 'rotateX(' + -O8g / g2g * k2g + 'deg)';
                            }
                        },
                        onStart: function c8g(u8g, n8g) {
                            n8g.settings.readonly = y2g(B8g);
                        },
                        onGestureStart: function s8g() {
                            y8g.addClass('mbsc-sc-whl-a mbsc-sc-whl-anim');
                            x2g('onWheelGestureStart', {
                                index: B8g
                            });
                        },
                        onGestureEnd: function U8g(b9g) {
                            var J9g = b9g.direction == 90 ? 1 : 2,
                                t9g = b9g.duration,
                                r9g = b9g.destinationY;
                            R8g = Math.round(-r9g / g2g) + G8g._offset;
                            G2g(G8g, B8g, R8g, t9g, J9g);
                        },
                        onAnimationStart: function v9g() {
                            y8g.addClass('mbsc-sc-whl-anim');
                        },
                        onAnimationEnd: function T9g() {
                            y8g.removeClass('mbsc-sc-whl-a mbsc-sc-whl-anim');
                            x2g('onWheelAnimationEnd', {
                                index: B8g
                            });
                            G8g._$3d.find('.mbsc-sc-itm-del').remove();
                        },
                        onMove: function g9g(I9g) {
                            U2g(G8g, B8g, I9g.posY);
                        },
                        onBtnTap: function Q9g(q9g) {
                            j2g(B8g, Q(q9g.target));
                        }
                    });
                });
                X2g();
            };
            v2g._fillValue = function() {
                v2g._hasValue = true;
                z2g(true, true, 0, true);
            };
            v2g._clearValue = function() {
                Q('.mbsc-sc-whl-multi .mbsc-sc-itm-sel', o2g).removeClass(M2g).removeAttr('aria-selected');
            };
            v2g._readValue = function() {
                var x9g = i2g.val() || '',
                    P9g = 0;
                if (x9g !== '') {
                    v2g._hasValue = true;
                }
                v2g._tempWheelArray = I2g = v2g._hasValue && v2g._wheelArray ? v2g._wheelArray.slice(0) : T2g.parseValue.call(D2g, x9g, v2g) || [];
                v2g._tempSelected = V6(true, {}, v2g._selected);
                Q.each(T2g.wheels, function(M9g, Z9g) {
                    Q.each(Z9g, function(D9g, a9g) {
                        q2g[P9g] = S2g(a9g, P9g);
                        P9g++;
                    });
                });
                z2g(false, false, 0, true);
                x2g('onRead');
            };
            v2g.__processSettings = function() {
                T2g = v2g.settings;
                x2g = v2g.trigger;
                N2g = T2g.multiline;
                M2g = 'mbsc-sc-itm-sel mbsc-ic mbsc-ic-' + T2g.checkIcon;
                q2g = [];
                H2g = {};
            };
            v2g.__init = function() {
                f2g = T2g.showScrollArrows;
                Q2g = T2g.scroll3d && !s8 && !f2g;
                g2g = T2g.height;
                m2g = Q2g ? Math.round((g2g - (g2g * T2g.rows / 2 + 3) * 0.03) / 2) * 2 : g2g;
                Z2g = Math.round(T2g.rows * 1.8);
                k2g = 360 / (Z2g * 2);
                if (f2g) {
                    T2g.rows = Math.max(3, T2g.rows);
                }
                T2g.cssClass = (T2g.cssClass || '') + ' mbsc-sc';
            };
            v2g._getItemValue = C2g;
            v2g._tempSelected = {};
            v2g._selected = {};
            if (!J3g) {
                v2g.init(R2g);
            }
        };
        w3.prototype = {
            _hasDef: true,
            _hasTheme: true,
            _hasLang: true,
            _hasPreset: true,
            _class: 'scroller',
            _defaults: V6({}, x6.prototype._defaults, {
                minWidth: 80,
                height: 40,
                rows: 3,
                multiline: 1,
                delay: 300,
                readonly: false,
                showLabel: true,
                setOnTap: false,
                wheels: [],
                preset: '',
                speedUnit: 0.0012,
                timeUnit: 0.08,
                checkIcon: 'checkmark',
                validate: function f9g() {},
                formatValue: function N9g(e9g) {
                    return e9g.join(' ');
                },
                parseValue: function E9g(d9g, l9g) {
                    var X9g = [],
                        h9g = [],
                        m9g = 0,
                        z9g, i9g;
                    if (d9g !== null && d9g !== undefined) {
                        X9g = (d9g + '').split(' ');
                    }
                    Q.each(l9g.settings.wheels, function(C9g, w9g) {
                        Q.each(w9g, function(k9g, V9g) {
                            i9g = V9g.data;
                            z9g = l9g._getItemValue(i9g[0]);
                            Q.each(i9g, function(o9g, H9g) {
                                if (X9g[m9g] == l9g._getItemValue(H9g)) {
                                    z9g = l9g._getItemValue(H9g);
                                    return false;
                                }
                            });
                            h9g.push(z9g);
                            m9g++;
                        });
                    });
                    return h9g;
                }
            })
        };
        J.classes.Scroller = w3;
     
	 
	 
	  (function(S3f) {
	 
        var W3f = J,
            D3f = W3f.$,
            R0f = S.adjustedDate,
            z0f = {
                separator: ' ',
                dateFormat: 'mm/dd/yy',
                dateDisplay: 'MMddyy',
                timeFormat: 'h:ii A',
                dayText: 'Day',
                monthText: 'Month',
                yearText: 'Year',
                hourText: 'Hours',
                minuteText: 'Minutes',
                ampmText: '&nbsp;',
                secText: 'Seconds',
                nowText: 'Now',
                todayText: 'Today'
            },
            N0f = function(f0f) {
                function j0f(T21, f21, r11, x21, F21, l21, C21, P21) {
                    var a21, q21, h11, K21, c21, H21, j11, b21, y21, I11, G11, e11, s11, D11, z21, w21, N21, S11, W11, R21, i21 = {},
                        g11 = T0f.getDate(x21, F21, l21),
                        n11 = ['a', 'h', 'i', 's'];
                    if (T21) {
                        for (j11 = 0; j11 < T21.length; j11++) {
                            G11 = T21[j11];
                            if (G11.start) {
                                G11.apply = false;
                                h11 = G11.d;
                                N21 = h11 + '';
                                S11 = N21.split('/');
                                if (h11 && (h11.getTime && x21 == T0f.getYear(h11) && F21 == T0f.getMonth(h11) && l21 == T0f.getDay(h11) || !N21.match(/w/i) && (S11[1] && l21 == S11[1] && F21 == S11[0] - 1 || !S11[1] && l21 == S11[0]) || N21.match(/w/i) && g11.getDay() == +N21.replace('w', ''))) {
                                    G11.apply = true;
                                    i21[g11] = true;
                                }
                            }
                        }
                        for (j11 = 0; j11 < T21.length; j11++) {
                            G11 = T21[j11];
                            a21 = 0;
                            w21 = 0;
                            b21 = w0f[r11];
                            y21 = q0f[r11];
                            D11 = true;
                            z21 = true;
                            q21 = false;
                            if (G11.start && (G11.apply || !G11.d && !i21[g11])) {
                                e11 = G11.start.split(':');
                                s11 = G11.end.split(':');
                                for (I11 = 0; I11 < 3; I11++) {
                                    if (e11[I11] === S3f) {
                                        e11[I11] = 0;
                                    }
                                    if (s11[I11] === S3f) {
                                        s11[I11] = 59;
                                    }
                                    e11[I11] = +e11[I11];
                                    s11[I11] = +s11[I11];
                                }
                                if (r11 == 'tt') {
                                    b21 = H0f(Math.round((new Date(g11).setHours(e11[0], e11[1], e11[2]) - new Date(g11).setHours(0, 0, 0, 0)) / 1000), Q0f, 0, 86400);
                                    y21 = H0f(Math.round((new Date(g11).setHours(s11[0], s11[1], s11[2]) - new Date(g11).setHours(0, 0, 0, 0)) / 1000), Q0f, 0, 86400);
                                } else {
                                    e11.unshift(e11[0] > 11 ? 1 : 0);
                                    s11.unshift(s11[0] > 11 ? 1 : 0);
                                    if (P0f) {
                                        if (e11[1] >= 12) {
                                            e11[1] = e11[1] - 12;
                                        }
                                        if (s11[1] >= 12) {
                                            s11[1] = s11[1] - 12;
                                        }
                                    }
                                    for (I11 = 0; I11 < f21; I11++) {
                                        if (F0f[I11] !== S3f) {
                                            W11 = H0f(e11[I11], c0f[n11[I11]], w0f[n11[I11]], q0f[n11[I11]]);
                                            R21 = H0f(s11[I11], c0f[n11[I11]], w0f[n11[I11]], q0f[n11[I11]]);
                                            K21 = 0;
                                            c21 = 0;
                                            H21 = 0;
                                            if (P0f && I11 == 1) {
                                                K21 = e11[0] ? 12 : 0;
                                                c21 = s11[0] ? 12 : 0;
                                                H21 = F0f[0] ? 12 : 0;
                                            }
                                            if (!D11) {
                                                W11 = 0;
                                            }
                                            if (!z21) {
                                                R21 = q0f[n11[I11]];
                                            }
                                            if ((D11 || z21) && (W11 + K21 < F0f[I11] + H21 && F0f[I11] + H21 < R21 + c21)) {
                                                q21 = true;
                                            }
                                            if (F0f[I11] != W11) {
                                                D11 = false;
                                            }
                                            if (F0f[I11] != R21) {
                                                z21 = false;
                                            }
                                        }
                                    }
                                    if (!P21) {
                                        for (I11 = f21 + 1; I11 < 4; I11++) {
                                            if (e11[I11] > 0) {
                                                a21 = c0f[r11];
                                            }
                                            if (s11[I11] < q0f[n11[I11]]) {
                                                w21 = c0f[r11];
                                            }
                                        }
                                    }
                                    if (!q21) {
                                        W11 = H0f(e11[f21], c0f[r11], w0f[r11], q0f[r11]) + a21;
                                        R21 = H0f(s11[f21], c0f[r11], w0f[r11], q0f[r11]) - w21;
                                        if (D11) {
                                            b21 = W11;
                                        }
                                        if (z21) {
                                            y21 = R21;
                                        }
                                    }
                                }
                                if (D11 || z21 || q21) {
                                    for (I11 = b21; I11 <= y21; I11 += c0f[r11]) {
                                        C21[I11] = !P21;
                                    }
                                }
                            }
                        }
                    }
                }

                function g0f(J11, O11, k11, V11, B11, u11, o11) {
                    var X11, v11, L11, Y11;
                    if (J11) {
                        for (v11 = 0; v11 < J11.length; v11++) {
                            X11 = J11[v11];
                            Y11 = X11 + '';
                            if (!X11.start) {
                                if (X11.getTime) {
                                    if (T0f.getYear(X11) == O11 && T0f.getMonth(X11) == k11) {
                                        u11[T0f.getDay(X11)] = o11;
                                    }
                                } else if (!Y11.match(/w/i)) {
                                    Y11 = Y11.split('/');
                                    if (Y11[1]) {
                                        if (Y11[0] - 1 == k11) {
                                            u11[Y11[1]] = o11;
                                        }
                                    } else {
                                        u11[Y11[0]] = o11;
                                    }
                                } else {
                                    Y11 = +Y11.replace('w', '');
                                    for (L11 = Y11 - V11; L11 < B11; L11 += 7) {
                                        if (L11 >= 0) {
                                            u11[L11 + 1] = o11;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                function s0f(M11, p11) {
                    var Q11, m11, Z11;
                    if (p11) {
                        for (m11 = 0; m11 < p11.length; m11++) {
                            Q11 = p11[m11];
                            Z11 = Q11 + '';
                            if (!Q11.start) {
                                if (Q11.getTime) {
                                    if (M11.getFullYear() == Q11.getFullYear() && M11.getMonth() == Q11.getMonth() && M11.getDate() == Q11.getDate()) {
                                        return true;
                                    }
                                } else if (!Z11.match(/w/i)) {
                                    Z11 = Z11.split('/');
                                    if (Z11[1]) {
                                        if (Z11[0] - 1 == M11.getMonth() && Z11[1] == M11.getDate()) {
                                            return true;
                                        }
                                    } else if (Z11[0] == M11.getDate()) {
                                        return true;
                                    }
                                } else {
                                    Z11 = +Z11.replace('w', '');
                                    if (Z11 == M11.getDay()) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                    return false;
                }

                function x0f(t11, U11) {
                    if (!U11 && t11 < b0f) {
                        return false;
                    }
                    if (!U11 && t11 > a0f) {
                        return false;
                    }
                    if (s0f(t11, L0f)) {
                        return true;
                    }
                    if (s0f(t11, X0f)) {
                        return false;
                    }
                    return true;
                }

                function F51(F11, C11) {
                    var w11, a11, P11 = false,
                        i11 = false,
                        A11 = 0,
                        E11 = 0,
                        d11 = b0f ? C0f(E0f(b0f)) : -Infinity,
                        x11 = a0f ? C0f(E0f(a0f)) : Infinity;
                    if (x0f(F11)) {
                        return F11;
                    }
                    if (F11 < d11) {
                        F11 = d11;
                    }
                    if (F11 > x11) {
                        F11 = x11;
                    }
                    w11 = F11;
                    a11 = F11;
                    if (C11 !== 2) {
                        P11 = x0f(w11);
                        while (!P11 && w11 < x11) {
                            w11 = new Date(w11.getTime() + 1000 * 60 * 60 * 24);
                            P11 = x0f(w11);
                            A11++;
                        }
                    }
                    if (C11 !== 1) {
                        i11 = x0f(a11);
                        while (!i11 && a11 > d11) {
                            a11 = new Date(a11.getTime() - 1000 * 60 * 60 * 24);
                            i11 = x0f(a11);
                            E11++;
                        }
                    }
                    if (C11 === 1 && P11) {
                        return w11;
                    }
                    if (C11 === 2 && i11) {
                        return a11;
                    }
					
                    return E11 <= A11 && i11 ? a11 : w11;
                }

                function w51(q11) {
                    var l11, c11, K11, H11 = {};
                    if (q11.is('input')) {
                        switch (q11.attr('type')) {
                            case 'date':
                                l11 = 'yy-mm-dd';
                                break;
                            case 'datetime':
                                l11 = 'yy-mm-ddTHH:ii:ssZ';
                                break;
                            case 'datetime-local':
                                l11 = 'yy-mm-ddTHH:ii:ss';
                                break;
                            case 'month':
                                l11 = 'yy-mm';
                                H11.dateOrder = 'mmyy';
                                break;
                            case 'time':
                                l11 = 'HH:ii:ss';
                                break;
                        }
                        H11.format = l11;
                        c11 = q11.attr('min');
                        K11 = q11.attr('max');
                        if (c11) {
                            H11.min = S.parseDate(l11, c11);
                        }
                        if (K11) {
                            H11.max = S.parseDate(l11, K11);
                        }
                    }
                    return H11;
                }

                function a51(y11, b11) {
                    return b11 ? Math.floor(new Date(y11) / 86400000) : y11.getMonth() + 12 * (y11.getFullYear() - 1970);
                }

                function E0f(R11, f11) {
                    var z11, W51, N11 = ['y', 'm', 'd', 'a', 'h', 'i', 's', 'u', 'dd', 'tt'],
                        T11 = [];
                    if (R11 === null || R11 === S3f) {
                        return R11;
                    }
                    for (z11 = 0; z11 < N11.length; z11++) {
                        W51 = N11[z11];
                        if (y0f[W51] !== S3f) {
                            T11[y0f[W51]] = l0f[W51](R11);
                        }
                        if (f11) {
                            A0f[W51] = l0f[W51](R11);
                        }
                    }
                    return T11;
                }

                function C0f(n51) {
                    var G51, j51 = new Date(new Date().setHours(0, 0, 0, 0));
                    if (n51 === null) {
                        return n51;
                    }
                    if (y0f.dd !== S3f) {
                        G51 = n51[y0f.dd].split('-');
                        G51 = new Date(G51[0], G51[1] - 1, G51[2]);
                    }
                    if (y0f.tt !== S3f) {
                        G51 = G51 || j51;
                        G51 = new Date(G51.getTime() + n51[y0f.tt] % 86400 * 1000);
                    }
                    var g51 = K0f(n51, 'y', G51, j51),
                        h51 = K0f(n51, 'm', G51, j51),
                        D51 = Math.min(K0f(n51, 'd', G51, j51), T0f.getMaxDayOfMonth(g51, h51)),
                        S51 = K0f(n51, 'h', G51, j51);
                    return T0f.getDate(g51, h51, D51, P0f && K0f(n51, 'a', G51, j51) ? S51 + 12 : S51, K0f(n51, 'i', G51, j51), K0f(n51, 's', G51, j51), K0f(n51, 'u', G51, j51));
                }

                function K0f(e51, O51, s51, r51) {
                    var I51;
                    if (y0f[O51] !== S3f) {
                        I51 = +e51[y0f[O51]];
                        if (!isNaN(I51)) {
                            return I51;
                        }
                    }
                    if (s51) {
                        return l0f[O51](s51);
                    }
                    if (A0f[O51] !== S3f) {
                        return A0f[O51];
                    }
                    return l0f[O51](r51);
                }

                function T51(V51) {
                    return H0f(Math.round((V51.getTime() - new Date(V51).setHours(0, 0, 0, 0)) / 1000), Q0f, 0, 86400);
                }

                function W0f(B51) {
                    return B51.getFullYear() + '-' + z51(B51.getMonth() + 1) + '-' + z51(B51.getDate());
                }

                function f51(k51) {
                    return k51.getHours() > 11 ? 1 : 0;
                }

                function y51(J51) {
                    return J51.getMilliseconds();
                }

                function b51(o51) {
                    return H0f(o51.getSeconds(), Z0f, u0f, B0f);
                }

                function l51(u51) {
                    return H0f(u51.getMinutes(), i0f, U0f, V0f);
                }

                function H51(v51) {
                    var L51 = v51.getHours();
                    L51 = P0f && L51 >= 12 ? L51 - 12 : L51;
                    return H0f(L51, t0f, m0f, I0f);
                }

                function q51(X51) {
                    return T0f.getDay(X51);
                }

                function c51(Y51) {
                    return T0f.getMonth(Y51);
                }

                function K51(p51) {
                    return T0f.getYear(p51);
                }

                function J0f(M51, Q51, m51) {
                    return Math.floor((m51 - Q51) / M51) * M51 + Q51;
                }

                function H0f(t51, A51, U51, Z51) {
                    return Math.min(Z51, Math.floor(t51 / A51) * A51 + U51);
                }

                function R51(C51) {
                    var d51, x51, P51, E51 = [];
                    if (C51) {
                        for (d51 = 0; d51 < C51.length; d51++) {
                            x51 = C51[d51];
                            if (x51.start && x51.start.getTime) {
                                P51 = new Date(x51.start);
                                while (P51 <= x51.end) {
                                    E51.push(R0f(P51.getFullYear(), P51.getMonth(), P51.getDate()));
                                    P51.setDate(P51.getDate() + 1);
                                }
                            } else {
                                E51.push(x51);
                            }
                        }
                        return E51;
                    }
                    return C51;
                }
				
				function ai(a) {
					return {
						value: a,
						display: (/yy/i.test(Y0f) ? a : (a + '').substr(2, 2)) + (T0f.yearSuffix || '')
					};
				}
				 
				function ad(a) {
					return a;
				}
				
				function ak(b) {
					var a = /d/i.test(b);
					
					return {
						label: '',
						cssClass: 'mbsc-dt-whl-date',
						min: (b0f) ? a51(W0f(b0f), a) : -Infinity,
						max: (a0f) ? a51(W0f(a0f), a) : Infinity,
						data: function(e) {
							var g = new Date(new Date().setHours(0, 0, 0, 0)),
								d = a ? new Date(e * 8.64e7) : new Date(1970, e, 1);
							if (a) {
								d = new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate());
							}
							return {
								invalid: a && !x0f(d, true),
								value: W0f(d),
								display: g.getTime() == d.getTime() ? T0f.todayText : S.formatDate(b, d, T0f)
							};
						},
						getIndex: function(b) {
							return a51(b, a);
						}
					};
				}
				
				function ab(d) {
					var a, b, g, e = [];
					if (/s/i.test(d)) {
						b = z;
					} else if (/i/i.test(d)) {
						b = i0f * 60;
					} else if (/h/i.test(d)) {
						b = t0f * 3600;
					}
					Q0f = c0f.tt = b;
					for (a = 0; a < 86400; a += b) {
						g = new Date(new Date().setHours(0, 0, 0, 0) + a * 1000);
						e.push({
							value: a,
							display: S.formatDate(d, g, T0f)
						});
					}
					return {
						label: '',
						cssClass: 'mbsc-dt-whl-time',
						data: e
					};
				}

				 function a6() {
						var p, s, c, l, b, g, e, n, d = 0,
							o = [],
							m = [],
							i = [];
						if (M0f.match(/date/i)) {
							p = SS0f.split(/\|/.test(SS0f) ? '|' : '');
							for (l = 0; l < p.length; l++) {
								c = p[l];
								g = 0;
								if (c.length) {
									if (/y/i.test(c)) {
										g++;
									}
									if (/m/i.test(c)) {
										g++;
									}
									if (/d/i.test(c)) {
										g++;
									}
									

									if (g > 1 && y0f.dd === S3f) {
										y0f.dd = d;
										d++;		
										m.push(ak(c));
										i = m;
										a2 = true;
									} else if (/y/i.test(c) && y0f.y === S3f) {
										y0f.y = d;
										d++;
										
										m.push({
											cssClass: 'mbsc-dt-whl-y',
											label: T0f.yearText,
											min: (b0f) ? T0f.getYear(b0f) : -Infinity,
											max: (a0f) ? T0f.getYear(a0f) : Infinity,
											data: ai,
											getIndex: ad
										});
										
									} else if (/m/i.test(c) && y0f.m === S3f) {
										y0f.m = d;
										e = [];
										d++;
										for (b = 0; b < 12; b++) {
											n = Y0f.replace(/[dy]/gi, '').replace(/mm/, z51(b + 1) + (T0f.monthSuffix || '')).replace(/m/, b + 1 + (T0f.monthSuffix || ''));
											e.push({
												value: b,
												display: /MM/.test(n) ? n.replace(/MM/, '<span class="mbsc-dt-month">' + T0f.monthNames[b] + '</span>') : n.replace(/M/, '<span class="mbsc-dt-month">' + T0f.monthNamesShort[b] + '</span>')
											});
										}
										m.push({
											cssClass: 'mbsc-dt-whl-m',
											label: T0f.monthText,
											data: e
										});
									} else if (/d/i.test(c) && y0f.d === S3f) {
										y0f.d = d;
										e = [];
										d++;
										for (b = 1; b < 32; b++) {
											e.push({
												value: b,
												display: (/dd/i.test(Y0f) ? z51(b) : b) + (T0f.daySuffix || '')
											});
										}
										m.push({
											cssClass: 'mbsc-dt-whl-d',
											label: T0f.dayText,
											data: e
										});
									}
								}
							}
							o.push(m);
						}
						if (M0f.match(/time/i)) {
							s = h0f.split(/\|/.test(h0f) ? '|' : '');
							for (l = 0; l < s.length; l++) {
								c = s[l];
								g = 0;
								if (c.length) {
									if (/h/i.test(c)) {
										g++;
									}
									if (/i/i.test(c)) {
										g++;
									}
									if (/s/i.test(c)) {
										g++;
									}
									if (/a/i.test(c)) {
										g++;
									}
								}
								if (g > 1 && y0f.tt === S3f) {
									y0f.tt = d;
									d++;
									i.push(ab(c));
								} else if (/h/i.test(c) && y0f.h === S3f) {
									e = [];
									y0f.h = d;
									d++;
									for (b = m0f; b < (P0f ? 12 : 24); b += t0f) {
										e.push({
											value: b,
											display: P0f && b === 0 ? 12 : /hh/i.test(G0f) ? z51(b) : b
										});
									}
									i.push({
										cssClass: 'mbsc-dt-whl-h',
										label: T0f.hourText,
										data: e
									});
								} else if (/i/i.test(c) && y0f.i === S3f) {
									e = [];
									y0f.i = d;
									d++;
									for (b = U0f; b < 60; b += i0f) {
										e.push({
											value: b,
											display: /ii/i.test(G0f) ? z51(b) : b
										});
									}
									i.push({
										cssClass: 'mbsc-dt-whl-i',
										label: T0f.minuteText,
										data: e
									});
								} else if (/s/i.test(c) && y0f.s === S3f) {
									e = [];
									y0f.s = d;
									d++;
									for (b = O; b < 60; b += z) {
										e.push({
											value: b,
											display: /ss/i.test(G0f) ? z51(b) : b
										});
									}
									i.push({
										cssClass: 'mbsc-dt-whl-s',
										label: T0f.secText,
										data: e
									});
								} else if (/a/i.test(c) && y0f.a === S3f) {
									y0f.a = d;
									d++;
									i.push({
										cssClass: 'mbsc-dt-whl-a',
										label: T0f.ampmText,
										data: /A/.test(c) ? [{
											value: 0,
											display: T0f.amText.toUpperCase()
										}, {
											value: 1,
											display: T0f.pmText.toUpperCase()
										}] : [{
											value: 0,
											display: T0f.amText
										}, {
											value: 1,
											display: T0f.pmText
										}]
									});
								}
							}
							if (i != m) {
								o.push(i);
							}
						}
						return o;
					}
				

                function z51(i51) {
                    return i51 < 10 ? '0' + i51 : i51;
                }

                var Q0f, r0f, D0f, y0f = {},
                    A0f = {},
                    F0f = [],
                    k0f = w51(D3f(this)),
                    e0f = D3f.extend({}, f0f.settings),
                    T0f = D3f.extend(f0f.settings, W3f.util.datetime.defaults, z0f, k0f, e0f),
                    X0f = R51(T0f.invalid),
                    L0f = R51(T0f.valid),
                    M0f = T0f.preset,
                    p0f = M0f == 'datetime' ? T0f.dateFormat + T0f.separator + T0f.timeFormat : M0f == 'time' ? T0f.timeFormat : T0f.dateFormat,
                    O0f = k0f.format || p0f,
					SS0f = T0f.dateWheels || T0f.dateFormat,
                    h0f = T0f.timeWheels || T0f.timeFormat,
                    Y0f = T0f.dateWheels || T0f.dateDisplay,
                    G0f = h0f,
                    n0f = T0f.baseTheme || T0f.theme,
                    b0f = T0f.min,
                    a0f = T0f.max,
                    o0f = /time/i.test(M0f),
                    P0f = /h/.test(G0f),
                    S0f = /D/.test(Y0f),
                    d0f = T0f.steps || {},
                    t0f = d0f.hour || T0f.stepHour || 1,
                    i0f = d0f.minute || T0f.stepMinute || 1,
                    Z0f = d0f.second || T0f.stepSecond || 1,
                    v0f = d0f.zeroBased,
                    m0f = v0f || !b0f ? 0 : b0f.getHours() % t0f,
                    U0f = v0f || !b0f ? 0 : b0f.getMinutes() % i0f,
                    u0f = v0f || !b0f ? 0 : b0f.getSeconds() % Z0f,
                    I0f = J0f(t0f, m0f, P0f ? 11 : 23),
                    V0f = J0f(i0f, U0f, 59),
                    B0f = J0f(i0f, U0f, 59),
                    w0f = {
                        y: b0f ? b0f.getFullYear() : -Infinity,
                        m: 0,
                        d: 1,
                        h: m0f,
                        i: U0f,
                        s: u0f,
                        a: 0,
                        tt: 0
                    },
                    q0f = {
                        y: a0f ? a0f.getFullYear() : Infinity,
                        m: 11,
                        d: 31,
                        h: I0f,
                        i: V0f,
                        s: B0f,
                        a: 1,
                        tt: 86400
                    },
                    c0f = {
                        y: 1,
                        m: 1,
                        d: 1,
                        h: t0f,
                        i: i0f,
                        s: Z0f,
                        a: 1,
                        tt: 1
                    },
                    N51 = {
                        'android-holo': 40,
                        bootstrap: 46,
                        ios: 50,
                        jqm: 46,
                        material: 46,
                        mobiscroll: 46,
                        wp: 50
                    },
                    l0f = {
                        y: K51,
                        m: c51,
                        d: q51,
                        h: H51,
                        i: l51,
                        s: b51,
                        u: y51,
                        a: f51,
                        dd: W0f,
                        tt: T51
                    };
                f0f.getDate = f0f.getVal = function(d21) {
                    return f0f._hasValue || d21 ? C0f(f0f.getArrayVal(d21)) : null;
                };
                f0f.setDate = function(E21, A21, t21, U21, Z21) {
                    f0f.setArrayVal(E0f(E21), A21, Z21, U21, t21);
                };

				D0f = a6();
                f0f.format = p0f;
                f0f.order = y0f;
				
                f0f.handlers.now = function() {
                    f0f.setDate(new Date(), f0f.live, 1000, true, true);
                };
                f0f.buttons.now = {
                    text: T0f.nowText,
                    icon: T0f.nowIcon,
                    handler: 'now'
                };
                return {
                    minWidth: r0f && o0f ? N51[n0f] : S3f,
                    compClass: 'mbsc-dt',
                    wheels: D0f,
                    headerText: T0f.headerText ? function() {
                        return S.formatDate(p0f, C0f(f0f.getArrayVal(true)), T0f);
                    } : false,
                    formatValue: function(M21) {
                        return S.formatDate(O0f, C0f(M21), T0f);
                    },
                    parseValue: function(Q21) {
                        if (!Q21) {
                            A0f = {};
                        }
                        return E0f(Q21 ? S.parseDate(O0f, Q21, T0f) : T0f.defaultValue && T0f.defaultValue.getTime ? T0f.defaultValue : new Date(), !!Q21 && !!Q21.getTime);
                    },
                    validate: function(s21) {
                        var m21, v21, J21, r21, G21 = s21.values,
                            V21 = s21.index,
                            e21 = s21.direction,
                            L21 = f0f.settings.wheels[0][y0f.d],
                            X21 = F51(C0f(G21), e21),
                            O21 = E0f(X21),
                            u21 = [],
                            I21 = {},
                            Y21 = l0f.y(X21),
                            p21 = l0f.m(X21),
                            o21 = T0f.getMaxDayOfMonth(Y21, p21),
                            k21 = true,
                            B21 = true;
                        D3f.each(['dd', 'y', 'm', 'd', 'tt', 'a', 'h', 'i', 's'], function(W21, n21) {
                            if (y0f[n21] !== S3f) {
                                var g21 = w0f[n21],
                                    h21 = q0f[n21],
                                    j21 = l0f[n21](X21);
                                u21[y0f[n21]] = [];
                                if (k21 && b0f) {
                                    g21 = l0f[n21](b0f);
                                }
                                if (B21 && a0f) {
                                    h21 = l0f[n21](a0f);
                                }
                                if (n21 != 'y' && n21 != 'dd') {
                                    for (v21 = w0f[n21]; v21 <= q0f[n21]; v21 += c0f[n21]) {
                                        if (v21 < g21 || v21 > h21) {
                                            u21[y0f[n21]].push(v21);
                                        }
                                    }
                                }
                                if (j21 < g21) {
                                    j21 = g21;
                                }
                                if (j21 > h21) {
                                    j21 = h21;
                                }
                                if (k21) {
                                    k21 = j21 == g21;
                                }
                                if (B21) {
                                    B21 = j21 == h21;
                                }
                                if (n21 == 'd') {
                                    var D21 = T0f.getDate(Y21, p21, 1).getDay(),
                                        S21 = {};
                                    g0f(X0f, Y21, p21, D21, o21, S21, 1);
                                    g0f(L0f, Y21, p21, D21, o21, S21, 0);
                                    D3f.each(S21, function(R61, z61) {
                                        if (z61) {
                                            u21[y0f[n21]].push(R61);
                                        }
                                    });
                                }
                            }
                        });
                        if (o0f) {
                            D3f.each(['a', 'h', 'i', 's', 'tt'], function(f61, N61) {
                                var b61 = l0f[N61](X21),
                                    y61 = l0f.d(X21),
                                    T61 = {};
                                if (y0f[N61] !== S3f) {
                                    j0f(X0f, f61, N61, Y21, p21, y61, T61, 0);
                                    j0f(L0f, f61, N61, Y21, p21, y61, T61, 1);
                                    D3f.each(T61, function(l61, H61) {
                                        if (H61) {
                                            u21[y0f[N61]].push(l61);
                                        }
                                    });
                                    F0f[f61] = f0f.getValidValue(y0f[N61], b61, e21, T61);
                                }
                            });
                        }
                        if (L21 && (L21._length !== o21 || S0f && (V21 === S3f || V21 === y0f.y || V21 === y0f.m))) {
                            I21[y0f.d] = L21;
                            L21.data = [];
                            for (m21 = 1; m21 <= o21; m21++) {
                                r21 = T0f.getDate(Y21, p21, m21).getDay();
                                J21 = Y0f.replace(/[my]/gi, '').replace(/dd/, (m21 < 10 ? '0' + m21 : m21) + (T0f.daySuffix || '')).replace(/d/, m21 + (T0f.daySuffix || ''));
                                
                                L21.data.push({
                                    value: m21,
                                    display: J21.match(/DD/) ? J21.replace(/DD/, '<span class="mbsc-dt-day">' + T0f.dayNames[r21] + '</span>') : J21.replace(/D/, '<span class="mbsc-dt-day">' + T0f.dayNamesShort[r21] + '</span>')
                                });
                            }
                            
                            f0f._tempWheelArray[y0f.d] = O21[y0f.d];
                            f0f.changeWheel(I21);
                        }

                        log("change wheel! 5219");
                        // var list_month = f0f.settings.wheels[0][y0f.m];
                        // var monts = {};
                        // console.log(list_month);
                        // var maxMonthOfYear = 11;
                        // var month = 0;
                        // // if (list_month.data._length == 12) {maxMonthOfYear = 11};
                        // list_month.data = [];
                        // if (list_month && list_month.data._length !== maxMonthOfYear) {
                        //     monts[y0f.m] = list_month;
                        //     for (month = 0; month < maxMonthOfYear; month++) {
                        //         var display_data = '<span class="mbsc-dt-month">'+ (month + 1) +'</span>'
                        //         list_month.data.push({
                        //             value: month,
                        //             display: display_data
                        //         });                                
                        //     }
                        //     console.log(T0f.monthNames);
                        //     console.log(monts);
                        //     f0f._tempWheelArray[y0f.m] = O21[y0f.m];
                        //     f0f.changeWheel(monts);
                        // }

                        return {
                            disabled: u21,
                            valid: O21
                        };
                    }
                };
            };
        D3f.each(['date', 'time', 'datetime'], function(c61, q61) {
            W3f.presets.scroller[q61] = N0f;
        });
}());




	 


        var T = J.$;
        var G3 = J.presets.scroller;
        var U2 = J.classes;
        var F6 = J.util;
        var N6 = F6.datetime.adjustedDate;
        var O8 = F6.jsPrefix;
        var u3 = F6.testTouch;
        var C2 = F6.getCoord;
        var H2 = F6.animEnd;
        var q1 = new Date();
        var R8 = {
            min: new Date(q1.getFullYear() - 100, 0, 1),
            max: new Date(q1.getFullYear() + 1, 11, 31, 23, 59, 59),
            controls: ['calendar'],
            firstDay: 0,
            weekDays: 'short',
            maxMonthWidth: 170,
            months: 1,
            preMonths: 1,
            highlight: true,
            outerMonthChange: true,
            quickNav: true,
            yearChange: true,
            todayClass: 'mbsc-cal-today',
            btnCalPrevClass: 'mbsc-ic mbsc-ic-arrow-left6',
            btnCalNextClass: 'mbsc-ic mbsc-ic-arrow-right6',
            dateText: 'Date',
            timeText: 'Time',
            calendarText: 'Calendar',
            todayText: 'Today',
            prevMonthText: 'Previous Month',
            nextMonthText: 'Next Month',
            prevYearText: 'Previous Year',
            nextYearText: 'Next Year'
        };
        G3.calbase = function(b6B) {
            function M3B(a3B) {
                var D3B;
                h6B = T(this);
                l2B = false;
                if (a3B.type != 'keydown') {
                    r3B = C2(a3B, 'X');
                    v3B = C2(a3B, 'Y');
                    D3B = u3(a3B, this);
                } else {
                    D3B = a3B.keyCode === 32;
                }
                if (!f6B && D3B && !h6B.hasClass('mbsc-fr-btn-d')) {
                    f6B = true;
                    setTimeout(n2B, 100);
                    if (a3B.type == 'mousedown') {
                        T(document).on('mousemove', R2B).on('mouseup', j2B);
                    }
                }
            }

            function R2B(f3B) {
                if (Math.abs(r3B - C2(f3B, 'X')) > 7 || Math.abs(v3B - C2(f3B, 'Y')) > 7) {
                    f6B = false;
                    h6B.removeClass('mbsc-fr-btn-a');
                }
            }

            function j2B(N3B) {
                if (N3B.type == 'touchend') {
                    N3B.preventDefault();
                }
                if (h6B && !l2B) {
                    n2B();
                }
                f6B = false;
                if (N3B.type == 'mouseup') {
                    T(document).off('mousemove', R2B).off('mouseup', j2B);
                }
            }

            function n2B() {
                l2B = true;
                if (h6B.hasClass('mbsc-cal-prev-m')) {
                    k2B();
                } else if (h6B.hasClass('mbsc-cal-next-m')) {
                    o2B();
                } else if (h6B.hasClass('mbsc-cal-prev-y')) {
                    Y2B(h6B);
                } else if (h6B.hasClass('mbsc-cal-next-y')) {
                    A2B(h6B);
                }
            }

            function Z3B(e3B) {
                if (e3B < N6(s6B.getFullYear(), s6B.getMonth(), s6B.getDate())) {
                    return false;
                }
                if (e3B > Q3B) {
                    return false;
                }
                return U2B[e3B] === undefined || s2B[e3B] !== undefined;
            }

            function B2B(w3B, h3B, z3B) {
                var m3B, d3B, E3B, X3B, l3B = {},
                    i3B = v6B + Z2B;
                if (w3B) {
                    T.each(w3B, function(o3B, C3B) {
                        m3B = C3B.d || C3B.start || C3B;
                        d3B = m3B + '';
                        if (C3B.start && C3B.end) {
                            X3B = new Date(C3B.start);
                            while (X3B <= C3B.end) {
                                E3B = N6(X3B.getFullYear(), X3B.getMonth(), X3B.getDate());
                                l3B[E3B] = l3B[E3B] || [];
                                l3B[E3B].push(C3B);
                                X3B.setDate(X3B.getDate() + 1);
                            }
                        } else if (m3B.getTime) {
                            E3B = N6(m3B.getFullYear(), m3B.getMonth(), m3B.getDate());
                            l3B[E3B] = l3B[E3B] || [];
                            l3B[E3B].push(C3B);
                        } else if (!d3B.match(/w/i)) {
                            d3B = d3B.split('/');
                            if (d3B[1]) {
                                if (z3B + i3B >= 11) {
                                    E3B = s7g.getDate(h3B + 1, d3B[0] - 1, d3B[1]);
                                    l3B[E3B] = l3B[E3B] || [];
                                    l3B[E3B].push(C3B);
                                }
                                if (z3B - i3B <= 1) {
                                    E3B = s7g.getDate(h3B - 1, d3B[0] - 1, d3B[1]);
                                    l3B[E3B] = l3B[E3B] || [];
                                    l3B[E3B].push(C3B);
                                }
                                E3B = s7g.getDate(h3B, d3B[0] - 1, d3B[1]);
                                l3B[E3B] = l3B[E3B] || [];
                                l3B[E3B].push(C3B);
                            } else {
                                for (d6B = 0; d6B < e6B; d6B++) {
                                    E3B = s7g.getDate(h3B, z3B - v6B - g6B + d6B, d3B[0]);
                                    if (s7g.getDay(E3B) == d3B[0]) {
                                        l3B[E3B] = l3B[E3B] || [];
                                        l3B[E3B].push(C3B);
                                    }
                                }
                            }
                        } else {
                            var H3B = +d3B.replace('w', ''),
                                V3B = 0,
                                k3B = s7g.getDate(h3B, z3B - v6B - g6B, 1).getDay();
                            if (s7g.firstDay - k3B + 1 > 1) {
                                V3B = 7;
                            }
                            for (d6B = 0; d6B < e6B * 5; d6B++) {
                                E3B = s7g.getDate(h3B, z3B - v6B - g6B, d6B * 7 - V3B - k3B + 1 + H3B);
                                l3B[E3B] = l3B[E3B] || [];
                                l3B[E3B].push(C3B);
                            }
                        }
                    });
                }
                return l3B;
            }

            function b3B(p3B, K3B) {
                U2B = B2B(s7g.invalid, p3B, K3B);
                s2B = B2B(s7g.valid, p3B, K3B);
                b6B.onGenMonth(p3B, K3B);
            }

            function g3B(S3B, G3B, R3B, B3B, L3B, y3B, j3B) {
                var F3B = '<div class="mbsc-cal-h mbsc-cal-sc-c mbsc-cal-' + S3B + '-c ' + (s7g.calendarClass || '') + '"><div class="mbsc-cal-sc"><div class="mbsc-cal-sc-p"><div class="mbsc-cal-sc-tbl"><div class="mbsc-cal-sc-row">';
                for (U7g = 1; U7g <= G3B; U7g++) {
                    if (U7g <= 12 || U7g > R3B) {
                        F3B += '<div class="mbsc-cal-sc-m-cell mbsc-cal-sc-cell mbsc-cal-sc-empty"><div class="mbsc-cal-sc-cell-i">&nbsp;</div></div>';
                    } else {
                        F3B += '<div tabindex="0" role="button"' + (y3B ? ' aria-label="' + y3B[U7g - 13] + '"' : '') + ' class="mbsc-fr-btn-e mbsc-fr-btn-nhl mbsc-cal-sc-m-cell mbsc-cal-sc-cell mbsc-cal-' + S3B + '-s" data-val=' + (B3B + U7g - 13) + '><div class="mbsc-cal-sc-cell-i mbsc-cal-sc-tbl"><div class="mbsc-cal-sc-cell">' + (j3B ? j3B[U7g - 13] : B3B + U7g - 13 + L3B) + '</div></div></div>';
                    }
                    if (U7g < G3B) {
                        if (U7g % 12 === 0) {
                            F3B += '</div></div></div><div class="mbsc-cal-sc-p" style="' + (Z6B ? 'top' : i6B ? 'right' : 'left') + ':' + Math.round(U7g / 12) * 100 + '%"><div class="mbsc-cal-sc-tbl"><div class="mbsc-cal-sc-row">';
                        } else if (U7g % 3 === 0) {
                            F3B += '</div><div class="mbsc-cal-sc-row">';
                        }
                    }
                }
                F3B += '</div></div></div></div></div>';
                return F3B;
            }

            function r2B(f1B, N1B) {
                var W3B, g1B, s3B, J1B, t1B, a1B, n3B, I1B, O3B, P1B, U3B, v1B, b1B, D1B, Q1B, Y3B, c3B = 1,
                    x1B = 0,
                    Z1B = s7g.getDate(f1B, N1B, 1),
                    M1B = s7g.getYear(Z1B),
                    r1B = s7g.getMonth(Z1B),
                    A3B = s7g.defaultValue === null && !b6B._hasValue ? null : b6B.getDate(true),
                    T1B = s7g.getDate(M1B, r1B, 1).getDay(),
                    u3B = '<div class="mbsc-cal-table">',
                    q1B = '<div class="mbsc-cal-week-nr-c">';
                if (s7g.firstDay - T1B + 1 > 1) {
                    x1B = 7;
                }
                for (Y3B = 0; Y3B < 42; Y3B++) {
                    Q1B = Y3B + s7g.firstDay - x1B;
                    W3B = s7g.getDate(M1B, r1B, Q1B - T1B + 1);
                    s3B = W3B.getFullYear();
                    J1B = W3B.getMonth();
                    t1B = W3B.getDate();
                    a1B = s7g.getMonth(W3B);
                    n3B = s7g.getDay(W3B);
                    D1B = s7g.getMaxDayOfMonth(s3B, J1B);
                    I1B = s3B + '-' + J1B + '-' + t1B;
                    O3B = T.extend({
                        valid: Z3B(W3B),
                        selected: A3B && A3B.getFullYear() === s3B && A3B.getMonth() === J1B && A3B.getDate() === t1B
                    }, b6B.getDayProps(W3B, A3B));
                    P1B = O3B.valid;
                    U3B = O3B.selected;
                    g1B = O3B.cssClass;
                    v1B = new Date(W3B).setHours(12, 0, 0, 0) === new Date().setHours(12, 0, 0, 0);
                    b1B = a1B !== r1B;
                    z2B[I1B] = O3B;
                    if (Y3B % 7 === 0) {
                        u3B += (Y3B ? '</div>' : '') + '<div class="mbsc-cal-row' + (s7g.highlight && A3B && A3B - W3B >= 0 && A3B - W3B < 1000 * 60 * 60 * 24 * 7 ? ' mbsc-cal-week-hl' : '') + '">';
                    }
                    if (W6B && W3B.getDay() == 1) {
                        if (W6B == 'month' && b1B && c3B > 1) {
                            c3B = t1B == 1 ? 1 : 2;
                        } else if (W6B == 'year') {
                            c3B = s7g.getWeekNumber(W3B);
                        }
                        q1B += '<div class="mbsc-cal-week-nr"><div class="mbsc-cal-week-nr-i">' + c3B + '</div></div>';
                        c3B++;
                    }
                    u3B += '<div role="button" tabindex="-1"' + ' aria-label="' + (v1B ? s7g.todayText + ', ' : '') + s7g.dayNames[W3B.getDay()] + ', ' + s7g.monthNames[a1B] + ' ' + n3B + ' ' + (O3B.ariaLabel ? ', ' + O3B.ariaLabel : '') + '"' + (b1B && !D2B ? ' aria-hidden="true"' : '') + (U3B ? ' aria-selected="true"' : '') + (P1B ? '' : ' aria-disabled="true"') + ' data-day="' + Q1B % 7 + '"' + ' data-full="' + I1B + '"' + 'class="mbsc-cal-day ' + (s7g.dayClass || '') + (U3B ? ' mbsc-cal-day-sel' : '') + (v1B ? ' ' + s7g.todayClass : '') + (g1B ? ' ' + g1B : '') + (n3B == 1 ? ' mbsc-cal-day-first' : '') + (n3B == D1B ? ' mbsc-cal-day-last' : '') + (b1B ? ' mbsc-cal-day-diff' : '') + (P1B ? ' mbsc-cal-day-v mbsc-fr-btn-e mbsc-fr-btn-nhl' : ' mbsc-cal-day-inv') + '"><div class="mbsc-cal-day-i ' + (U3B ? k6B : '') + ' ' + (s7g.innerDayClass || '') + '">' + '<div class="mbsc-cal-day-fg">' + n3B + '</div>' + (O3B.markup || '') + '<div class="mbsc-cal-day-frame"></div></div></div>';
                }
                u3B += '</div></div>' + q1B + '</div>';
                return u3B;
            }

            function G2B(E1B, l1B, m1B) {
                var d1B = s7g.getDate(E1B, l1B, 1),
                    e1B = s7g.getYear(d1B),
                    h1B = s7g.getMonth(d1B),
                    X1B = e1B + I2B;
                if (C6B) {
                    if (H6B) {
                        H6B.removeClass('mbsc-cal-sc-sel').removeAttr('aria-selected').find('.mbsc-cal-sc-cell-i').removeClass(k6B);
                    }
                    if (Q2B) {
                        Q2B.removeClass('mbsc-cal-sc-sel').removeAttr('aria-selected').find('.mbsc-cal-sc-cell-i').removeClass(k6B);
                    }
                    H6B = T('.mbsc-cal-year-s[data-val="' + e1B + '"]', J6B).addClass('mbsc-cal-sc-sel').attr('aria-selected', 'true');
                    Q2B = T('.mbsc-cal-month-s[data-val="' + h1B + '"]', J6B).addClass('mbsc-cal-sc-sel').attr('aria-selected', 'true');
                    H6B.find('.mbsc-cal-sc-cell-i').addClass(k6B);
                    Q2B.find('.mbsc-cal-sc-cell-i').addClass(k6B);
                    if (N6B) {
                        N6B.scroll(H6B, m1B);
                    }
                    T('.mbsc-cal-month-s', J6B).removeClass('mbsc-fr-btn-d');
                    if (e1B === O6B) {
                        for (U7g = 0; U7g < J3B; U7g++) {
                            T('.mbsc-cal-month-s[data-val="' + U7g + '"]', J6B).addClass('mbsc-fr-btn-d');
                        }
                    }
                    if (e1B === E2B) {
                        for (U7g = c2B + 1; U7g <= 12; U7g++) {
                            T('.mbsc-cal-month-s[data-val="' + U7g + '"]', J6B).addClass('mbsc-fr-btn-d');
                        }
                    }
                }
                if (Y6B.length == 1) {
                    Y6B.attr('aria-label', e1B).html(X1B);
                }
                for (U7g = 0; U7g < t6B; ++U7g) {
                    d1B = s7g.getDate(E1B, l1B - g6B + U7g, 1);
                    e1B = s7g.getYear(d1B);
                    h1B = s7g.getMonth(d1B);
                    X1B = e1B + I2B;
                    T(h2B[U7g]).attr('aria-label', s7g.monthNames[h1B] + (F6B ? '' : ' ' + e1B)).html((!F6B && x2B < q2B ? X1B + ' ' : '') + v2B[h1B] + (!F6B && x2B > q2B ? ' ' + X1B : ''));
                    if (Y6B.length > 1) {
                        T(Y6B[U7g]).html(X1B);
                    }
                }
                if (s7g.getDate(E1B, l1B - g6B - 1, 1) < D6B) {
                    f2B(T('.mbsc-cal-prev-m', J6B));
                } else {
                    M2B(T('.mbsc-cal-prev-m', J6B));
                }
                if (s7g.getDate(E1B, l1B + t6B - g6B, 1) > M6B) {
                    f2B(T('.mbsc-cal-next-m', J6B));
                } else {
                    M2B(T('.mbsc-cal-next-m', J6B));
                }
                if (s7g.getDate(E1B, l1B, 1).getFullYear() <= D6B.getFullYear()) {
                    f2B(T('.mbsc-cal-prev-y', J6B));
                } else {
                    M2B(T('.mbsc-cal-prev-y', J6B));
                }
                if (s7g.getDate(E1B, l1B, 1).getFullYear() >= M6B.getFullYear()) {
                    f2B(T('.mbsc-cal-next-y', J6B));
                } else {
                    M2B(T('.mbsc-cal-next-y', J6B));
                }
            }

            function M2B(z1B) {
                z1B.removeClass(y2B).find('.mbsc-cal-btn-txt').removeAttr('aria-disabled');
            }

            function f2B(i1B) {
                i1B.addClass(y2B).find('.mbsc-cal-btn-txt').attr('aria-disabled', 'true');
            }

            function x3B(w1B) {
                b6B.trigger('onDayHighlight', {
                    date: w1B
                });
                if (s7g.highlight) {
                    T('.mbsc-cal-day-sel .mbsc-cal-day-i', x6B).removeClass(k6B);
                    T('.mbsc-cal-day-sel', x6B).removeClass('mbsc-cal-day-sel').removeAttr('aria-selected');
                    T('.mbsc-cal-week-hl', x6B).removeClass('mbsc-cal-week-hl');
                    if (s7g.defaultValue !== null || b6B._hasValue) {
                        T('.mbsc-cal-day[data-full="' + w1B.getFullYear() + '-' + w1B.getMonth() + '-' + w1B.getDate() + '"]', x6B).addClass('mbsc-cal-day-sel').attr('aria-selected', 'true').find('.mbsc-cal-day-i').addClass(k6B).closest('.mbsc-cal-row').addClass('mbsc-cal-week-hl');
                    }
                }
            }

            function S2B(C1B, p1B) {
                if (a6B && (E6B === 'calendar' || p1B)) {
                    var o1B, k1B, H1B = s7g.getDate(T6B, r6B, 1),
                        V1B = Math.abs((s7g.getYear(C1B) - s7g.getYear(H1B)) * 12 + s7g.getMonth(C1B) - s7g.getMonth(H1B));
                    if (b6B.needsSlide && V1B) {
                        T6B = s7g.getYear(C1B);
                        r6B = s7g.getMonth(C1B);
                        if (C1B > H1B) {
                            k1B = V1B > v6B - g6B + t6B - 1;
                            r6B -= k1B ? 0 : V1B - v6B;
                            o1B = 'next';
                        } else if (C1B < H1B) {
                            k1B = V1B > v6B + g6B;
                            r6B += k1B ? 0 : V1B - v6B;
                            o1B = 'prev';
                        }
                        w6B(T6B, r6B, o1B, Math.min(V1B, v6B), k1B, true);
                    }
                    if (!p1B) {
                        p6B = C1B;
                        x3B(C1B);
                    }
                    b6B.needsSlide = true;
                }
            }

            function b2B(K1B, F1B, S1B) {
                if (!S1B) {
                    b6B.trigger('onMonthLoading', {
                        year: K1B,
                        month: F1B
                    });
                }
                b3B(K1B, F1B);
                for (U7g = 0; U7g < e6B; U7g++) {
                    I6B[U7g].html(r2B(K1B, F1B - g6B - v6B + U7g));
                }
                I3B();
                a2B = undefined;
                b6B.trigger('onMonthLoaded', {
                    year: K1B,
                    month: F1B
                });
            }

            function F2B(y1B, j1B) {
                var G1B = v6B,
                    B1B = v6B;
                while (B1B && s7g.getDate(y1B, j1B + B1B + t6B - g6B - 1, 1) > M6B) {
                    B1B--;
                }
                while (G1B && s7g.getDate(y1B, j1B - G1B - g6B, 1) < D6B) {
                    G1B--;
                }
                T.extend(o6B.settings, {
                    contSize: t6B * Q6B,
                    snap: Q6B,
                    minScroll: X6B - (i6B ? G1B : B1B) * Q6B,
                    maxScroll: X6B + (i6B ? B1B : G1B) * Q6B
                });
                o6B.refresh();
            }

            function I3B() {
                if (W6B) {
                    u2B.html(T('.mbsc-cal-week-nr-c', I6B[v6B]).html());
                }
                T('.mbsc-cal-slide-a .mbsc-cal-day', j6B).attr('tabindex', 0);
            }

            function w6B(R1B, L1B, A1B, W1B, Y1B, c1B, n1B) {
                if (R1B) {
                    c6B.push({
                        y: R1B,
                        m: L1B,
                        dir: A1B,
                        slideNr: W1B,
                        load: Y1B,
                        active: c1B,
                        callback: n1B
                    });
                }
                if (L6B) {
                    return;
                }
                var O1B = c6B.shift(),
                    u1B;
                R1B = O1B.y;
                L1B = O1B.m;
                A1B = O1B.dir === 'next';
                W1B = O1B.slideNr;
                Y1B = O1B.load;

                c1B = O1B.active;
                n1B = O1B.callback || P2B;
                u1B = s7g.getDate(R1B, L1B, 1);
                R1B = s7g.getYear(u1B);
                L1B = s7g.getMonth(u1B);
                L6B = true;
                b6B.changing = true;
                b6B.trigger('onMonthChange', {
                    year: R1B,
                    month: L1B
                });
                b6B.trigger('onMonthLoading', {
                    year: R1B,
                    month: L1B
                });
                b3B(R1B, L1B);
                if (Y1B) {
                    for (U7g = 0; U7g < t6B; U7g++) {
                        I6B[A1B ? e6B - t6B + U7g : U7g].html(r2B(R1B, L1B - g6B + U7g));
                    }
                }
                if (c1B) {
                    A6B.addClass('mbsc-cal-slide-a');
                }
                setTimeout(function() {
                    b6B.ariaMessage(s7g.monthNames[L1B] + ' ' + R1B);
                    G2B(R1B, L1B, 200);
                    X6B = A1B ? X6B - Q6B * W1B * G6B : X6B + Q6B * W1B * G6B;
                    o6B.scroll(X6B, c1B ? 200 : 0, false, function() {
                        var s1B;
                        if (I6B.length) {
                            A6B.removeClass('mbsc-cal-slide-a').attr('aria-hidden', 'true');
                            if (A1B) {
                                s1B = I6B.splice(0, W1B);
                                for (U7g = 0; U7g < W1B; U7g++) {
                                    I6B.push(s1B[U7g]);
                                    p2B(I6B[I6B.length - 1], +I6B[I6B.length - 2].attr('data-curr') + 100 * G6B);
                                }
                            } else {
                                s1B = I6B.splice(e6B - W1B, W1B);
                                for (U7g = W1B - 1; U7g >= 0; U7g--) {
                                    I6B.unshift(s1B[U7g]);
                                    p2B(I6B[0], +I6B[1].attr('data-curr') - 100 * G6B);
                                }
                            }
                            for (U7g = 0; U7g < W1B; U7g++) {
                                I6B[A1B ? e6B - W1B + U7g : U7g].html(r2B(R1B, L1B - g6B - v6B + U7g + (A1B ? e6B - W1B : 0)));
                                if (Y1B) {
                                    I6B[A1B ? U7g : e6B - W1B + U7g].html(r2B(R1B, L1B - g6B - v6B + U7g + (A1B ? 0 : e6B - W1B)));
                                }
                            }
                            for (U7g = 0; U7g < t6B; U7g++) {
                                I6B[v6B + U7g].addClass('mbsc-cal-slide-a').removeAttr('aria-hidden');
                            }
                            F2B(R1B, L1B);
                            L6B = false;
                        }
                        if (c6B.length) {
                            setTimeout(function() {
                                w6B();
                            }, 10);
                        } else {
                            T6B = R1B;
                            r6B = L1B;
                            b6B.changing = false;
                            T('.mbsc-cal-day', j6B).attr('tabindex', -1);
                            I3B();
                            if (a2B !== undefined) {
                                b2B(R1B, L1B, a2B);
                            } else {
                                b6B.trigger('onMonthLoaded', {
                                    year: R1B,
                                    month: L1B
                                });
                            }
                            n1B();
                        }
                    });
                }, 10);
            }

            function P3B() {
                var b8B = T(this),
                    r8B = b6B.live,
                    J8B = b6B.getDate(true),
                    v8B = b8B.attr('data-full'),
                    t8B = v8B.split('-'),
                    U1B = N6(t8B[0], t8B[1], t8B[2]),
                    T8B = N6(U1B.getFullYear(), U1B.getMonth(), U1B.getDate(), J8B.getHours(), J8B.getMinutes(), J8B.getSeconds()),
                    g8B = b8B.hasClass('mbsc-cal-day-sel');
                if (!D2B && b8B.hasClass('mbsc-cal-day-diff')) {
                    return;
                }
                if (b6B.trigger('onDayChange', T.extend(z2B[v8B], {
                        date: T8B,
                        target: this,
                        selected: g8B
                    })) !== false) {
                    b6B.needsSlide = false;
                    m2B = true;
                    b6B.setDate(T8B, r8B, 0.2, !r8B, true);
                    if (s7g.outerMonthChange) {
                        f6B = true;
                        if (U1B < s7g.getDate(T6B, r6B - g6B, 1)) {
                            k2B();
                        } else if (U1B > s7g.getDate(T6B, r6B - g6B + t6B, 0)) {
                            o2B();
                        }
                        f6B = false;
                    }
                    if (b6B.live) {
                        b6B.trigger('onSet', {
                            valueText: b6B._value
                        });
                    }
                }
            }

            function p2B(Q8B, I8B) {
                Q8B.attr('data-curr', I8B);
                Q8B[0].style[O8 + 'Transform'] = 'translate3d(' + (Z6B ? '0,' + I8B + '%,' : I8B + '%,' + '0,') + '0)';
            }

            function t3B(q8B) {
                if (b6B.isVisible() && a6B) {
                    if (!b6B.changing) {
                        b2B(T6B, r6B, q8B);
                    } else {
                        a2B = q8B;
                    }
                }
            }

            function o2B() {
                if (f6B && s7g.getDate(T6B, r6B + t6B - g6B, 1) <= M6B) {
                    w6B(T6B, ++r6B, 'next', 1, false, true, o2B);
                }
            }

            function k2B() {
                if (f6B && s7g.getDate(T6B, r6B - g6B - 1, 1) >= D6B) {
                    w6B(T6B, --r6B, 'prev', 1, false, true, k2B);
                }
            }

            function A2B(P8B) {
                if (f6B && s7g.getDate(T6B, r6B, 1) <= s7g.getDate(s7g.getYear(M6B) - 1, s7g.getMonth(M6B) - Z2B, 1)) {
                    w6B(++T6B, r6B, 'next', v6B, true, true, function() {
                        A2B(P8B);
                    });
                } else if (f6B && !P8B.hasClass('mbsc-fr-btn-d')) {
                    w6B(s7g.getYear(M6B), s7g.getMonth(M6B) - Z2B, 'next', v6B, true, true);
                }
            }

            function Y2B(x8B) {
                if (f6B && s7g.getDate(T6B, r6B, 1) >= s7g.getDate(s7g.getYear(D6B) + 1, s7g.getMonth(D6B) + g6B, 1)) {
                    w6B(--T6B, r6B, 'prev', v6B, true, true, function() {
                        Y2B(x8B);
                    });
                } else if (f6B && !x8B.hasClass('mbsc-fr-btn-d')) {
                    w6B(s7g.getYear(D6B), s7g.getMonth(D6B) + g6B, 'prev', v6B, true, true);
                }
            }

            function N2B(Z8B, M8B) {
                if (!Z8B.hasClass('mbsc-cal-v')) {
                    Z8B.addClass('mbsc-cal-v' + (M8B ? '' : ' mbsc-cal-p-in')).removeClass('mbsc-cal-p-out mbsc-cal-h');
                    b6B.trigger('onSelectShow');
                }
            }

            function S6B(a8B, D8B) {
                if (a8B.hasClass('mbsc-cal-v')) {
                    a8B.removeClass('mbsc-cal-v mbsc-cal-p-in').addClass('mbsc-cal-h' + (D8B ? '' : ' mbsc-cal-p-out'));
                }
            }

            function u6B(f8B, N8B) {
                if ((N8B || f8B).hasClass('mbsc-cal-v')) {
                    S6B(f8B);
                } else {
                    N2B(f8B);
                }
            }

            function C2B() {
                T(this).removeClass('mbsc-cal-p-out mbsc-cal-p-in');
            }

            function T3B(e8B) {
                return e8B[0].innerWidth || e8B.innerWidth();
            }
            var y6B, U7g, d6B, w2B, g2B, J6B, i2B, x6B, j6B, Q6B, X6B, m2B, a6B, V6B, J2B, u2B, z6B, R6B, v2B, o6B, K6B, h2B, q2B, Y6B, x2B, O6B, E2B, J3B, c2B, D6B, M6B, s6B, Q3B, p6B, T6B, r6B, X2B, d2B, s2B, U2B, B6B, E6B, L6B, r3B, v3B, h6B, l2B, f6B, t6B, e6B, Z2B, g6B, a2B, D2B, q3B, N6B, H6B, Q2B, H2B = this,
                A6B = [],
                I6B = [],
                c6B = [],
                q6B = {},
                z2B = {},
                P2B = function E8B() {},
                W2B = T.extend({}, b6B.settings),
                s7g = T.extend(b6B.settings, R8, W2B),
                O2B = s7g.weekDays == 'full' ? '' : s7g.weekDays == 'min' ? 'Min' : 'Short',
                W6B = s7g.weekCounter,
                V2B = s7g.layout || (/top|bottom|inline/.test(s7g.display) ? 'liquid' : ''),
                m6B = V2B == 'liquid' && s7g.display !== 'bubble',
                L2B = s7g.display == 'center',
                i6B = s7g.rtl,
                G6B = i6B ? -1 : 1,
                K2B = m6B ? null : s7g.calendarWidth,
                Z6B = s7g.calendarScroll == 'vertical',
                C6B = s7g.quickNav,
                v6B = s7g.preMonths,
                F6B = s7g.yearChange,
                U6B = s7g.controls.join(','),
                n6B = (s7g.tabs === true || s7g.tabs !== false && m6B) && s7g.controls.length > 1,
                t2B = !n6B && s7g.tabs === undefined && !m6B && s7g.controls.length > 1,
                I2B = s7g.yearSuffix || '',
                k6B = s7g.activeClass || '',
                T2B = 'mbsc-cal-tab-sel ' + (s7g.activeTabClass || ''),
                e2B = s7g.activeTabInnerClass || '',
                y2B = 'mbsc-fr-btn-d ' + (s7g.disabledClass || ''),
                l6B = '',
                P6B = '';
            if (U6B.match(/calendar/)) {
                a6B = true;
            } else {
                C6B = false;
            }
            if (U6B.match(/date/)) {
                q6B.date = 1;
            }
            if (U6B.match(/time/)) {
                q6B.time = 1;
            }
            if (a6B && q6B.date) {
                n6B = true;
                t2B = false;
            }
            s7g.layout = V2B;
            s7g.preset = (q6B.date || a6B ? 'date' : '') + (q6B.time ? 'time' : '');
            if (s7g.display == 'inline') {
                T(this).closest('[data-role="page"]').on('pageshow', function() {
                    b6B.position();
                });
            }
            b6B.changing = false;
            b6B.needsSlide = true;
            b6B.getDayProps = P2B;
            b6B.onGenMonth = P2B;
            b6B.prepareObj = B2B;
            b6B.refresh = function() {
                t3B(false);
            };
            b6B.redraw = function() {
                t3B(true);
            };
            b6B.navigate = function(X8B, m8B) {
                var l8B, d8B, h8B = b6B.isVisible();
                if (m8B && h8B) {
                    S2B(X8B, true);
                } else {
                    l8B = s7g.getYear(X8B);
                    d8B = s7g.getMonth(X8B);
                    if (h8B && (l8B != T6B || d8B != r6B)) {
                        b6B.trigger('onMonthChange', {
                            year: l8B,
                            month: d8B
                        });
                        G2B(l8B, d8B);
                        b2B(l8B, d8B);
                        F2B(X8B.getFullYear(), X8B.getMonth());
                    }
                    T6B = l8B;
                    r6B = d8B;
                }
            };
            b6B.showMonthView = function() {
                if (C6B && !R6B) {
                    S6B(P6B, true);
                    S6B(l6B, true);
                    N2B(z6B, true);
                    R6B = true;
                }
            };
            b6B.changeTab = function(z8B) {
                if (!b6B._isVisible || !q6B[z8B] || E6B == z8B) {
                    return;
                }
                E6B = z8B;
                T('.mbsc-cal-pnl', J6B).removeClass('mbsc-cal-p-in').addClass('mbsc-cal-pnl-h');
                T('.mbsc-cal-tab', J6B).removeClass(T2B).removeAttr('aria-selected').find('.mbsc-cal-tab-i').removeClass(e2B);
                T('.mbsc-cal-tab[data-control="' + z8B + '"]', J6B).addClass(T2B).attr('aria-selected', 'true').find('.mbsc-cal-tab-i').addClass(e2B);
                q6B[E6B].removeClass('mbsc-cal-pnl-h').addClass('mbsc-cal-p-in');
                if (E6B == 'calendar') {
                    y6B = b6B.getDate(true);
                    if (y6B.getFullYear() !== p6B.getFullYear() || y6B.getMonth() !== p6B.getMonth() || y6B.getDate() !== p6B.getDate()) {
                        S2B(y6B);
                    }
                }
                b6B.showMonthView();
                b6B.trigger('onTabChange', {
                    tab: E6B
                });
            };
            w2B = G3.datetime.call(this, b6B);
            q2B = (s7g.dateWheels || s7g.dateFormat).search(/m/i);
            x2B = (s7g.dateWheels || s7g.dateFormat).search(/y/i);
            T.extend(w2B, {
                ariaMessage: s7g.calendarText,
                onMarkupReady: function i8B(k8B) {
                    var C8B, w8B, V8B = '';
                    J6B = T(k8B.target);
                    i2B = s7g.display == 'inline' ? T(this).is('div') ? T(this) : T(this).parent() : b6B._window;
                    p6B = b6B.getDate(true);
                    if (!T6B) {
                        T6B = s7g.getYear(p6B);
                        r6B = s7g.getMonth(p6B);
                    }
                    X6B = 0;
                    J2B = true;
                    L6B = false;
                    v2B = s7g.monthNames;
                    E6B = 'calendar';
                    if (s7g.min) {
                        D6B = N6(s7g.min.getFullYear(), s7g.min.getMonth(), 1);
                        s6B = s7g.min;
                    }
                    if (s7g.max) {
                        M6B = N6(s7g.max.getFullYear(), s7g.max.getMonth(), 1);
                        Q3B = s7g.max;
                    }
                    J6B.addClass('mbsc-calendar');
                    g2B = T('.mbsc-fr-popup', J6B);
                    B6B = T('.mbsc-fr-c', J6B);
                    if (q6B.date) {
                        q6B.date = T('.mbsc-sc-whl-gr-c', J6B).eq(0);
                    } else if (a6B) {
                        T('.mbsc-sc-whl-gr-c', J6B).eq(0).addClass('mbsc-cal-hdn');
                    }
                    if (q6B.time) {
                        q6B.time = T('.mbsc-sc-whl-gr-c', J6B).eq(1);
                    }
                    if (a6B) {
                        t6B = s7g.months == 'auto' ? Math.max(1, Math.min(3, Math.floor((K2B || T3B(i2B)) / 280))) : s7g.months;
                        e6B = t6B + 2 * v6B;
                        Z2B = Math.floor(t6B / 2);
                        g6B = Math.round(t6B / 2) - 1;
                        D2B = s7g.showOuterDays === undefined ? t6B < 2 : s7g.showOuterDays;
                        Z6B = Z6B && t6B < 2;
                        w8B = '<div class="mbsc-cal-btnw"><div class="' + (i6B ? 'mbsc-cal-next-m' : 'mbsc-cal-prev-m') + ' mbsc-cal-prev mbsc-cal-btn mbsc-fr-btn mbsc-fr-btn-e"><div role="button" tabindex="0" class="mbsc-cal-btn-txt ' + (s7g.btnCalPrevClass || '') + '"' + ' aria-label="' + s7g.prevMonthText + '"></div></div>';
                        for (U7g = 0; U7g < t6B; ++U7g) {
                            w8B += '<div class="mbsc-cal-btnw-m" style="width: ' + 100 / t6B + '%"><span role="button" class="mbsc-cal-month"></span></div>';
                        }
                        w8B += '<div class="' + (i6B ? 'mbsc-cal-prev-m' : 'mbsc-cal-next-m') + ' mbsc-cal-next mbsc-cal-btn mbsc-fr-btn mbsc-fr-btn-e"><div role="button" tabindex="0" class="mbsc-cal-btn-txt ' + (s7g.btnCalNextClass || '') + '"' + ' aria-label="' + s7g.nextMonthText + '"></div></div></div>';
                        if (F6B) {
                            V8B = '<div class="mbsc-cal-btnw"><div class="' + (i6B ? 'mbsc-cal-next-y' : 'mbsc-cal-prev-y') + ' mbsc-cal-prev mbsc-cal-btn mbsc-fr-btn mbsc-fr-btn-e"><div role="button" tabindex="0" class="mbsc-cal-btn-txt ' + (s7g.btnCalPrevClass || '') + '"' + ' aria-label="' + s7g.prevYearText + '"></div></div>' + '<span role="button" class="mbsc-cal-year"></span>' + '<div class="' + (i6B ? 'mbsc-cal-prev-y' : 'mbsc-cal-next-y') + ' mbsc-cal-next mbsc-cal-btn mbsc-fr-btn mbsc-fr-btn-e"><div role="button" tabindex="0" class="mbsc-cal-btn-txt ' + (s7g.btnCalNextClass || '') + '"' + ' aria-label="' + s7g.nextYearText + '"></div></div></div>';
                        }
                        if (C6B) {
                            O6B = s7g.getYear(D6B);
                            E2B = s7g.getYear(M6B);
                            J3B = s7g.getMonth(D6B);
                            c2B = s7g.getMonth(M6B);
                            d2B = Math.ceil((E2B - O6B + 1) / 12) + 2;
                            l6B = g3B('month', 36, 24, 0, '', s7g.monthNames, s7g.monthNamesShort);
                            P6B = g3B('year', d2B * 12, E2B - O6B + 13, O6B, I2B);
                        }
                        V6B = '<div class="mbsc-w-p mbsc-cal-c"><div class="mbsc-cal mbsc-cal-hl-now ' + (t6B > 1 ? ' mbsc-cal-multi ' : '') + (W6B ? ' mbsc-cal-weeks ' : '') + (Z6B ? ' mbsc-cal-vertical' : '') + (D2B ? '' : ' mbsc-cal-hide-diff ') + (s7g.calendarClass || '') + '">' + '<div class="mbsc-cal-header"><div class="mbsc-cal-btnc ' + (F6B ? 'mbsc-cal-btnc-ym' : 'mbsc-cal-btnc-m') + '">' + (x2B < q2B || t6B > 1 ? V8B + w8B : w8B + V8B) + '</div></div><div class="mbsc-cal-body"><div class="mbsc-cal-m-c mbsc-cal-v"><div class="mbsc-cal-days-c">';
                        for (d6B = 0; d6B < t6B; ++d6B) {
                            V6B += '<div aria-hidden="true" class="mbsc-cal-days" style="width: ' + 100 / t6B + '%"><table cellpadding="0" cellspacing="0"><tr>';
                            for (U7g = 0; U7g < 7; U7g++) {
                                V6B += '<th>' + s7g['dayNames' + O2B][(U7g + s7g.firstDay) % 7] + '</th>';
                            }
                            V6B += '</tr></table></div>';
                        }
                        V6B += '</div>' + '<div class="mbsc-cal-week-nrs-c ' + (s7g.weekNrClass || '') + '">' + '<div class="mbsc-cal-week-nrs"></div>' + '</div>' + '<div class="mbsc-cal-anim-c ' + (s7g.calendarClass || '') + '">' + '<div class="mbsc-cal-anim">';
                        for (U7g = 0; U7g < t6B + 2 * v6B; U7g++) {
                            V6B += '<div class="mbsc-cal-slide" aria-hidden="true"></div>';
                        }
                        V6B += '</div></div></div>' + l6B + P6B + '</div></div></div>';
                        q6B.calendar = T(V6B);
                    }
                    T.each(s7g.controls, function(o8B, H8B) {
                        q6B[H8B] = T('<div class="mbsc-cal-pnl" id="' + (H2B.id + '_dw_pnl_' + o8B) + '"></div>').append(T('<div class="mbsc-cal-pnl-i"></div>').append(q6B[H8B])).appendTo(B6B);
                    });
                    C8B = '<div class="mbsc-cal-tabs"><ul role="tablist">';
                    T.each(s7g.controls, function(p8B, K8B) {
                        if (q6B[K8B]) {
                            C8B += '<li role="tab" aria-controls="' + (H2B.id + '_dw_pnl_' + p8B) + '" class="mbsc-cal-tab ' + (p8B ? '' : T2B) + '" data-control="' + K8B + '"><a href="#" class="mbsc-fr-btn-e mbsc-fr-btn-nhl mbsc-cal-tab-i ' + (!p8B ? e2B : '') + '">' + s7g[K8B + 'Text'] + '</a></li>';
                        }
                    });
                    C8B += '</ul></div>';
                    B6B.before(C8B);
                    x6B = T('.mbsc-cal-anim-c', J6B);
                    j6B = T('.mbsc-cal-anim', x6B);
                    u2B = T('.mbsc-cal-week-nrs', J6B);
                    if (a6B) {
                        R6B = true;
                        A6B = T('.mbsc-cal-slide', j6B).each(function(S8B, F8B) {
                            I6B.push(T(F8B));
                        });
                        A6B.slice(v6B, v6B + t6B).addClass('mbsc-cal-slide-a').removeAttr('aria-hidden');
                        for (U7g = 0; U7g < e6B; U7g++) {
                            p2B(I6B[U7g], 100 * (U7g - v6B) * G6B);
                        }
                        b2B(T6B, r6B);
                        o6B = new U2.ScrollView(x6B[0], {
                            axis: Z6B ? 'Y' : 'X',
                            easing: '',
                            contSize: 0,
                            snap: 1,
                            maxSnapScroll: v6B,
                            moveElement: j6B,
                            mousewheel: s7g.mousewheel,
                            time: 200,
                            lock: true,
                            stopProp: false,
                            minScroll: -Infinity,
                            maxScroll: Infinity,
                            onAnimationEnd: function G8B(y8B) {
                                var B8B = Math.round(((Z6B ? y8B.posY : y8B.posX) - X6B) / Q6B) * G6B;
                                if (B8B) {
                                    w6B(T6B, r6B - B8B, B8B > 0 ? 'prev' : 'next', B8B > 0 ? B8B : -B8B);
                                }
                            }
                        });
                    }
                    h2B = T('.mbsc-cal-month', J6B);
                    Y6B = T('.mbsc-cal-year', J6B);
                    z6B = T('.mbsc-cal-m-c', J6B);
                    if (C6B) {
                        z6B.on(H2, C2B);
                        l6B = T('.mbsc-cal-month-c', J6B).on(H2, C2B);
                        P6B = T('.mbsc-cal-year-c', J6B).on(H2, C2B);
                        q3B = T('.mbsc-cal-sc-p', J6B);
                        X2B = {
                            axis: Z6B ? 'Y' : 'X',
                            contSize: 0,
                            snap: 1,
                            maxSnapScroll: 1,
                            rtl: s7g.rtl,
                            mousewheel: s7g.mousewheel,
                            time: 200,
                            stopProp: false,
                            minScroll: -Infinity,
                            maxScroll: Infinity
                        };
                        N6B = new U2.ScrollView(P6B[0], X2B);
                        K6B = new U2.ScrollView(l6B[0], X2B);
                    }
                    if (m6B) {
                        J6B.addClass('mbsc-cal-liq');
                    } else {
                        T('.mbsc-cal', J6B).width(K2B || 280 * t6B);
                    }
                    if (s7g.calendarHeight) {
                        T('.mbsc-cal-anim-c', J6B).height(s7g.calendarHeight);
                    }
                    b6B.tap(x6B, function(R8B) {
                        var j8B = T(R8B.target);
                        if (!L6B && !o6B.scrolled && s7g.readonly !== true) {
                            j8B = j8B.closest('.mbsc-cal-day', this);
                            if (j8B.hasClass('mbsc-cal-day-v')) {
                                P3B.call(j8B[0]);
                            }
                        }
                    });
                    T('.mbsc-cal-btn', J6B).on('touchstart mousedown keydown', M3B).on('touchmove', R2B).on('touchend touchcancel keyup', j2B);
                    T('.mbsc-cal-tab', J6B).on('touchstart click', function(L8B) {
                        if (u3(L8B, this)) {
                            b6B.changeTab(T(this).attr('data-control'));
                        }
                    });
                    if (C6B) {
                        b6B.tap(T('.mbsc-cal-month', J6B), function() {
                            if (!P6B.hasClass('mbsc-cal-v')) {
                                u6B(z6B);
                                R6B = z6B.hasClass('mbsc-cal-v');
                            }
                            u6B(l6B);
                            S6B(P6B);
                        });
                        b6B.tap(T('.mbsc-cal-year', J6B), function() {
                            if (!P6B.hasClass('mbsc-cal-v')) {
                                N6B.scroll(H6B);
                            }
                            if (!l6B.hasClass('mbsc-cal-v')) {
                                u6B(z6B);
                                R6B = z6B.hasClass('mbsc-cal-v');
                            }
                            u6B(P6B);
                            S6B(l6B);
                        });
                        b6B.tap(T('.mbsc-cal-month-s', J6B), function() {
                            if (!K6B.scrolled && !T(this).hasClass('mbsc-fr-btn-d')) {
                                b6B.navigate(s7g.getDate(T6B, T(this).attr('data-val'), 1));
                            }
                        });
                        b6B.tap(T('.mbsc-cal-year-s', J6B), function() {
                            if (!N6B.scrolled) {
                                y6B = s7g.getDate(T(this).attr('data-val'), r6B, 1);
                                b6B.navigate(new Date(F6.constrain(y6B, D6B, M6B)));
                            }
                        });
                        b6B.tap(P6B, function() {
                            if (!N6B.scrolled) {
                                S6B(P6B);
                                N2B(z6B);
                                R6B = true;
                            }
                        });
                        b6B.tap(l6B, function() {
                            if (!K6B.scrolled) {
                                S6B(l6B);
                                N2B(z6B);
                                R6B = true;
                            }
                        });
                    }
                },
                onShow: function W8B() {
                    if (a6B) {
                        G2B(T6B, r6B);
                    }
                },
                onPosition: function A8B(r9B) {
                    var U8B, u8B, t9B, s8B, c8B, O8B, n8B = 0,
                        Y8B = 0,
                        J9B = 0,
                        b9B = r9B.windowHeight;
                    if (m6B) {
                        if (L2B) {
                            x6B.height('');
                        }
                        B6B.height('');
                        j6B.width('');
                    }
                    if (Q6B) {
                        c8B = Q6B;
                    }
                    if (a6B) {
                        Q6B = Math.round(Math.round(x6B[0][Z6B ? 'offsetHeight' : 'offsetWidth']) / t6B);
                    }
                    if (Q6B) {
                        J6B.removeClass('mbsc-cal-m mbsc-cal-l');
                        if (Q6B > 1024) {
                            J6B.addClass('mbsc-cal-l');
                        } else if (Q6B > 640) {
                            J6B.addClass('mbsc-cal-m');
                        }
                    }
                    if (n6B && (J2B || m6B) || t2B) {
                        T('.mbsc-cal-pnl', J6B).removeClass('mbsc-cal-pnl-h');
                        T.each(q6B, function(T9B, v9B) {
                            U8B = v9B[0].offsetWidth;
                            n8B = Math.max(n8B, U8B);
                            Y8B = Math.max(Y8B, v9B[0].offsetHeight);
                            J9B += U8B;
                        });
                        if (n6B || t2B && J9B > T3B(i2B)) {
                            u8B = true;
                            E6B = T('.mbsc-cal-tabs .mbsc-cal-tab-sel', J6B).attr('data-control');
                            g2B.addClass('mbsc-cal-tabbed');
                        } else {
                            E6B = 'calendar';
                            n8B = '';
                            Y8B = '';
                            g2B.removeClass('mbsc-cal-tabbed');
                            B6B.css({
                                width: '',
                                height: ''
                            });
                        }
                    }
                    if (m6B && L2B && a6B) {
                        b6B._isFullScreen = true;
                        if (u8B) {
                            B6B.height(q6B.calendar[0].offsetHeight);
                        }
                        s8B = g2B[0].offsetHeight;
                        if (b9B >= s8B) {
                            x6B.height(b9B - s8B + x6B[0].offsetHeight);
                        }
                        Y8B = Math.max(Y8B, q6B.calendar[0].offsetHeight);
                    }
                    if (u8B) {
                        B6B.css({
                            width: m6B ? '' : n8B,
                            height: Y8B
                        });
                        if (a6B) {
                            Q6B = Math.round(Math.round(x6B[0][Z6B ? 'offsetHeight' : 'offsetWidth']) / t6B);
                        }
                    }
                    if (Q6B) {
                        j6B[Z6B ? 'height' : 'width'](Q6B);
                        if (Q6B !== c8B) {
                            if (F6B) {
                                v2B = s7g.maxMonthWidth > T('.mbsc-cal-btnw-m', J6B).width() ? s7g.monthNamesShort : s7g.monthNames;
                                for (U7g = 0; U7g < t6B; ++U7g) {
                                    T(h2B[U7g]).text(v2B[s7g.getMonth(s7g.getDate(T6B, r6B - g6B + U7g, 1))]);
                                }
                            }
                            if (C6B) {
                                O8B = P6B[0][Z6B ? 'offsetHeight' : 'offsetWidth'];
                                T.extend(N6B.settings, {
                                    contSize: O8B,
                                    snap: O8B,
                                    minScroll: (2 - d2B) * O8B,
                                    maxScroll: -O8B
                                });
                                T.extend(K6B.settings, {
                                    contSize: O8B,
                                    snap: O8B,
                                    minScroll: -O8B,
                                    maxScroll: -O8B
                                });
                                N6B.refresh();
                                K6B.refresh();
                                if (P6B.hasClass('mbsc-cal-v')) {
                                    N6B.scroll(H6B);
                                }
                            }
                            if (m6B && !J2B && c8B) {
                                t9B = X6B / c8B;
                                X6B = t9B * Q6B;
                            }
                            F2B(T6B, r6B);
                        }
                    } else {
                        Q6B = c8B;
                    }
                    if (u8B) {
                        T('.mbsc-cal-pnl', J6B).addClass('mbsc-cal-pnl-h');
                        q6B[E6B].removeClass('mbsc-cal-pnl-h');
                    }
                    b6B.trigger('onCalResize');
                    J2B = false;
                },
                onHide: function g9B() {
                    c6B = [];
                    I6B = [];
                    E6B = null;
                    T6B = null;
                    r6B = null;
                    L6B = true;
                    Q6B = 0;
                    if (o6B) {
                        o6B.destroy();
                    }
                    if (C6B && N6B && K6B) {
                        N6B.destroy();
                        K6B.destroy();
                    }
                },
                onValidated: function I9B(x9B) {
                    var q9B, P9B, Q9B;
                    P9B = b6B.getDate(true);
                    if (m2B) {
                        q9B = 'calendar';
                    } else {
                        for (Q9B in b6B.order) {
                            if (Q9B && b6B.order[Q9B] === x9B) {
                                q9B = /[mdy]/.test(Q9B) ? 'date' : 'time';
                            }
                        }
                    }
                    b6B.trigger('onSetDate', {
                        date: P9B,
                        control: q9B
                    });
                    S2B(P9B);
                    m2B = false;
                }
            });
            return w2B;
        };
        var r6 = J.$;
        var o6 = r6.extend;
        var R6 = J.util;
        var T3 = R6.datetime;
        var m1 = T3.adjustedDate;
        var C1 = J.presets.scroller;
        var j8 = {};
        J.presetShort('calendar');
        C1.calendar = function(a9B) {
            function H9B(o9B) {
                if (o9B) {
                    if (h9B[o9B]) {
                        return h9B[o9B];
                    }
                    var p9B = r6('<div style="background-color:' + o9B + ';"></div>').appendTo('body'),
                        S9B = window.getComputedStyle ? getComputedStyle(p9B[0]) : p9B[0].style,
                        K9B = S9B.backgroundColor.replace(/rgb|rgba|\(|\)|\s/g, '').split(','),
                        G9B = K9B[0] * 0.299 + K9B[1] * 0.587 + K9B[2] * 0.114,
                        F9B = G9B > 130 ? '#000' : '#fff';
                    p9B.remove();
                    h9B[o9B] = F9B;
                    return F9B;
                }
            }

            function N9B(B9B) {
                return m1(B9B.getFullYear(), B9B.getMonth(), B9B.getDate());
            }

            function k9B(y9B) {
                M9B = {};
                if (y9B && y9B.length) {
                    for (f9B = 0; f9B < y9B.length; f9B++) {
                        M9B[N9B(y9B[f9B])] = y9B[f9B];
                    }
                }
            }

            function E9B() {
                a9B.refresh();
            }
            var l9B, d9B, V9B, f9B, m9B, C9B, X9B, h9B = {},
                w9B = o6({}, a9B.settings),
                Z9B = o6(a9B.settings, j8, w9B),
                i9B = Z9B.activeClass || '',
                D9B = Z9B.select == 'multiple' || Z9B.select > 1 || Z9B.selectType == 'week',
                z9B = R6.isNumeric(Z9B.select) ? Z9B.select : Infinity,
                e9B = !!Z9B.events,
                M9B = {};
            X9B = C1.calbase.call(this, a9B);
            l9B = o6({}, X9B);
            V9B = Z9B.firstSelectDay === undefined ? Z9B.firstDay : Z9B.firstSelectDay;
            if (D9B && Z9B.defaultValue && Z9B.defaultValue.length) {
                for (f9B = 0; f9B < Z9B.defaultValue.length; f9B++) {
                    M9B[N9B(Z9B.defaultValue[f9B])] = Z9B.defaultValue[f9B];
                }
            }
            a9B.onGenMonth = function(j9B, R9B) {
                m9B = a9B.prepareObj(Z9B.events || Z9B.marked, j9B, R9B);
            };
            a9B.getDayProps = function(n9B) {
                var W9B, u9B = D9B ? M9B[n9B] !== undefined : undefined,
                    L9B = m9B[n9B] ? m9B[n9B] : false,
                    A9B = L9B && L9B[0] && L9B[0].text,
                    c9B = L9B && L9B[0] && L9B[0].color,
                    s9B = e9B && A9B ? H9B(c9B) : '',
                    O9B = '',
                    Y9B = '';
                if (L9B) {
                    for (W9B = 0; W9B < L9B.length; W9B++) {
                        if (L9B[W9B].icon) {
                            O9B += '<span class="mbsc-ic mbsc-ic-' + L9B[W9B].icon + '"' + (L9B[W9B].text ? '' : L9B[W9B].color ? ' style="color:' + L9B[W9B].color + ';"' : '') + '></span>\n';
                        }
                    }
                    Y9B = '<div class="mbsc-cal-day-m"><div class="mbsc-cal-day-m-t">';
                    for (W9B = 0; W9B < L9B.length; W9B++) {
                        Y9B += '<div class="mbsc-cal-day-m-c"' + (L9B[W9B].color ? ' style="background:' + L9B[W9B].color + ';"' : '') + '></div>';
                    }
                    Y9B += '</div></div>';
                }
                return {
                    marked: L9B,
                    selected: u9B,
                    cssClass: L9B ? 'mbsc-cal-day-marked' : '',
                    ariaLabel: e9B ? A9B : '',
                    markup: e9B && A9B ? '<div class="mbsc-cal-day-txt-c"><div class="mbsc-cal-day-txt" title="' + r6('<div>' + A9B + '</div>').text() + '"' + (c9B ? ' style="background:' + c9B + ';color:' + s9B + ';text-shadow:none;"' : '') + '>' + O9B + A9B + '</div></div>' : e9B && O9B ? '<div class="mbsc-cal-day-ic-c">' + O9B + '</div>' : L9B ? Y9B : ''
                };
            };
            a9B.addValue = function(U9B) {
                M9B[N9B(U9B)] = U9B;
                E9B();
            };
            a9B.removeValue = function(b5B) {
                delete M9B[N9B(b5B)];
                E9B();
            };
            a9B.setVal = function(J5B, t5B, r5B, v5B, T5B) {
                if (D9B) {
                    k9B(J5B);
                    J5B = J5B ? J5B[0] : null;
                }
                a9B._setVal(J5B, t5B, r5B, v5B, T5B);
                E9B();
            };
            a9B.getVal = function(g5B) {
                if (D9B) {
                    return R6.objectToArray(M9B);
                }
                return a9B.getDate(g5B);
            };
            o6(X9B, {
                highlight: !D9B,
                outerMonthChange: !D9B,
                parseValue: function I5B(Q5B) {
                    var q5B, P5B;
                    if (D9B && Q5B && typeof Q5B === 'string') {
                        M9B = {};
                        Q5B = Q5B.split(',');
                        for (q5B = 0; q5B < Q5B.length; q5B++) {
                            P5B = T3.parseDate(a9B.format, Q5B[q5B].replace(/^\s+|\s+$/g, ''), Z9B);
                            M9B[N9B(P5B)] = P5B;
                        }
                        Q5B = Q5B[0];
                    }
                    if (D9B && Z9B.defaultValue && Z9B.defaultValue.length) {
                        Z9B.defaultValue = Z9B.defaultValue[0];
                    }
                    return l9B.parseValue.call(this, Q5B);
                },
                formatValue: function x5B(a5B) {
                    var M5B, Z5B = [];
                    if (D9B) {
                        for (M5B in M9B) {
                            Z5B.push(T3.formatDate(a9B.format, M9B[M5B], Z9B));
                        }
                        return Z5B.join(', ');
                    }
                    return l9B.formatValue.call(this, a5B);
                },
                onClear: function D5B() {
                    if (D9B) {
                        M9B = {};
                        a9B.refresh();
                    }
                },
                onBeforeShow: function f5B() {
                    if (Z9B.setOnDayTap === undefined && (!Z9B.buttons || !Z9B.buttons.length)) {
                        Z9B.setOnDayTap = true;
                    }
                    if (Z9B.setOnDayTap && Z9B.display != 'inline') {
                        Z9B.outerMonthChange = false;
                    }
                    if (Z9B.counter && D9B) {
                        Z9B.headerText = function() {
                            var N5B = 0,
                                e5B = Z9B.selectType == 'week' ? 7 : 1;
                            r6.each(M9B, function() {
                                N5B++;
                            });
                            N5B = Math.round(N5B / e5B);
                            return (N5B > 1 ? Z9B.selectedPluralText || Z9B.selectedText : Z9B.selectedText).replace(/{count}/, N5B);
                        };
                    }
                },
                onMarkupReady: function E5B(l5B) {
                    l9B.onMarkupReady.call(this, l5B);
                    d9B = r6(l5B.target);
                    if (D9B) {
                        r6('.mbsc-fr-hdr', d9B).attr('aria-live', 'off');
                        C9B = o6({}, M9B);
                    }
                    if (e9B) {
                        r6('.mbsc-cal', d9B).addClass('mbsc-cal-ev');
                    }
                },
                onDayChange: function d5B(i5B) {
                    var w5B = i5B.date,
                        X5B = N9B(w5B),
                        k5B = r6(i5B.target),
                        C5B = i5B.selected;
                    if (D9B) {
                        if (Z9B.selectType == 'week') {
                            var m5B, z5B, h5B = X5B.getDay() - V9B;
                            h5B = h5B < 0 ? 7 + h5B : h5B;
                            if (Z9B.select != 'multiple') {
                                M9B = {};
                            }
                            for (m5B = 0; m5B < 7; m5B++) {
                                z5B = m1(X5B.getFullYear(), X5B.getMonth(), X5B.getDate() - h5B + m5B);
                                if (C5B) {
                                    delete M9B[z5B];
                                } else if (R6.objectToArray(M9B).length / 7 < z9B) {
                                    M9B[z5B] = z5B;
                                }
                            }
                            E9B();
                        } else {
                            var V5B = r6('.mbsc-cal .mbsc-cal-day[data-full="' + k5B.attr('data-full') + '"]', d9B);
                            if (C5B) {
                                V5B.removeClass('mbsc-cal-day-sel').removeAttr('aria-selected').find('.mbsc-cal-day-i').removeClass(i9B);
                                delete M9B[X5B];
                            } else if (R6.objectToArray(M9B).length < z9B) {
                                V5B.addClass('mbsc-cal-day-sel').attr('aria-selected', 'true').find('.mbsc-cal-day-i').addClass(i9B);
                                M9B[X5B] = X5B;
                            }
                        }
                    }
                    if (Z9B.setOnDayTap && Z9B.select != 'multiple' && Z9B.display != 'inline') {
                        a9B.needsSlide = false;
                        a9B.setDate(w5B);
                        a9B.select();
                        return false;
                    }
                },
                onCancel: function H5B() {
                    if (!a9B.live && D9B) {
                        M9B = o6({}, C9B);
                    }
                }
            });
            return X9B;
        };
        var P3 = function o5B() {};
        var y8 = J.$;
        var y2 = function p5B(y5B, j5B, R5B) {
            var B5B, F5B, S5B, G5B, K5B = this;
            J.classes.Base.call(this, y5B, j5B, true);
            K5B.__init = P3;
            K5B.__destroy = P3;
            K5B._init = function(W5B) {
                var L5B;
                G5B = K5B.settings;
                B5B = y8(y5B);
                L5B = !!F5B;
                F5B = K5B._$parent = L5B ? F5B : B5B.parent();
                if (S5B) {
                    F5B.removeClass(S5B);
                }
                S5B = K5B._css + ' mbsc-progress-w mbsc-control-w mbsc-' + G5B.theme + (G5B.baseTheme ? ' mbsc-' + G5B.baseTheme : '') + (G5B.rtl ? ' mbsc-rtl' : ' mbsc-ltr');
                F5B.addClass(S5B);
                B5B.addClass('mbsc-control');
                K5B.__init(W5B);
                if (!L5B) {
                    K5B._attachChange();
                }
                K5B.refresh();
            };
            K5B._destroy = function() {
                K5B.__destroy();
                F5B.removeClass(S5B);
                B5B.removeClass('mbsc-control');
            };
            if (!R5B) {
                K5B.init(j5B);
            }
        };
        y2.prototype = {
            _class: 'progressbase'
        };
        var W6 = J.$;
        var M2 = J.$;
        var g2 = function q0B(m0B, w0B, C0B) {
            function i0B() {
                var V0B = N0B('value', Z0B);
                if (V0B !== D0B) {
                    l0B(V0B);
                }
            }

            function N0B(H0B, o0B) {
                var k0B = x0B.attr(H0B);
                return k0B === undefined || k0B === '' ? o0B : +k0B;
            }

            function l0B(p0B, S0B, K0B, F0B) {
                p0B = Math.min(f0B, Math.max(p0B, Z0B));
                z0B.css('width', (p0B - Z0B) * 100 / (f0B - Z0B) + '%');
                if (K0B === undefined) {
                    K0B = true;
                }
                if (F0B === undefined) {
                    F0B = K0B;
                }
                if (p0B !== D0B || S0B) {
                    P0B._display(p0B);
                }
                if (p0B !== D0B) {
                    D0B = p0B;
                    if (K0B) {
                        x0B.attr('value', D0B);
                    }
                    if (F0B) {
                        x0B.trigger('change');
                    }
                }
            }
            var e0B, x0B, M0B, z0B, X0B, E0B, Z0B, f0B, a0B, h0B, D0B, d0B, P0B = this;
            y2.call(this, m0B, w0B, true);
            P0B._display = function(G0B) {
                d0B = h0B && a0B.returnAffix ? h0B.replace(/\{value\}/, G0B).replace(/\{max\}/, f0B) : G0B;
                if (X0B) {
                    X0B.html(d0B);
                }
                if (e0B) {
                    e0B.html(d0B);
                }
            };
            P0B._attachChange = function() {
                x0B.on('change', i0B);
            };
            P0B.__init = function(R0B) {
                var y0B, j0B, B0B, L0B;
                a0B = P0B.settings;
                x0B = M2(m0B);
                L0B = !!M0B;
                M0B = P0B._$parent;
                Z0B = P0B._min = R0B.min === undefined ? N0B('min', a0B.min) : R0B.min;
                f0B = P0B._max = R0B.max === undefined ? N0B('max', a0B.max) : R0B.max;
                D0B = N0B('value', Z0B);
                y0B = x0B.attr('data-val') || a0B.val;
                B0B = x0B.attr('data-step-labels');
                B0B = B0B ? JSON.parse(B0B) : a0B.stepLabels;
                h0B = x0B.attr('data-template') || (f0B == 100 && !a0B.template ? '{value}%' : a0B.template);
                if (!L0B) {
                    o8(M0B);
                    F8(x0B);
                    M0B.find('.mbsc-input-wrap').append('<span class="mbsc-progress-cont"><span class="mbsc-progress-track mbsc-progress-anim"><span class="mbsc-progress-bar"></span></span></span>');
                    z0B = P0B._$progress = M0B.find('.mbsc-progress-bar');
                    E0B = P0B._$track = M0B.find('.mbsc-progress-track');
                } else {
                    if (y0B) {
                        e0B.remove();
                        M0B.removeClass('mbsc-progress-value-' + (y0B == 'right' ? 'right' : 'left'));
                    }
                    if (B0B) {
                        M2('.mbsc-progress-step-label', E0B).remove();
                    }
                }
                x0B.attr('min', Z0B).attr('max', f0B);
                if (y0B) {
                    e0B = M2('<span class="mbsc-progress-value"></span>');
                    M0B.addClass('mbsc-progress-value-' + (y0B == 'right' ? 'right' : 'left')).find('.mbsc-input-wrap').append(e0B);
                }
                if (B0B) {
                    for (j0B = 0; j0B < B0B.length; ++j0B) {
                        E0B.append('<span class="mbsc-progress-step-label" style="' + (a0B.rtl ? 'right' : 'left') + ': ' + (B0B[j0B] - Z0B) * 100 / (f0B - Z0B) + '%" >' + B0B[j0B] + '</span>');
                    }
                }
                X0B = M2(x0B.attr('data-target') || a0B.target);
            };
            P0B.__destroy = function() {
                M0B.find('.mbsc-progress-cont').remove();
                M0B.find('.mbsc-input-wrap').before(x0B).remove();
                x0B.off('change', i0B);
            };
            P0B.refresh = function() {
                l0B(N0B('value', Z0B), true, false);
            };
            P0B.getVal = function() {
                return D0B;
            };
            P0B.setVal = function(W0B, A0B, O0B) {
                l0B(W0B, true, A0B, O0B);
            };
            if (!C0B) {
                P0B.init(w0B);
            }
        };
        g2.prototype = {
            _class: 'progress',
            _css: 'mbsc-progress',
            _hasTheme: true,
            _hasLang: true,
            _defaults: {
                min: 0,
                max: 100,
                returnAffix: true
            }
        };
        J.classes.Progress = g2;
        J.presetShort('progress', 'Progress');
        var Y2 = function Y0B() {};
        var Y = J.$;
        var v3 = J.util;
        var U6 = v3.getCoord;
        var H1 = v3.testTouch;
        var g3 = function c0B(l4B, V4B, W4B) {
            function H4B(A4B) {
                if (H1(A4B, this) && !I4B && !l4B.disabled) {
                    if (g4B.stopProp) {
                        A4B.stopPropagation();
                    }
                    I4B = true;
                    x4B = false;
                    E4B = false;
                    m4B = U6(A4B, 'X');
                    o4B = U6(A4B, 'Y');
                    q4B = m4B;
                    Q4B.removeClass('mbsc-progress-anim');
                    X4B = r4B ? Y('.mbsc-slider-handle', this) : t4B;
                    if (f4B) {
                        f4B.removeClass('mbsc-handle-curr');
                    }
                    f4B = X4B.parent().addClass('mbsc-active mbsc-handle-curr');
                    U0B = +X4B.attr('data-index');
                    C4B = Q4B[0].offsetWidth;
                    z4B = Q4B[0].getBoundingClientRect().left;
                    if (A4B.type === 'mousedown') {
                        A4B.preventDefault();
                        Y(document).on('mousemove', N4B).on('mouseup', Z4B);
                    }
                }
            }

            function N4B(O4B) {
                if (I4B) {
                    q4B = U6(O4B, 'X');
                    y4B = U6(O4B, 'Y');
                    S4B = q4B - m4B;
                    j4B = y4B - o4B;
                    if (Math.abs(S4B) > 5 || x4B) {
                        x4B = true;
                        if (Math.abs(i4B - new Date()) > 50) {
                            i4B = new Date();
                            R4B(q4B, g4B.round, p4B);
                        }
                    }
                    if (x4B) {
                        O4B.preventDefault();
                    } else if (Math.abs(j4B) > 7) {
                        d4B(O4B);
                    }
                }
            }

            function Z4B(Y4B) {
                if (I4B) {
                    Y4B.preventDefault();
                    if (!r4B) {
                        Q4B.addClass('mbsc-progress-anim');
                    }
                    R4B(q4B, true, true);
                    if (!x4B && !E4B) {
                        if (Y4B.type == 'touchend') {
                            v3.preventClick();
                        }
                        n0B._onTap(u0B[U0B]);
                    }
                    d4B();
                }
            }

            function K4B() {
                if (I4B) {
                    d4B();
                }
            }

            function F4B() {
                var c4B = n0B._readValue(Y(this)),
                    n4B = +Y(this).attr('data-index');
                if (c4B !== u0B[n4B]) {
                    u0B[n4B] = c4B;
                    v4B(c4B, n4B);
                }
            }

            function k4B(u4B) {
                u4B.stopPropagation();
            }

            function G4B(s4B) {
                s4B.preventDefault();
            }

            function B4B(b7B) {
                var U4B;
                if (!l4B.disabled) {
                    switch (b7B.keyCode) {
                        case 38:
                        case 39:
                            U4B = 1;
                            break;
                        case 40:
                        case 37:
                            U4B = -1;
                            break;
                    }
                    if (U4B) {
                        b7B.preventDefault();
                        if (!a4B) {
                            U0B = +Y(this).attr('data-index');
                            v4B(u0B[U0B] + J4B * U4B, U0B, true);
                            a4B = setInterval(function() {
                                v4B(u0B[U0B] + J4B * U4B, U0B, true);
                            }, 200);
                        }
                    }
                }
            }

            function M4B(J7B) {
                J7B.preventDefault();
                clearInterval(a4B);
                a4B = null;
            }

            function d4B() {
                I4B = false;
                f4B.removeClass('mbsc-active');
                Y(document).off('mousemove', N4B).off('mouseup', Z4B);
            }

            function R4B(r7B, v7B, T7B) {
                var t7B = v7B ? Math.min(Math.round(Math.max((r7B - z4B) * 100 / C4B, 0) / h4B / J4B) * J4B * 100 / (P4B - s0B), 100) : Math.max(0, Math.min((r7B - z4B) * 100 / C4B, 100));
                if (D4B) {
                    t7B = 100 - t7B;
                }
                v4B(Math.round((s0B + t7B / h4B) * e4B) / e4B, U0B, T7B, t7B);
            }

            function L4B(g7B) {
                return (g7B - s0B) * 100 / (P4B - s0B);
            }

            function v4B(I7B, Q7B, M7B, P7B, a7B, x7B) {
                var Z7B = t4B.eq(Q7B),
                    q7B = Z7B.parent();
                I7B = Math.min(P4B, Math.max(I7B, s0B));
                if (x7B === undefined) {
                    x7B = M7B;
                }
                if (n0B._update) {
                    n0B._update(I7B, u0B, Q7B, P7B, r4B, a7B, q7B);
                } else {
                    q7B.css({
                        left: D4B ? 'auto' : (P7B || L4B(I7B)) + '%',
                        right: D4B ? (P7B || L4B(I7B)) + '%' : 'auto'
                    });
                }
                if (I7B > s0B) {
                    q7B.removeClass('mbsc-slider-start');
                } else if (u0B[Q7B] > s0B || a7B) {
                    q7B.addClass('mbsc-slider-start');
                }
                if (M7B && u0B[Q7B] != I7B) {
                    E4B = true;
                    u0B[Q7B] = I7B;
                    n0B._fillValue(I7B, Q7B, x7B);
                }
                Z7B.attr('aria-valuenow', I7B);
            }
            var b4B, X4B, f4B, t4B, w4B, T4B, Q4B, I4B, E4B, S4B, j4B, z4B, q4B, y4B, U0B, D4B, p4B, P4B, s0B, x4B, r4B, J4B, g4B, h4B, m4B, o4B, e4B, a4B, C4B, u0B, n0B = this,
                i4B = new Date();
            y2.call(this, l4B, V4B, true);
            n0B._onTap = Y2;
            n0B.___init = Y2;
            n0B.___destroy = Y2;
            n0B._attachChange = function() {
                b4B.on(g4B.changeEvent, F4B);
            };
            n0B.__init = function(f7B) {
                var D7B;
                if (t4B) {
                    D7B = true;
                    t4B.parent().remove();
                }
                n0B.___init(f7B);
                T4B = n0B._$parent;
                Q4B = n0B._$track;
                b4B = T4B.find('input');
                g4B = n0B.settings;
                s0B = n0B._min;
                P4B = n0B._max;

                J4B = n0B._step;
                p4B = n0B._live;
                e4B = J4B % 1 !== 0 ? 100 / (+(J4B % 1).toFixed(2) * 100) : 1;
                h4B = 100 / (P4B - s0B) || 100;
                r4B = b4B.length > 1;
                D4B = g4B.rtl;
                u0B = [];
                b4B.each(function(N7B) {
                    u0B[N7B] = n0B._readValue(Y(this));
                    Y(this).attr('data-index', N7B);
                });
                t4B = T4B.find('.mbsc-slider-handle');
                w4B = T4B.find(r4B ? '.mbsc-slider-handle-cont' : '.mbsc-progress-cont');
                t4B.on('keydown', B4B).on('keyup', M4B).on('blur', M4B);
                w4B.on('touchstart mousedown', H4B).on('touchmove', N4B).on('touchend touchcancel', Z4B).on('pointercancel', K4B);
                if (!D7B) {
                    b4B.on('click', k4B);
                    T4B.on('click', G4B);
                }
            };
            n0B.__destroy = function() {
                T4B.off('click', G4B);
                b4B.off(g4B.changeEvent, F4B).off('click', k4B);
                t4B.off('keydown', B4B).off('keyup', M4B).off('blur', M4B);
                w4B.off('touchstart mousedown', H4B).off('touchmove', N4B).off('touchend touchcancel', Z4B).off('pointercancel', K4B);
                n0B.___destroy();
            };
            n0B.refresh = function() {
                b4B.each(function(e7B) {
                    v4B(n0B._readValue(Y(this)), e7B, true, false, true, false);
                });
            };
            n0B.getVal = function() {
                return r4B ? u0B.slice(0) : u0B[0];
            };
            n0B.setVal = n0B._setVal = function(E7B, d7B, l7B) {
                if (!Y.isArray(E7B)) {
                    E7B = [E7B];
                }
                Y.each(E7B, function(X7B, h7B) {
                    v4B(h7B, X7B, true, false, true, l7B);
                });
            };
            if (!W4B) {
                n0B.init(V4B);
            }
        };
        g3.prototype = {
            _class: 'sliderbase'
        };
        var Y3 = J.$;
        var k2 = function m7B(R7B, y7B, c7B) {
            function i7B(n7B) {
                return (n7B - k7B) * 100 / (o7B - k7B);
            }

            function B7B(s7B, U7B) {
                var u7B = w7B.attr(s7B);
                return u7B === undefined || u7B === '' ? U7B : u7B === 'true';
            }
            var w7B, H7B, K7B, W7B, S7B, F7B, G7B, j7B, C7B, o7B, k7B, p7B, V7B, z7B = this;
            g2.call(this, R7B, y7B, true);
            var O7B = z7B.__init,
                Y7B = z7B.__destroy;
            g3.call(this, R7B, y7B, true);
            var A7B = z7B.__init,
                L7B = z7B.__destroy;
            z7B.__init = function(b6z) {
                O7B(b6z);
                A7B(b6z);
            };
            z7B.__destroy = function() {
                Y7B();
                L7B();
            };
            z7B._update = function(J6z, t6z, r6z, v6z, T6z, g6z, I6z) {
                if (j7B) {
                    if (r6z === 0) {
                        J6z = Math.min(J6z, t6z[1]);
                        K7B.css({
                            width: i7B(t6z[1]) - i7B(J6z) + '%',
                            left: C7B ? 'auto' : i7B(J6z) + '%',
                            right: C7B ? i7B(J6z) + '%' : 'auto'
                        });
                    } else {
                        J6z = Math.max(J6z, t6z[0]);
                        K7B.css({
                            width: i7B(J6z) - i7B(t6z[0]) + '%'
                        });
                    }
                } else if (T6z || !F7B) {
                    I6z.css({
                        left: C7B ? 'auto' : (v6z || i7B(J6z)) + '%',
                        right: C7B ? (v6z || i7B(J6z)) + '%' : 'auto'
                    });
                } else {
                    K7B.css('width', (v6z || i7B(J6z)) + '%');
                }
                if (G7B) {
                    W7B.eq(r6z).html(J6z);
                }
                if (!T6z && (t6z[r6z] != J6z || g6z)) {
                    z7B._display(J6z);
                }
            };
            z7B._readValue = function(Q6z) {
                return +Q6z.val();
            };
            z7B._fillValue = function(P6z, q6z, x6z) {
                w7B.eq(q6z).val(P6z);
                if (x6z) {
                    w7B.eq(q6z).trigger('change');
                }
            };
            z7B.___init = function(a6z) {
                var Z6z, M6z;
                if (H7B) {
                    H7B.removeClass('mbsc-slider-has-tooltip');
                    if (p7B != 1) {
                        Y3('.mbsc-slider-step', S7B).remove();
                    }
                }
                H7B = z7B._$parent;
                S7B = z7B._$track;
                K7B = z7B._$progress;
                w7B = H7B.find('input');
                V7B = z7B.settings;
                k7B = z7B._min;
                o7B = z7B._max;
                z7B._step = p7B = a6z.step === undefined ? +w7B.attr('step') || V7B.step : a6z.step;
                z7B._live = B7B('data-live', V7B.live);
                G7B = B7B('data-tooltip', V7B.tooltip);
                F7B = B7B('data-highlight', V7B.highlight) && w7B.length < 3;
                j7B = F7B && w7B.length == 2;
                C7B = V7B.rtl;
                if (G7B) {
                    H7B.addClass('mbsc-slider-has-tooltip');
                }
                if (p7B != 1) {
                    M6z = (o7B - k7B) / p7B;
                    for (Z6z = 0; Z6z <= M6z; ++Z6z) {
                        S7B.append('<span class="mbsc-slider-step" style="' + (C7B ? 'right' : 'left') + ':' + 100 / M6z * Z6z + '%"></span>');
                    }
                }
                w7B.each(function(D6z) {
                    if (this.type == 'range') {
                        Y3(this).attr('min', k7B).attr('max', o7B).attr('step', p7B);
                    }(F7B ? K7B : S7B).append('<span class="mbsc-slider-handle-cont' + (j7B && !D6z ? ' mbsc-slider-handle-left' : '') + '">' + '<span tabindex="0" class="mbsc-slider-handle" aria-valuemin="' + k7B + '" aria-valuemax="' + o7B + '" data-index="' + D6z + '"></span>' + (G7B ? '<span class="mbsc-slider-tooltip"></span>' : '') + '</span>');
                });
                W7B = H7B.find('.mbsc-slider-tooltip');
            };
            if (!c7B) {
                z7B.init(y7B);
            }
        };
        k2.prototype = {
            _class: 'progress',
            _css: 'mbsc-progress mbsc-slider',
            _hasTheme: true,
            _hasLang: true,
            _defaults: {
                changeEvent: 'change',
                stopProp: true,
                min: 0,
                max: 100,
                step: 1,
                live: true,
                highlight: true,
                round: true,
                returnAffix: true
            }
        };
        J.classes.Slider = k2;
        J.presetShort('slider', 'Slider');
        var X = J.$;
        var K2 = J.util;
        var T1 = function f6z() {};
        var M6 = J.classes;
        M6.Color = function(j2z, s2z, M3z) {
            function O2z(f3z, D3z, e3z, E3z, N3z) {
                if (!N3z) {
                    f2z._value = f2z._hasValue ? f2z._tempValue.slice(0) : null;
                    for (var a3z = 0; a3z < N2z.length; ++a3z) {
                        if (N2z[a3z].tempChangedColor && f2z._value && f2z._value.indexOf(N2z[a3z].tempChangedColor) != -1) {
                            N2z[a3z].changedColor = N2z[a3z].tempChangedColor;
                        }
                        delete N2z[a3z].tempChangedColor;
                    }
                }
                if (f3z) {
                    if (f2z._isInput) {
                        C2z.val(f2z._hasValue ? f2z._tempValue : '');
                    }
                    G2z('onFill', {
                        valueText: f2z._hasValue ? f2z._tempValue : '',
                        change: D3z
                    });
                    if (D3z) {
                        m2z = X.extend(true, {}, l2z);
                        f2z._preventChange = true;
                        C2z.trigger('change');
                        v3z(f2z._value);
                    }
                }
            }

            function J3z(d3z, l3z) {
                l3z = l3z !== undefined ? l3z : Y2z(d3z);
                return '<div class="mbsc-color-input-item" data-color="' + (l3z !== undefined ? l3z : d3z) + '" style="background: ' + d3z + ';">' + (X2z ? '' : '<div class="mbsc-color-input-item-close mbsc-ic mbsc-ic-material-close"></div>') + '</div>';
            }

            function t3z(X3z) {
                r3z[0].style.background = X3z ? K2.prefix + 'linear-gradient(left, ' + (e2z.rtl ? '#000000' : '#FFFFFF') + ' 0%, ' + X3z + ' 50%, ' + (e2z.rtl ? '#FFFFFF' : '#000000') + ' 100%)' : '';
            }

            function Y2z(h3z) {
                if (Object.keys(l2z).length && !isNaN(h3z)) {
                    return h3z;
                }
                for (var m3z in N2z) {
                    if (h3z == N2z[m3z].color || h3z == N2z[m3z].changedColor) {
                        return m3z;
                    }
                }
            }

            function q3z() {
                if (y2z) {
                    var z3z, i3z = '';
                    V2z.empty();
                    if (f2z._value) {
                        if (X2z) {
                            i3z += J3z(f2z._value, E2z);
                        } else {
                            for (z3z = 0; z3z < f2z._value.length; ++z3z) {
                                i3z += J3z(f2z._value[z3z], Object.keys(l2z).length && l2z[z3z].colorIndex ? l2z[z3z].colorIndex : Y2z(f2z._value[z3z]));
                            }
                        }
                        V2z.append(i3z);
                        f2z.tap(X('.mbsc-color-input-item', V2z), function(w3z) {
                            if (X(w3z.target).hasClass('mbsc-color-input-item-close')) {
                                var C3z = X(this).index();
                                w3z.stopPropagation();
                                w3z.preventDefault();
                                if (E2z === undefined) {
                                    E2z = X(w3z.target).parent().attr('data-color');
                                }
                                if (h2z) {
                                    d2z = N2z[E2z].previewInd;
                                    i2z.eq(d2z).parent().removeClass('mbsc-color-active');
                                    m2z[C3z] = {};
                                    l2z[C3z] = {};
                                }
                                f2z._value.splice(C3z, 1);
                                f2z.setVal(f2z._value, true, true);
                            } else if (H2z && e2z.display !== 'inline') {
                                P3z = true;
                                E2z = X(w3z.target).attr('data-color');
                                if (isNaN(E2z)) {
                                    E2z = Y2z(E2z);
                                }
                                if (E2z) {
                                    N2z[E2z].selected = true;
                                    d2z = N2z[E2z].previewInd;
                                    setTimeout(function() {
                                        K2z.scroll(k2z.eq(E2z), 400);
                                        if (h2z) {
                                            p2z.scroll(i2z.eq(d2z), 400);
                                        }
                                    }, 200);
                                }
                            }
                        });
                    }
                }
            }

            function R2z(k3z, o3z) {
                var H3z, V3z = k3z.match(/\d+/gmi);
                switch (true) {
                    case k3z.indexOf('rgb') > -1:
                        H3z = G2({
                            r: V3z[0],
                            g: V3z[1],
                            b: V3z[2]
                        });
                        break;
                    case k3z.indexOf('hsl') > -1:
                        H3z = d9({
                            h: V3z[0],
                            s: V3z[1],
                            l: V3z[2]
                        });
                        break;
                    case k3z.indexOf('hsv') > -1:
                        H3z = l8({
                            h: V3z[0],
                            s: V3z[1],
                            v: V3z[2]
                        });
                        break;
                    case k3z.indexOf('#') > -1:
                        H3z = k3z;
                        break;
                }
                return Q3z(H3z, o3z || e2z.format);
            }

            function Q3z(p3z, K3z) {
                switch (K3z) {
                    case 'rgb':
                        return B2(p3z);
                    case 'hsl':
                        return m8(p3z);
                    case 'hsv':
                        return N8(p3z);
                    default:
                        return p3z;
                }
            }

            function I3z() {
                var F3z;
                for (F3z = 0; F3z < e2z.select; ++F3z) {
                    if (l2z[F3z].colorIndex === undefined) {
                        return F3z;
                    }
                }
            }

            function A2z(S3z, G3z) {
                X('.mbsc-color-active', G3z).removeClass('mbsc-color-active');
                if (H2z) {
                    S3z.parent().addClass('mbsc-color-active');
                    if (h2z && S3z) {
                        if (d2z !== undefined) {
                            i2z.eq(d2z).parent().addClass('mbsc-color-active');
                        }
                    }
                }
            }

            function v3z(j3z, Y3z) {
                var B3z, R3z, y3z = [],
                    A3z = 0,
                    L3z = X.map(N2z, function(c3z) {
                        return c3z.changedColor || c3z.color;
                    });
                if (X2z) {
                    j3z = X.isArray(j3z) ? j3z[0] : j3z;
                    R3z = L3z.indexOf(j3z);
                    if (R3z > -1) {
                        y3z.push(R3z);
                    }
                    if (j3z && !y3z.length) {
                        var W3z = +X('.mbsc-color-input-item', V2z).attr('data-color');
                        if (!isNaN(W3z)) {
                            y3z.push(W3z);
                        }
                        E2z = W3z;
                    }
                } else if (j3z) {
                    if (h2z && H2z) {
                        for (var O3z in m2z) {
                            if (m2z[O3z].colorIndex !== undefined) {
                                y3z.push(+m2z[O3z].colorIndex);
                            }
                        }
                    } else {
                        for (B3z = 0; B3z < j3z.length; ++B3z) {
                            R3z = L3z.indexOf(j3z[B3z]);
                            if (R3z > -1) {
                                y3z.push(R3z);
                                L3z[R3z] = 'temp' + B3z;
                            }
                        }
                    }
                }
                for (B3z = 0; B3z < y3z.length; ++B3z) {
                    L2z(true, y3z[B3z], A3z++, N2z[y3z[B3z]].changedColor || N2z[y3z[B3z]].color, true);
                }
                for (B3z = 0; B3z < N2z.length; ++B3z) {
                    if (y3z.indexOf(B3z) == -1) {
                        L2z(false, B3z, undefined, N2z[B3z].changedColor || N2z[B3z].color, false);
                    }
                }
                if (h2z) {
                    for (B3z = A3z; B3z < e2z.select; ++B3z) {
                        l2z[B3z] = {};
                        if (i2z) {
                            i2z.eq(B3z).addClass('mbsc-color-preview-item-empty').css({
                                background: 'transparent'
                            });
                        }
                    }
                }
                m2z = X.extend(true, {}, l2z);
                if (Y3z !== false) {
                    q3z();
                }
            }

            function L2z(n3z, u3z, s3z, U3z, J1z, t1z) {
                if (h2z && J1z) {
                    l2z[s3z].colorIndex = n3z ? u3z : undefined;
                    l2z[s3z].color = n3z ? U3z : undefined;
                    if (i2z) {
                        var b1z = i2z.eq(s3z);
                        b1z.removeClass('mbsc-color-preview-item-empty').css({
                            background: n3z ? U3z : 'transparent'
                        });
                        if (!n3z) {
                            b1z.addClass('mbsc-color-preview-item-empty').parent().removeClass('mbsc-color-active');
                        }
                    }
                }
                if (t1z) {
                    if (n3z) {
                        f2z._tempValue.splice(s3z, 0, U3z);
                    } else {
                        f2z._tempValue.splice(f2z._tempValue.indexOf(U3z), 1);
                    }
                }
                if (k2z) {
                    if (n3z) {
                        k2z.eq(u3z).addClass('mbsc-color-selected');
                    } else {
                        k2z.eq(u3z).removeClass('mbsc-color-selected').parent().removeClass('mbsc-color-active');
                    }
                }
                N2z[u3z].previewInd = n3z ? s3z : undefined;
                N2z[u3z].selected = n3z;
            }

            function c2z(r1z, v1z) {
                if (r1z !== undefined && (X2z || N2z[r1z].selected)) {
                    E2z = r1z;
                    w2z = N2z[r1z].changedColor || N2z[r1z].color;
                    z2z = k2z.eq(r1z);
                    if (H2z) {
                        A2z(k2z.eq(r1z), v1z || '');
                        S2z = R2z(N2z[r1z].color, 'hsl');
                        S2z.l = R2z(w2z, 'hsl').l;
                        t3z(N2z[r1z].color);
                        B2z.setVal(100 - S2z.l, false, false);
                    }
                } else if (H2z) {
                    t3z();
                }
            }

            function Z3z() {
                var T1z, g1z = [];
                for (T1z = 0; T1z < N2z.length; ++T1z) {
                    if (N2z[T1z].selected) {
                        g1z.push(N2z[T1z]);
                    }
                }
                return g1z;
            }

            function U2z(Q1z, q1z) {
                var I1z = X(Q1z.target).index();
                E2z = l2z[I1z].colorIndex;
                z2z = k2z.eq(E2z);
                d2z = I1z;
                c2z(E2z, q1z);
                K2z.scroll(z2z, 250);
                G2z('onPreviewItemTap', {
                    target: Q1z.target,
                    value: l2z[I1z].color,
                    index: I1z
                });
            }

            function b3z(M1z, P1z) {
                var x1z = false,
                    Z1z = X('.mbsc-color-selected', P1z);
                z2z = X(M1z.target);
                if (z2z.hasClass('mbsc-color-clear-item')) {
                    w2z = '';
                    f2z.clear();
                    return;
                }
                if ((X2z || T3z > +Z1z.length || z2z.hasClass('mbsc-color-selected'))) {
                    E2z = z2z.attr('data-index');
                    if (h2z) {
                        d2z = N2z[E2z].previewInd !== undefined ? N2z[E2z].previewInd : I3z();
                        x1z = H2z && z2z.hasClass('mbsc-color-selected') && !z2z.parent().hasClass('mbsc-color-active');
                        if (i2z.length > 6) {
                            p2z.scroll(i2z.eq(d2z));
                        }
                    }
                    w2z = N2z[E2z].changedColor || N2z[E2z].color;
                    if (X2z) {
                        Z1z.removeClass('mbsc-color-selected');
                        f2z._tempValue = w2z;
                        if (w2z) {
                            z2z.toggleClass('mbsc-color-selected');
                        }
                        A2z(z2z, P1z);
                    } else {
                        A2z(z2z, P1z);
                        if (!x1z) {
                            L2z(!N2z[E2z].selected, E2z, d2z, w2z, true, true);
                        }
                    }
                    c2z(E2z, P1z);
                    if (f2z.live) {
                        f2z._fillValue();
                        G2z('onSet', {
                            value: f2z._value
                        });
                    }
                    G2z('onItemTap', {
                        target: M1z.target,
                        value: w2z,
                        selected: N2z[E2z].selected,
                        index: E2z
                    });
                }
            }
            var e2z, g3z, N2z, x3z, G2z, K2z, p2z, F2z, w2z, S2z, P3z, o2z, h2z, r3z, H2z, u2z, B2z, E2z, y2z, X2z, T3z, n2z, V2z, k2z, i2z, z2z, W2z, f2z = this,
                C2z = X(j2z),
                d2z = 0,
                m2z = {},
                l2z = {};
            M6.Frame.call(this, j2z, s2z, true);
            f2z.setVal = f2z._setVal = function(a1z, D1z, f1z, N1z) {
                f2z._hasValue = a1z !== null && a1z !== undefined;
                f2z._tempValue = X2z ? X.isArray(a1z) ? a1z[0] : a1z : X.isArray(a1z) ? a1z : [a1z];
                O2z(D1z, true, f1z === undefined ? D1z : f1z, N1z);
            };
            f2z.getVal = f2z._getVal = function(e1z) {
                return f2z._hasValue || e1z ? n2z ? Z3z() : f2z[e1z ? '_tempValue' : '_value'] : null;
            };
            f2z._readValue = function() {
                var E1z = C2z.val() || '';
                f2z._hasValue = false;
                if (E1z.length !== 0 && E1z !== '') {
                    f2z._hasValue = true;
                }
                if (f2z._hasValue) {
                    f2z._tempValue = X2z ? E1z : e2z.format == 'hex' ? E1z.split(',') : E1z.match(/[a-z]{3}\((\d+\.?\d{0,}?),\s*([\d.]+)%{0,},\s*([\d.]+)%{0,}\)/gmi);
                    O2z(true);
                } else {
                    f2z._tempValue = [];
                }
                v3z(f2z._tempValue, f2z._hasValue);
            };
            f2z._fillValue = function() {
                f2z._hasValue = true;
                O2z(true, true, 0, true);
            };
            f2z._generateContent = function() {
                var l1z, d1z, m1z, X1z = F2z ? 1 : 0;
                u2z = o2z ? Math.ceil((N2z.length + X1z) / e2z.rows) : e2z.rows;
                d1z = '<div class="mbsc-color-scroll-cont mbsc-w-p ' + (o2z ? '' : 'mbsc-color-vertical') + '"><div class="mbsc-color-cont">' + (o2z ? '<div class="mbsc-color-row">' : '');
                for (l1z = 0; l1z < N2z.length; ++l1z) {
                    m1z = N2z[l1z].changedColor || N2z[l1z].color;
                    if (F2z && l1z === 0) {
                        d1z += '<div class="mbsc-color-item-c"><div tabindex="0" class="mbsc-color-clear-item mbsc-btn-e mbsc-color-selected"><div class="mbsc-color-clear-cross"></div></div></div>';
                    }
                    if (l1z !== 0 && (l1z + X1z) % u2z === 0) {
                        d1z += o2z ? '</div><div class="mbsc-color-row">' : '';
                    }
                    d1z += '<div class="mbsc-color-item-c"><div tabindex="0" data-index="' + l1z + '" class="mbsc-color-item mbsc-btn-e mbsc-ic mbsc-ic-material-check mbsc-color-btn-e ' + (N2z[l1z].selected ? 'mbsc-color-selected' : '') + '"  style="background:' + m1z + '"></div></div>';
                }
                d1z += '</div></div>' + (o2z ? '</div>' : '');
                if (H2z) {
                    d1z += '<div class="mbsc-color-slider-cont"><input class="mbsc-color-slider" type="range" data-highlight="false" value="50" min="0" max="100"/></div>';
                }
                if (h2z) {
                    d1z += '<div class="mbsc-color-preview-cont"><div class="mbsc-color-refine-preview">';
                    for (var h1z in m2z) {
                        d1z += '<div class="mbsc-color-preview-item-c mbsc-btn-e mbsc-color-btn-e" tabindex="0"><div class="mbsc-color-preview-item ' + (m2z[h1z].color ? '' : 'mbsc-color-preview-item-empty') + '" style="background: ' + (m2z[h1z].color || 'initial') + ';"></div></div>';
                    }
                    d1z += '</div></div>';
                }
                return d1z;
            };
            f2z._position = function(w1z) {
                var z1z, i1z;
                if (!o2z) {
                    z1z = w1z.find('.mbsc-color-cont');
                    i1z = Math.ceil(z1z.find('.mbsc-color-item-c')[0].offsetWidth);
                    z1z.width(Math.min(Math.floor(w1z.find('.mbsc-fr-c').width() / i1z), Math.round(N2z.length / e2z.rows)) * i1z + 1);
                }
                if (K2z) {
                    K2z.refresh();
                }
                if (p2z) {
                    p2z.refresh();
                }
            };
            f2z._markupInserted = function(C1z) {
                if (!o2z) {
                    C1z.find('.mbsc-color-scroll-cont').css('max-height', C1z.find('.mbsc-color-item-c')[0].offsetHeight * e2z.rows);
                }
                K2z = new M6.ScrollView(C1z.find('.mbsc-color-scroll-cont')[0], {
                    axis: o2z ? 'X' : 'Y',
                    rtl: e2z.rtl,
                    elastic: 60,
                    stopProp: false,
                    mousewheel: e2z.mousewheel,
                    onBtnTap: function V1z(k1z) {
                        b3z(k1z, C1z);
                    }
                });
            };
            f2z._attachEvents = function(H1z) {
                var o1z;
                k2z = X('.mbsc-color-item', H1z);
                H1z.on('keydown', '.mbsc-color-btn-e', function(p1z) {
                    p1z.stopPropagation();
                    if (p1z.keyCode == 32) {
                        if (p1z.target.classList.contains('mbsc-color-item')) {
                            b3z(p1z, H1z);
                        } else {
                            U2z(p1z, H1z);
                        }
                    }
                });
                if (h2z) {
                    i2z = X('.mbsc-color-preview-item', H1z);
                }
                if (H2z) {
                    H1z.addClass('mbsc-color-refine');
                    W2z = X('.mbsc-color-slider', H1z);
                    B2z = new M6.Slider(W2z[0], {
                        theme: e2z.theme,
                        rtl: e2z.rtl
                    });
                    r3z = H1z.find('.mbsc-progress-track');
                    if (E2z && f2z._value) {
                        c2z(E2z, H1z);
                    }
                    W2z.on('change', function() {
                        if (E2z !== undefined && (X2z || N2z[E2z].selected)) {
                            S2z.l = 100 - this.value;
                            o1z = R2z(S2z.toString()).toString();
                            if (X2z) {
                                f2z._tempValue = o1z;
                            } else {
                                f2z._tempValue[d2z !== undefined ? d2z : f2z._tempValue.length] = o1z;
                            }
                            N2z[E2z].tempChangedColor = o1z;
                            k2z.eq(E2z).css('background', o1z);
                            if (h2z) {
                                l2z[d2z].color = o1z;
                                i2z.eq(d2z).removeClass('mbsc-color-preview-item-empty').css({
                                    'background': o1z
                                });
                            }
                            if (f2z.live) {
                                K2.throttle(f2z._fillValue());
                            }
                        }
                    });
                }
                if (h2z) {
                    p2z = new M6.ScrollView(H1z.find('.mbsc-color-preview-cont')[0], {
                        axis: 'X',
                        rtl: e2z.rtl,
                        mousewheel: e2z.mousewheel,
                        onBtnTap: function K1z(F1z) {
                            U2z(F1z, H1z);
                        }
                    });
                }
            };
            f2z._detachEvents = function() {
                K2z.destroy();
                if (B2z) {
                    B2z.destroy();
                }
                if (p2z) {
                    p2z.destroy();
                }
            };
            f2z.__processSettings = function() {
                var S1z, G1z;
                e2z = f2z.settings;
                x3z = e2z.format;
                G2z = f2z.trigger;
                o2z = e2z.navigation == 'horizontal';
                f2z._value = [];
                f2z._tempValue = [];
                X2z = e2z.select == 'single';
                F2z = e2z.clear !== undefined ? e2z.clear : X2z;
                G1z = e2z.data || [];
                if (!G1z.length) {
                    switch (e2z.format) {
                        case 'rgb':
                            G1z = ["rgb(255,235,60)", "rgb(255,153,0)", "rgb(244,68,55)", "rgb(234,30,99)", "rgb(156,38,176)", "rgb(104,58,183)", "rgb(63,81,181)", "rgb(33,150,243)", "rgb(0,151,136)", "rgb(75,175,79)", "rgb(126,93,78)", "rgb(158,158,158)"];
                            if (F2z) {
                                G1z.splice(10, 0, 'rgb(83, 71, 65)');
                            }
                            break;
                        case 'hsl':
                            G1z = ["hsl(54,100%,62%)", "hsl(36,100%,50%)", "hsl(4,90%,59%)", "hsl(340,83%,52%)", "hsl(291,64%,42%)", "hsl(262,52%,47%)", "hsl(231,48%,48%)", "hsl(207,90%,54%)", "hsl(174,100%,30%)", "hsl(122,40%,49%)", "hsl(19,24%,40%)", "hsl(0,0%,62%)"];
                            if (F2z) {
                                G1z.splice(10, 0, 'hsl(20, 12%, 29%)');
                            }
                            break;
                        default:
                            G1z = ['#ffeb3c', '#ff9900', '#f44437', '#ea1e63', '#9c26b0', '#683ab7', '#3f51b5', '#2196f3', '#009788', '#4baf4f', '#7e5d4e', '#9e9e9e'];
                            if (F2z) {
                                G1z.splice(10, 0, '#534741');
                            }
                    }
                }
                H2z = e2z.mode == 'refine';
                h2z = !isNaN(e2z.select);
                T3z = isNaN(e2z.select) ? X2z ? 2 : G1z.length : e2z.select;
                n2z = X.isPlainObject(G1z[0]);
                if (h2z && !Object.keys(m2z).length) {
                    for (S1z = 0; S1z < e2z.select; ++S1z) {
                        m2z[S1z] = {};
                        l2z[S1z] = {};
                    }
                }
                if (!N2z) {
                    N2z = G1z.slice(0);
                    for (S1z = 0; S1z < N2z.length; ++S1z) {
                        if (!X.isPlainObject(G1z[S1z])) {
                            G1z[S1z] = G1z[S1z].toLowerCase();
                            N2z[S1z] = {
                                key: S1z,
                                name: G1z[S1z],
                                color: G1z[S1z]
                            };
                        } else {
                            N2z[S1z].color = G1z[S1z].color;
                        }
                    }
                }
                g3z = e2z.defaultValue || N2z[0].color;
                w2z = g3z;
                S2z = R2z(w2z, 'hsl');
                y2z = e2z.enhance && C2z.is('input');
                if (y2z) {
                    if (C2z.hasClass('mbsc-color-input-hdn')) {
                        V2z = C2z.prev();
                    } else {
                        V2z = X('<div ' + (j2z.placeholder ? 'data-placeholder="' + j2z.placeholder + '"' : '') + ' class="mbsc-control mbsc-color-input ' + (e2z.inputClass || '') + '" readonly ></div>');
                        V2z.insertBefore(C2z);
                        C2z.addClass('mbsc-color-input-hdn').attr('tabindex', -1);
                    }
                    e2z.anchor = V2z;
                    f2z.attachShow(V2z);
                }
            };
            f2z.__init = function() {
                e2z.cssClass = (e2z.cssClass || '') + ' mbsc-color';
            };
            f2z.__destroy = function() {
                if (y2z) {
                    C2z.removeClass('mbsc-color-input-hdn');
                    V2z.remove();
                }
            };
            if (!M3z) {
                f2z.init(s2z);
            }
        };
        M6.Color.prototype = {
            _hasDef: true,
            _hasTheme: true,
            _hasLang: true,
            _class: 'color',
            _defaults: X.extend({}, M6.Frame.prototype._defaults, {
                headerText: false,
                validate: T1,
                parseValue: T1,
                enhance: true,
                rows: 2,
                select: 'single',
                format: 'hex',
                navigation: 'horizontal'
            })
        };
        J.themes.color = J.themes.frame;
        J.presetShort('color', 'Color', false);
        K2.color = {
            hsv2hex: l8,
            hsv2rgb: V8,
            rgb2hsv: w8,
            rgb2hex: G2,
            rgb2hsl: i8,
            hex2rgb: B2,
            hex2hsv: N8,
            hex2hsl: m8
        };
        J.$.each(['date', 'time', 'datetime'], function(y1z, B1z) {
            J.presetShort(B1z);
        });
        var z = J.$;
        var I6 = z.extend;
        var f8 = J.util;
        var r2 = f8.datetime;
        var D8 = r2.adjustedDate;
        var Z3 = J.presets.scroller;
        var M8 = {
            labelsShort: ['Yrs', 'Mths', 'Days', 'Hrs', 'Mins', 'Secs'],
            eventText: 'event',
            eventsText: 'events'
        };
        J.presetShort('eventcalendar');
        Z3.eventcalendar = function(j1z) {
            function a8z(e8z) {
                if (e8z) {
                    if (U1z[e8z]) {
                        return U1z[e8z];
                    }
                    var E8z = z('<div style="background-color:' + e8z + ';"></div>').appendTo('body'),
                        X8z = window.getComputedStyle ? getComputedStyle(E8z[0]) : E8z[0].style,
                        l8z = X8z.backgroundColor.replace(/rgb|rgba|\(|\)|\s/g, '').split(','),
                        h8z = l8z[0] * 0.299 + l8z[1] * 0.587 + l8z[2] * 0.114,
                        d8z = h8z > 130 ? '#000' : '#fff';
                    E8z.remove();
                    U1z[e8z] = d8z;
                    return d8z;
                }
            }

            function D8z(k8z) {
                var m8z = R1z.labelsShort,
                    i8z = Math.abs(k8z) / 1000,
                    w8z = i8z / 60,
                    C8z = w8z / 60,
                    z8z = C8z / 24,
                    V8z = z8z / 365;
                return i8z < 45 && Math.round(i8z) + ' ' + m8z[5].toLowerCase() || w8z < 45 && Math.round(w8z) + ' ' + m8z[4].toLowerCase() || C8z < 24 && Math.round(C8z) + ' ' + m8z[3].toLowerCase() || z8z < 30 && Math.round(z8z) + ' ' + m8z[2].toLowerCase() || z8z < 365 && Math.round(z8z / 30) + ' ' + m8z[1].toLowerCase() || Math.round(V8z) + ' ' + m8z[0].toLowerCase();
            }

            function Z8z(H8z) {
                return H8z.sort(function(o8z, p8z) {
                    var K8z = o8z.d || o8z.start,
                        F8z = p8z.d || p8z.start,
                        S8z = !K8z.getTime ? 0 : o8z.start && o8z.end && o8z.start.toDateString() !== o8z.end.toDateString() ? 1 : K8z.getTime(),
                        G8z = !F8z.getTime ? 0 : p8z.start && p8z.end && p8z.start.toDateString() !== p8z.end.toDateString() ? 1 : F8z.getTime();
                    return S8z - G8z;
                });
            }

            function x8z(B8z) {
                var R8z, L8z = z('.mbsc-cal-c', Y1z)[0].offsetHeight,
                    W8z = B8z[0].offsetHeight,
                    A8z = B8z[0].offsetWidth,
                    j8z = B8z.offset().top - z('.mbsc-cal-c', Y1z).offset().top,
                    y8z = B8z.closest('.mbsc-cal-row').index() < 2;
                R8z = L1z.addClass('mbsc-cal-events-t').css({
                    top: y8z ? j8z + W8z : '0',
                    bottom: y8z ? '0' : L8z - j8z
                }).addClass('mbsc-cal-events-v').height();
                L1z.css(y8z ? 'bottom' : 'top', 'auto').removeClass('mbsc-cal-events-t');
                J8z.css('max-height', R8z);
                O1z.refresh();
                O1z.scroll(0);
                if (y8z) {
                    L1z.addClass('mbsc-cal-events-b');
                } else {
                    L1z.removeClass('mbsc-cal-events-b');
                }
                z('.mbsc-cal-events-arr', L1z).css('left', B8z.offset().left - L1z.offset().left + A8z / 2);
            }

            function M8z(J9z, b9z) {
                var O8z = n1z[J9z];
                if (O8z) {
                    var u8z, c8z, U8z, Y8z, s8z, t9z, n8z = '<ul class="mbsc-cal-event-list">';
                    N8z = 0;
                    A1z = b9z;
                    b9z.addClass(Q8z).find('.mbsc-cal-day-i').addClass(I8z);
                    if (b9z.hasClass(t8z)) {
                        b9z.attr('data-hl', 'true').removeClass(t8z);
                    }
                    Z8z(O8z);
                    z.each(O8z, function(v9z, r9z) {
                        Y8z = r9z.d || r9z.start;
                        s8z = r9z.start && r9z.end && r9z.start.toDateString() !== r9z.end.toDateString();
                        U8z = r9z.color;
                        t9z = a8z(U8z);
                        u8z = '';
                        c8z = '';
                        if (Y8z.getTime) {
                            u8z = r2.formatDate((s8z ? 'MM d yy ' : '') + R1z.timeFormat, Y8z);
                        }
                        if (r9z.end) {
                            c8z = r2.formatDate((s8z ? 'MM d yy ' : '') + R1z.timeFormat, r9z.end);
                        }
                        n8z += '<li role="button" aria-label="' + r9z.text + (u8z ? ', ' + R1z.fromText + ' ' + u8z : '') + (c8z ? ', ' + R1z.toText + ' ' + c8z : '') + '" class="mbsc-cal-event">' + '<div class="mbsc-cal-event-color" style="' + (U8z ? 'background:' + U8z + ';' : '') + '"></div>' + '<div class="mbsc-cal-event-text">' + (Y8z.getTime && !s8z ? '<div class="mbsc-cal-event-time">' + r2.formatDate(R1z.timeFormat, Y8z) + '</div>' : '') + r9z.text + '</div>' + (r9z.start && r9z.end ? '<div class="mbsc-cal-event-dur">' + D8z(r9z.end - r9z.start) + '</div>' : '') + '</li>';
                    });
                    n8z += '</ul>';
                    g8z.html(n8z);
                    j1z.trigger('onEventBubbleShow', {
                        target: A1z[0],
                        eventList: L1z[0]
                    });
                    x8z(A1z);
                    j1z.tap(z('.mbsc-cal-event', g8z), function(T9z) {
                        if (!O1z.scrolled) {
                            j1z.trigger('onEventSelect', {
                                domEvent: T9z,
                                event: O8z[z(this).index()],
                                date: J9z
                            });
                        }
                    });
                    r8z = true;
                }
            }

            function u1z() {
                if (L1z) {
                    L1z.removeClass('mbsc-cal-events-v');
                }
                if (A1z) {
                    A1z.removeClass(Q8z).find('.mbsc-cal-day-i').removeClass(I8z);
                    if (A1z.attr('data-hl')) {
                        A1z.removeAttr('data-hl').addClass(t8z);
                    }
                }
                r8z = false;
            }

            function T8z() {
                u1z();
                j1z.redraw();
            }

            function f8z(g9z) {
                return D8(g9z.getFullYear(), g9z.getMonth(), g9z.getDate());
            }
            var q8z, Y1z, L1z, A1z, n1z, O1z, J8z, g8z, r8z, N8z, v8z, s1z, U1z = {},
                P8z = I6({}, j1z.settings),
                R1z = I6(j1z.settings, M8, P8z),
                Q8z = 'mbsc-cal-day-sel mbsc-cal-day-ev',
                t8z = 'mbsc-cal-day-hl',
                I8z = R1z.activeClass || '',
                c1z = R1z.showEventCount,
                b8z = 0,
                W1z = I6(true, [], R1z.data);
            v8z = Z3.calbase.call(this, j1z);
            q8z = I6({}, v8z);
            z.each(W1z, function(Q9z, I9z) {
                if (I9z._id === undefined) {
                    I9z._id = b8z++;
                }
            });
            j1z.onGenMonth = function(q9z, P9z) {
                n1z = j1z.prepareObj(W1z, q9z, P9z);
            };
            j1z.getDayProps = function(f9z) {
                var Z9z, x9z = n1z[f9z] ? n1z[f9z] : false,
                    M9z = x9z ? n1z[f9z].length + ' ' + (n1z[f9z].length > 1 ? R1z.eventsText : R1z.eventText) : 0,
                    N9z = x9z && x9z[0] && x9z[0].color,
                    e9z = c1z && M9z ? a8z(N9z) : '',
                    a9z = '',
                    D9z = '';
                if (x9z) {
                    for (Z9z = 0; Z9z < x9z.length; Z9z++) {
                        if (x9z[Z9z].icon) {
                            a9z += '<span class="mbsc-ic mbsc-ic-' + x9z[Z9z].icon + '"' + (x9z[Z9z].text ? '' : x9z[Z9z].color ? ' style="color:' + x9z[Z9z].color + ';"' : '') + '></span>\n';
                        }
                    }
                    D9z = '<div class="mbsc-cal-day-m"><div class="mbsc-cal-day-m-t">';
                    for (Z9z = 0; Z9z < x9z.length; Z9z++) {
                        D9z += '<div class="mbsc-cal-day-m-c"' + (x9z[Z9z].color ? ' style="background:' + x9z[Z9z].color + ';"' : '') + '></div>';
                    }
                    D9z += '</div></div>';
                }
                return {
                    marked: x9z,
                    selected: false,
                    cssClass: x9z ? 'mbsc-cal-day-marked' : '',
                    ariaLabel: c1z ? M9z : '',
                    markup: c1z && M9z ? '<div class="mbsc-cal-day-txt-c"><div class="mbsc-cal-day-txt" title="' + z('<div>' + M9z + '</div>').text() + '"' + (N9z ? ' style="background:' + N9z + ';color:' + e9z + ';text-shadow:none;"' : '') + '>' + a9z + M9z + '</div></div>' : c1z && a9z ? '<div class="mbsc-cal-day-ic-c">' + a9z + '</div>' : x9z ? D9z : ''
                };
            };
            j1z.addEvent = function(E9z) {
                var l9z = [];
                E9z = I6(true, [], z.isArray(E9z) ? E9z : [E9z]);
                z.each(E9z, function(X9z, d9z) {
                    if (d9z._id === undefined) {
                        d9z._id = b8z++;
                    }
                    W1z.push(d9z);
                    l9z.push(d9z._id);
                });
                T8z();
                return l9z;
            };
            j1z.removeEvent = function(h9z) {
                h9z = z.isArray(h9z) ? h9z : [h9z];
                z.each(h9z, function(z9z, m9z) {
                    z.each(W1z, function(i9z, w9z) {
                        if (w9z._id === m9z) {
                            W1z.splice(i9z, 1);
                            return false;
                        }
                    });
                });
                T8z();
            };
            j1z.getEvents = function(C9z) {
                var V9z;
                if (C9z) {
                    C9z.setHours(0, 0, 0, 0);
                    V9z = j1z.prepareObj(W1z, C9z.getFullYear(), C9z.getMonth());
                    return V9z[C9z] ? Z8z(V9z[C9z]) : [];
                }
                return I6(true, [], W1z);
            };
            j1z.setEvents = function(H9z) {
                var k9z = [];
                W1z = I6(true, [], H9z);
                z.each(W1z, function(p9z, o9z) {
                    if (o9z._id === undefined) {
                        o9z._id = b8z++;
                    }
                    k9z.push(o9z._id);
                });
                T8z();
                return k9z;
            };
            I6(v8z, {
                highlight: false,
                outerMonthChange: false,
                headerText: false,
                buttons: R1z.display !== 'inline' ? ['close'] : R1z.buttons,
                onMarkupReady: function K9z(F9z) {
                    q8z.onMarkupReady.call(this, F9z);
                    Y1z = z(F9z.target);
                    if (c1z) {
                        z('.mbsc-cal', Y1z).addClass('mbsc-cal-ev');
                    }
                    Y1z.addClass('mbsc-cal-em');
                    L1z = z('<div class="mbsc-cal-events ' + (R1z.eventBubbleClass || '') + '"><div class="mbsc-cal-events-arr"></div><div class="mbsc-cal-events-i"><div class="mbsc-cal-events-sc"></div></div></div>').appendTo(z('.mbsc-cal-c', Y1z));
                    J8z = z('.mbsc-cal-events-i', L1z);
                    g8z = z('.mbsc-cal-events-sc', L1z);
                    O1z = new J.classes.ScrollView(J8z[0]);
                    r8z = false;
                    j1z.tap(J8z, function() {
                        if (!O1z.scrolled) {
                            u1z();
                        }
                    });
                },
                onMonthChange: function S9z() {
                    u1z();
                },
                onSelectShow: function G9z() {
                    u1z();
                },
                onMonthLoaded: function B9z() {
                    if (s1z) {
                        M8z(s1z.d, z('.mbsc-cal-day-v[data-full="' + s1z.full + '"]:not(.mbsc-cal-day-diff)', Y1z));
                        s1z = false;
                    }
                },
                onDayChange: function y9z(L9z) {
                    var W9z = L9z.date,
                        R9z = f8z(W9z),
                        j9z = z(L9z.target);
                    u1z();
                    if (!j9z.hasClass('mbsc-cal-day-ev')) {
                        setTimeout(function() {
                            if (j1z.changing) {
                                s1z = {
                                    d: R9z,
                                    full: j9z.attr('data-full')
                                };
                            } else {
                                M8z(R9z, j9z);
                            }
                        }, 10);
                    }
                    return false;
                },
                onCalResize: function A9z() {
                    if (r8z) {
                        x8z(A1z);
                    }
                },
                onHide: function O9z() {
                    q8z.onHide.call(j1z);
                    if (O1z) {
                        O1z.destroy();
                    }
                }
            });
            return v8z;
        };
        var Q6 = J.$;
        var S6 = J.classes;
        var f3 = function Y9z(U9z, b5z) {
            var n9z = '',
                s9z = Q6(U9z),
                u9z = this,
                c9z = u9z.settings;
            S6.Base.call(this, U9z, b5z, true);
            u9z._init = function() {
                var r5z = c9z.context,
                    J5z = Q6(r5z),
                    v5z = J5z.find('.mbsc-ms-top .mbsc-ms'),
                    T5z = J5z.find('.mbsc-ms-bottom .mbsc-ms'),
                    t5z = {};
                if (r5z == 'body') {
                    Q6('body,html').addClass('mbsc-page-ctx');
                } else {
                    J5z.addClass('mbsc-page-ctx');
                }
                if (n9z) {
                    s9z.removeClass(n9z);
                }
                if (v5z.length) {
                    t5z.paddingTop = v5z[0].offsetHeight;
                }
                if (T5z.length) {
                    t5z.paddingBottom = T5z[0].offsetHeight;
                }
                n9z = 'mbsc-page mbsc-' + c9z.theme + (c9z.baseTheme ? ' mbsc-' + c9z.baseTheme : '') + (c9z.rtl ? ' mbsc-rtl' : ' mbsc-ltr');
                s9z.addClass(n9z).css(t5z);
            };
            u9z._destroy = function() {
                s9z.removeClass(n9z);
            };
            c9z = u9z.settings;
            u9z.init(b5z);
        };
        f3.prototype = {
            _hasDef: true,
            _hasTheme: true,
            _hasLang: true,
            _class: 'page',
            _defaults: {
                context: 'body'
            }
        };
        S6.Page = f3;
        J.themes.page.mobiscroll = {};
        J.presetShort('page', 'Page');
        Q6(function() {
            var g5z = '[mbsc-page]';
            Q6(g5z).each(function() {
                new S6.Page(this);
            });
            Q6(document).on('mbsc-enhance', function(I5z, Q5z) {
                if (Q6(I5z.target).is(g5z)) {
                    new S6.Page(I5z.target, Q5z);
                } else {
                    Q6(g5z, I5z.target).each(function() {
                        new S6.Page(this, Q5z);
                    });
                }
            });
        });
        var Z6 = J.$;
        var C6 = function q5z(D5z, f5z, e5z) {
            function N5z(E5z) {
                if (!Z6('.mbsc-fr-c', E5z).hasClass('mbsc-wdg-c')) {
                    Z6('.mbsc-fr-c', E5z).addClass('mbsc-wdg-c').append(Z5z.show());
                    if (!Z6('.mbsc-w-p', E5z).length) {
                        Z6('.mbsc-fr-c', E5z).addClass('mbsc-w-p');
                    }
                }
            }
            var P5z, M5z, a5z, Z5z = Z6(D5z),
                x5z = this;
            x6.call(this, D5z, f5z, true);
            x5z._generateContent = function() {
                return '';
            };
            x5z._markupReady = function(l5z) {
                if (P5z.display != 'inline') {
                    N5z(l5z);
                }
            };
            x5z._markupInserted = function(d5z) {
                if (P5z.display == 'inline') {
                    N5z(d5z);
                }
                d5z.trigger('mbsc-enhance', [{
                    theme: P5z.theme,
                    lang: P5z.lang
                }]);
            };
            x5z._markupRemove = function() {
                Z5z.hide();
                if (M5z) {
                    M5z.prepend(Z5z);
                } else {
                    a5z.after(Z5z);
                }
            };
            x5z.__processSettings = function() {
                P5z = x5z.settings;
                x5z.buttons.ok = {
                    text: P5z.okText,
                    icon: P5z.okIcon,
                    handler: 'set'
                };
                P5z.buttons = P5z.buttons || (P5z.display == 'inline' ? [] : ['ok']);
                if (!M5z && !a5z) {
                    a5z = Z5z.prev();
                    if (!a5z.length) {
                        M5z = Z5z.parent();
                    }
                }
                Z5z.hide();
            };
            x5z.__init = function() {
                P5z.cssClass = (P5z.cssClass || '') + ' mbsc-wdg';
            };
            if (!e5z) {
                x5z.init(f5z);
            }
        };
        C6.prototype = {
            _hasDef: true,
            _hasTheme: true,
            _hasContent: true,
            _class: 'widget',
            _defaults: Z6.extend({}, x6.prototype._defaults, {
                okText: 'OK',
                headerText: false
            })
        };
        J.classes.Widget = C6;
        J.themes.widget = J.themes.frame;
        J.presetShort('widget', 'Widget', false);
        var Z8 = !!window.Promise;
        var v6 = [];
        var m6 = [];
        var X3 = J.$;
        var x8 = X3.extend;
        J.alert = function(E0z) {
            var e0z = document.createElement('div');
            e0z.innerHTML = b1(E0z);
            return x2(h9, e0z, E0z);
        };
        J.confirm = function(d0z) {
            var l0z = document.createElement('div');
            l0z.innerHTML = b1(d0z);
            return x2(m9, l0z, d0z);
        };
        J.prompt = function(X0z) {
            var h0z = document.createElement('div');
            h0z.innerHTML = b1(X0z) + '<label class="mbsc-input">' + (X0z.label ? '<span class="mbsc-label">' + X0z.label + '</span>' : '') + '<input type="' + (X0z.inputType || 'text') + '" placeholder="' + (X0z.placeholder || '') + '" value="' + (X0z.value || '') + '">' + '</label>';
            return x2(z9, h0z, X0z);
        };
        J.snackbar = function(m0z) {
            var z0z = document.createElement('div');
            z0z.innerHTML = '<div class="mbsc-snackbar-cont"><div class="mbsc-snackbar-msg">' + (m0z.message || '') + '</div>' + (m0z.button ? '<button class="mbsc-snackbar-btn mbsc-btn mbsc-btn-flat">' + (m0z.button.text || '') + '</button>' : '') + '</div>';
            return x2(v8, z0z, m0z);
        };
        J.toast = function(w0z) {
            var i0z = document.createElement('div');
            i0z.innerHTML = '<div class="mbsc-toast-msg">' + (w0z.message || '') + '</div>';
            return x2(i9, i0z, w0z);
        };
        var F3 = J.$;
        var S3 = F3.extend;
        var S2 = J.util;
        var n6 = S2.getCoord;
        var J8 = S2.testTouch;
        var j3 = ['touchstart', 'touchmove', 'touchend', 'touchcancel', 'mousedown', 'mousemove', 'mouseup', 'mouseleave'];
        var b8 = {
            tap: true
        };
        var A6 = void 0;
        var i6 = function() {
            function K0z(B0z, L0z) {
                var R0z = this;
                P6(this, K0z);
                var y0z = S3({}, b8, L0z);
                var F0z = F3(B0z);
                var S0z = F0z.parent();
                var G0z = F0z.next().hasClass('mbsc-fr') ? F0z.next() : null;
                var j0z = s1(F0z);
                if (G0z) {
                    G0z.insertAfter(S0z);
                }
                o8(S0z, j0z);
                F0z.addClass('mbsc-control');
                j3.forEach(function(W0z) {
                    B0z.addEventListener(W0z, R0z);
                });
                this.settings = y0z;
                this._type = j0z;
                this._elm = B0z;
                this._$elm = F0z;
                this._$parent = S0z;
                this._$frame = G0z;
                this._ripple = n1(y0z.theme);
            }
            V2(K0z, [{
                key: 'destroy',
                value: function A0z() {
                    var O0z = this;
                    this._$elm.removeClass('mbsc-control');
                    j3.forEach(function(Y0z) {
                        O0z._elm.removeEventListener(Y0z, O0z);
                    });
                }
            }, {
                key: 'option',
                value: function c0z(n0z) {
                    S3(this.settings, n0z);
                    this._ripple = n1(this.settings.theme);
                }
            }, {
                key: 'handleEvent',
                value: function u0z(s0z) {
                    switch (s0z.type) {
                        case 'touchstart':
                        case 'mousedown':
                            this._onStart(s0z);
                            break;
                        case 'touchmove':
                        case 'mousemove':
                            this._onMove(s0z);
                            break;
                        case 'touchend':
                        case 'touchcancel':
                        case 'mouseup':
                        case 'mouseleave':
                            this._onEnd(s0z);
                    }
                }
            }, {
                key: '_addRipple',
                value: function U0z(b4z) {
                    if (this._ripple && this._$rippleElm) {
                        this._ripple.addRipple(this._$rippleElm, b4z);
                    }
                }
            }, {
                key: '_removeRipple',
                value: function J4z() {
                    if (this._ripple && this._$rippleElm) {
                        this._ripple.removeRipple();
                    }
                }
            }, {
                key: '_onStart',
                value: function t4z(r4z) {
                    var v4z = this._elm;
                    if (J8(r4z, v4z)) {
                        this._startX = n6(r4z, 'X');
                        this._startY = n6(r4z, 'Y');
                        if (A6) {
                            A6.removeClass('mbsc-active');
                        }
                        if (!v4z.disabled) {
                            this._isActive = true;
                            A6 = this._$elm;
                            A6.addClass('mbsc-active');
                            this._addRipple(r4z);
                        }
                    }
                }
            }, {
                key: '_onMove',
                value: function T4z(g4z) {
                    if (this._isActive && Math.abs(n6(g4z, 'X') - this._startX) > 9 || Math.abs(n6(g4z, 'Y') - this._startY) > 9) {
                        this._$elm.removeClass('mbsc-active');
                        this._removeRipple();
                        this._isActive = false;
                    }
                }
            }, {
                key: '_onEnd',
                value: function I4z(P4z) {
                    var Z4z = this;
                    var Q4z = this._elm;
                    var M4z = this._type;
                    if (this._isActive && this.settings.tap && P4z.type == 'touchend' && !Q4z.readOnly) {
                        Q4z.focus();
                        if (/(button|submit|checkbox|switch|radio)/.test(M4z)) {
                            P4z.preventDefault();
                        }
                        if (!/select/.test(M4z)) {
                            var q4z = (P4z.originalEvent || P4z).changedTouches[0],
                                x4z = document.createEvent('MouseEvents');
                            x4z.initMouseEvent('click', true, true, window, 1, q4z.screenX, q4z.screenY, q4z.clientX, q4z.clientY, false, false, false, false, 0, null);
                            x4z.tap = true;
                            Q4z.mbscChange = true;
                            Q4z.dispatchEvent(x4z);
                            S2.preventClick();
                        }
                    }
                    if (this._isActive) {
                        setTimeout(function() {
                            Z4z._$elm.removeClass('mbsc-active');
                            Z4z._removeRipple();
                        }, 100);
                    }
                    this._isActive = false;
                    A6 = null;
                }
            }]);
            return K0z;
        }();
        var R2 = function(D4z) {
            function a4z(N4z) {
                P6(this, a4z);
                var f4z = D6(this, (a4z.__proto__ || Object.getPrototypeOf(a4z)).call(this, N4z));
                E9(f4z, f4z._$elm);
                f4z._$parent.addClass('mbsc-input');
                return f4z;
            }
            e6(a4z, D4z);
            V2(a4z, [{
                key: 'destroy',
                value: function e4z() {
                    B6(a4z.prototype.__proto__ || Object.getPrototypeOf(a4z.prototype), 'destroy', this).call(this);
                    this._$parent.find('.mbsc-input-wrap').before(this._$elm).remove();
                }
            }]);
            return a4z;
        }(i6);
        var c1 = function(l4z) {
            function E4z(m4z, z4z) {
                P6(this, E4z);
                var X4z = D6(this, (E4z.__proto__ || Object.getPrototypeOf(E4z)).call(this, m4z, z4z));
                var d4z = X4z._$elm;
                var h4z = d4z.attr('data-icon');
                d4z.addClass('mbsc-btn').find('.mbsc-btn-ic').remove();
                if (h4z) {
                    d4z.prepend('<span class="mbsc-btn-ic mbsc-ic mbsc-ic-' + h4z + '"></span>');
                    if (d4z.text() === "") {
                        d4z.addClass('mbsc-btn-icon-only');
                    }
                }
                X4z._$rippleElm = d4z;
                return X4z;
            }
            e6(E4z, l4z);
            return E4z;
        }(i6);
        var A1 = function(w4z) {
            function i4z(V4z) {
                P6(this, i4z);
                var C4z = D6(this, (i4z.__proto__ || Object.getPrototypeOf(i4z)).call(this, V4z));
                C4z._$parent.prepend(C4z._$elm).addClass('mbsc-checkbox mbsc-control-w').find('.mbsc-checkbox-box').remove();
                C4z._$elm.after('<span class="mbsc-checkbox-box"></span>');
                return C4z;
            }
            e6(i4z, w4z);
            return i4z;
        }(i6);
        var W1 = function(H4z) {
            function k4z(p4z) {
                P6(this, k4z);
                var o4z = D6(this, (k4z.__proto__ || Object.getPrototypeOf(k4z)).call(this, p4z));
                o4z._$parent.addClass('mbsc-radio mbsc-control-w').find('.mbsc-radio-box').remove();
                o4z._$elm.after('<span class="mbsc-radio-box"><span></span></span>');
                return o4z;
            }
            e6(k4z, H4z);
            return k4z;
        }(i6);
        var L1 = J.$;
        var R1 = function(F4z) {
            function K4z(j4z) {
                P6(this, K4z);
                var S4z = D6(this, (K4z.__proto__ || Object.getPrototypeOf(K4z)).call(this, j4z));
                var R4z = S4z._$elm;
                var B4z = S4z._$parent;
                var y4z = B4z.find('input.mbsc-control');
                var G4z = y4z.length ? y4z : L1('<input tabindex="-1" class="mbsc-control" readonly>');
                S4z._$input = G4z;
                B4z.addClass('mbsc-select' + (S4z._$frame ? ' mbsc-select-inline' : ''));
                R4z.after(G4z);
                G4z.after('<span class="mbsc-select-ic mbsc-ic mbsc-ic-arrow-down5"></span>');
                if (!G4z.hasClass('mbsc-comp')) {
                    j4z.addEventListener('change', S4z);
                    S4z._setText();
                }
                return S4z;
            }
            e6(K4z, F4z);
            V2(K4z, [{
                key: 'destroy',
                value: function L4z() {
                    B6(K4z.prototype.__proto__ || Object.getPrototypeOf(K4z.prototype), 'destroy', this).call(this);
                    this._$elm.after(this._$input);
                    this._elm.removeEventListener('change', this);
                }
            }, {
                key: 'handleEvent',
                value: function W4z(A4z) {
                    B6(K4z.prototype.__proto__ || Object.getPrototypeOf(K4z.prototype), 'handleEvent', this).call(this, A4z);
                    if (A4z.type == 'change') {
                        this._setText();
                    }
                }
            }, {
                key: '_setText',
                value: function O4z() {
                    var Y4z = this._elm;
                    this._$input.val(Y4z.selectedIndex != -1 ? Y4z.options[Y4z.selectedIndex].text : '');
                }
            }]);
            return K4z;
        }(R2);
        var z6 = J.$;
        var J1 = ['keydown', 'input', 'scroll'];
        var r1 = void 0;
        z6(window).on('resize orientationchange', y1);
        var G1 = function(T7z) {
            function v7z(I7z) {
                P6(this, v7z);
                var g7z = D6(this, (v7z.__proto__ || Object.getPrototypeOf(v7z)).call(this, I7z));
                g7z._$parent.addClass('mbsc-textarea');
                J1.forEach(function(Q7z) {
                    g7z._elm.addEventListener(Q7z, g7z);
                });
                g1(I7z);
                return g7z;
            }
            e6(v7z, T7z);
            V2(v7z, [{
                key: 'destroy',
                value: function q7z() {
                    var P7z = this;
                    B6(v7z.prototype.__proto__ || Object.getPrototypeOf(v7z.prototype), 'destroy', this).call(this);
                    J1.forEach(function(x7z) {
                        P7z._elm.removeEventListener(x7z, P7z);
                    });
                }
            }, {
                key: 'handleEvent',
                value: function Z7z(M7z) {
                    B6(v7z.prototype.__proto__ || Object.getPrototypeOf(v7z.prototype), 'handleEvent', this).call(this, M7z);
                    switch (M7z.type) {
                        case 'keydown':
                        case 'input':
                            this._onInput(M7z);
                            break;
                        case 'scroll':
                            w9(this._elm);
                    }
                }
            }, {
                key: '_onInput',
                value: function a7z() {
                    var D7z = this;
                    clearTimeout(this._debounce);
                    this._debounce = setTimeout(function() {
                        g1(D7z._elm);
                    }, 100);
                }
            }]);
            return v7z;
        }(R2);
        var c2 = J.$;
        var S1 = function(N7z) {
            function f7z(h7z, m7z) {
                P6(this, f7z);
                var E7z = D6(this, (f7z.__proto__ || Object.getPrototypeOf(f7z)).call(this, h7z, m7z));
                var l7z = void 0;
                var e7z = void 0;
                var X7z = E7z._$elm;
                var d7z = E7z._$parent;
                if (!d7z.hasClass('mbsc-segmented-item')) {
                    l7z = c2('<div class="mbsc-segmented"></div>');
                    d7z.after(l7z);
                    d7z.parent().find('input[name="' + X7z.attr('name') + '"]').each(function() {
                        var z7z = c2(this);
                        e7z = z7z.parent().addClass('mbsc-segmented-item');
                        c2('<span class="mbsc-segmented-content">' + (z7z.attr('data-icon') ? ' <span class="mbsc-ic mbsc-ic-' + z7z.attr('data-icon') + '"></span> ' : '') + '</span>').append(e7z.contents()).appendTo(e7z);
                        e7z.prepend(z7z);
                        l7z.append(e7z);
                    });
                }
                E7z._$rippleElm = X7z.next();
                return E7z;
            }
            e6(f7z, N7z);
            return f7z;
        }(i6);
        var t6 = J.$;
        var Z1 = J.util;
        var h2 = Z1.getCoord;
        var F1 = Z1.testTouch;
        var b3 = function i7z(S7z, u7z) {
            function v6v(M6v) {
                if (M6v.keyCode == 32) {
                    M6v.preventDefault();
                    if (!o7z && !S7z.disabled) {
                        F7z = t6(this).addClass('mbsc-active');
                        x6v(M6v);
                    }
                }
            }

            function T6v(a6v) {
                if (o7z) {
                    a6v.preventDefault();
                    U7z(true);
                }
            }

            function g6v(D6v) {
                if (F1(D6v, this) && !S7z.disabled) {
                    F7z = t6(this).addClass('mbsc-active').trigger('focus');
                    if (j7z && !F7z.hasClass('mbsc-step-disabled')) {
                        j7z.addRipple(F7z.find('.mbsc-segmented-content'), D6v);
                    }
                    x6v(D6v);
                    if (D6v.type === 'mousedown') {
                        t6(document).on('mousemove', W7z).on('mouseup', L7z);
                    }
                }
            }

            function L7z(f6v) {
                if (o7z) {
                    f6v.preventDefault();
                    U7z(true, f6v);
                    if (f6v.type === 'mouseup') {
                        t6(document).off('mousemove', W7z).off('mouseup', L7z);
                    }
                }
            }

            function W7z(N6v) {
                if (o7z) {
                    t6v = h2(N6v, 'X');
                    I6v = h2(N6v, 'Y');
                    Z6v = t6v - Q6v;
                    P6v = I6v - r6v;
                    if (Math.abs(Z6v) > 7 || Math.abs(P6v) > 7) {
                        U7z();
                    }
                }
            }

            function q6v() {
                var e6v;
                if (!S7z.disabled) {
                    e6v = parseFloat(t6(this).val());
                    B7z(isNaN(e6v) ? w7z : e6v);
                }
            }

            function B7z(d6v, E6v, l6v) {
                c7z = w7z;
                if (E6v === undefined) {
                    E6v = true;
                }
                if (l6v === undefined) {
                    l6v = E6v;
                }
                if (d6v !== undefined) {
                    w7z = Math.min(H7z, Math.max(Math.round(d6v / V7z) * V7z, k7z));
                } else {
                    w7z = Math.min(H7z, Math.max(w7z + (F7z.hasClass('mbsc-stepper-minus') ? -V7z : V7z), k7z));
                }
                A7z = true;
                n7z.removeClass('mbsc-step-disabled');
                if (E6v) {
                    C7z.val(w7z);
                }
                if (w7z == k7z) {
                    Y7z.addClass('mbsc-step-disabled');
                } else if (w7z == H7z) {
                    b6v.addClass('mbsc-step-disabled');
                }
                if (w7z !== c7z && l6v) {
                    C7z.trigger('change');
                }
            }

            function x6v(X6v) {
                if (!o7z) {
                    o7z = true;
                    A7z = false;
                    Q6v = h2(X6v, 'X');
                    r6v = h2(X6v, 'Y');
                    clearInterval(G7z);
                    clearTimeout(G7z);
                    G7z = setTimeout(function() {
                        B7z();
                        G7z = setInterval(function() {
                            B7z();
                        }, 150);
                    }, 300);
                }
            }

            function U7z(h6v) {
                clearInterval(G7z);
                clearTimeout(G7z);
                if (!A7z && h6v) {
                    B7z();
                }
                o7z = false;
                A7z = false;
                F7z.removeClass('mbsc-active');
                if (j7z) {
                    setTimeout(function() {
                        j7z.removeRipple();
                    }, 100);
                }
            }

            function s7z(z6v, i6v) {
                var m6v = C7z.attr(z6v);
                return m6v === undefined || m6v === '' ? i6v : +m6v;
            }
            var F7z, b6v, Y7z, n7z, o7z, A7z, Z6v, P6v, J6v, t6v, I6v, G7z, H7z, k7z, j7z, V7z, y7z, Q6v, r6v, R7z, w7z, p7z = this,
                C7z = t6(S7z),
                O7z, K7z, c7z = w7z;
            J.classes.Base.call(this, S7z, u7z, true);
            p7z.getVal = function() {
                var w6v = parseFloat(C7z.val());
                w6v = isNaN(w6v) ? w7z : w6v;
                return Math.min(H7z, Math.max(Math.round(w6v / V7z) * V7z, k7z));
            };
            p7z.setVal = function(C6v, V6v, k6v) {
                C6v = parseFloat(C6v);
                B7z(isNaN(C6v) ? w7z : C6v, V6v, k6v);
            };
            p7z._init = function(H6v) {
                O7z = C7z.parent().hasClass('mbsc-stepper');
                K7z = O7z ? C7z.closest('.mbsc-stepper-cont') : C7z.parent();
                y7z = p7z.settings;
                k7z = H6v.min === undefined ? s7z('min', y7z.min) : H6v.min;
                H7z = H6v.max === undefined ? s7z('max', y7z.max) : H6v.max;
                V7z = H6v.step === undefined ? s7z('step', y7z.step) : H6v.step;
                J6v = C7z.attr('data-val') || y7z.val;
                w7z = Math.min(H7z, Math.max(Math.round(+S7z.value / V7z) * V7z || 0, k7z));
                R7z = J.themes.form[u7z.theme];
                j7z = R7z && R7z.addRipple ? R7z : null;
                if (!O7z) {
                    K7z.addClass('mbsc-stepper-cont mbsc-control-w').append('<span class="mbsc-segmented mbsc-stepper"></span>').find('.mbsc-stepper').append('<span class="mbsc-segmented-item mbsc-stepper-control mbsc-stepper-minus ' + (w7z == k7z ? 'mbsc-step-disabled' : '') + '"  tabindex="0"><span class="mbsc-segmented-content"><span class="mbsc-ic mbsc-ic-minus"></span></span></span>').append('<span class="mbsc-segmented-item mbsc-stepper-control mbsc-stepper-plus ' + (w7z == H7z ? 'mbsc-step-disabled' : '') + '"  tabindex="0"><span class="mbsc-segmented-content"> <span class="mbsc-ic mbsc-ic-plus"></span> </span></span>').prepend(C7z);
                }
                Y7z = t6('.mbsc-stepper-minus', K7z);
                b6v = t6('.mbsc-stepper-plus', K7z);
                if (!O7z) {
                    if (J6v == 'left') {
                        K7z.addClass('mbsc-stepper-val-left');
                        C7z.after('<span class="mbsc-segmented-item"><span class="mbsc-segmented-content"></span></span>');
                    } else if (J6v == 'right') {
                        K7z.addClass('mbsc-stepper-val-right');
                        b6v.after('<span class="mbsc-segmented-item"><span class="mbsc-segmented-content"></span></span>');
                    } else {
                        Y7z.after('<span class="mbsc-segmented-item"><span class="mbsc-segmented-content mbsc-stepper-val"></span></span>');
                    }
                }
                C7z.val(w7z).attr('data-role', 'stepper').attr('min', k7z).attr('max', H7z).attr('step', V7z).on('change', q6v);
                n7z = t6('.mbsc-stepper-control', K7z).on('keydown', v6v).on('keyup', T6v).on('mousedown touchstart', g6v).on('touchmove', W7z).on('touchend touchcancel', L7z);
                C7z.addClass('mbsc-stepper-ready mbsc-control');
            };
            p7z._destroy = function() {
                C7z.removeClass('mbsc-control').off('change', q6v);
                n7z.off('keydown', v6v).off('keyup', T6v).off('mousedown touchstart', g6v).off('touchmove', W7z).off('touchend touchcancel', L7z);
            };
            p7z.init(u7z);
        };
        b3.prototype = {
            _class: 'stepper',
            _defaults: {
                min: 0,
                max: 100,
                step: 1
            }
        };
        J.classes.Stepper = b3;
        J.presetShort('stepper', 'Stepper');
        var N1 = J.$;
        var J3 = function o6v(F6v, S6v) {
            var K6v, G6v, B6v, y6v, p6v = this;
            S6v = S6v || {};
            N1.extend(S6v, {
                changeEvent: 'click',
                round: false
            });
            g3.call(this, F6v, S6v, true);
            p6v._readValue = function() {
                return F6v.checked ? 1 : 0;
            };
            p6v._fillValue = function(j6v, L6v, R6v) {
                K6v.prop('checked', !!j6v);
                if (R6v) {
                    K6v.trigger('change');
                }
            };
            p6v._onTap = function(W6v) {
                p6v._setVal(W6v ? 0 : 1);
            };
            p6v.___init = function() {
                B6v = p6v.settings;
                K6v = N1(F6v);
                G6v = K6v.parent();
                G6v.find('.mbsc-switch-track').remove();
                G6v.prepend(K6v);
                K6v.attr('data-role', 'switch').after('<span class="mbsc-progress-cont mbsc-switch-track">' + '<span class="mbsc-progress-track mbsc-progress-anim">' + '<span class="mbsc-slider-handle-cont">' + '<span class="mbsc-slider-handle mbsc-switch-handle" data-index="0">' + '<span class="mbsc-switch-txt-off">' + B6v.offText + '</span>' + '<span class="mbsc-switch-txt-on">' + B6v.onText + '</span>' + '</span></span></span></span>');
                y6v = new i6(F6v);
                p6v._$track = G6v.find('.mbsc-progress-track');
                p6v._min = 0;
                p6v._max = 1;
                p6v._step = 1;
            };
            p6v.___destroy = function() {
                y6v.destroy();
            };
            p6v.getVal = function() {
                return F6v.checked;
            };
            p6v.setVal = function(A6v, O6v, Y6v) {
                p6v._setVal(A6v ? 1 : 0, O6v, Y6v);
            };
            p6v.init(S6v);
        };
        J3.prototype = {
            _class: 'switch',
            _css: 'mbsc-switch',
            _hasTheme: true,
            _hasLang: true,
            _defaults: {
                stopProp: true,
                offText: 'Off',
                onText: 'On'
            }
        };
        J.classes.Switch = J3;
        J.presetShort('switch', 'Switch');
        var K1 = 0;
        var B = J.$;
        var H8 = J.classes;
        var h1 = J.instances;
        var G6 = function c6v(J2v, t2v) {
            function r2v() {
                U6v.removeClass('mbsc-no-touch');
            }
            var n6v, v2v, b2v = '',
                U6v = B(J2v),
                u6v = {},
                s6v = this;
            H8.Base.call(this, J2v, t2v, true);
            s6v.refresh = function(T2v) {
                B('input,select,textarea,progress,button', U6v).each(function() {
                    var g2v = this,
                        I2v = B(g2v),
                        Q2v = s1(I2v);
                    if (I2v.attr('data-enhance') != 'false') {
                        if (I2v.hasClass('mbsc-control')) {
                            if (u6v[g2v.id]) {
                                u6v[g2v.id].option({
                                    theme: n6v.theme,
                                    lang: n6v.lang,
                                    rtl: n6v.rtl,
                                    onText: n6v.onText,
                                    offText: n6v.offText,
                                    stopProp: n6v.stopProp
                                });
                            }
                        } else {
                            if (!g2v.id) {
                                g2v.id = 'mbsc-form-control-' + ++K1;
                            }
                            switch (Q2v) {
                                case 'button':
                                case 'submit':
                                    u6v[g2v.id] = new c1(g2v, {
                                        theme: n6v.theme,
                                        tap: n6v.tap
                                    });
                                    break;
                                case 'switch':
                                    u6v[g2v.id] = new J3(g2v, {
                                        theme: n6v.theme,
                                        lang: n6v.lang,
                                        rtl: n6v.rtl,
                                        onText: n6v.onText,
                                        offText: n6v.offText,
                                        stopProp: n6v.stopProp
                                    });
                                    break;
                                case 'checkbox':
                                    u6v[g2v.id] = new A1(g2v, {
                                        tap: n6v.tap
                                    });
                                    break;
                                case 'range':
                                    if (!B(g2v).parent().hasClass('mbsc-slider')) {
                                        u6v[g2v.id] = new k2(g2v, {
                                            theme: n6v.theme,
                                            lang: n6v.lang,
                                            rtl: n6v.rtl,
                                            stopProp: n6v.stopProp
                                        });
                                    }
                                    break;
                                case 'progress':
                                    u6v[g2v.id] = new g2(g2v, {
                                        theme: n6v.theme,
                                        lang: n6v.lang,
                                        rtl: n6v.rtl
                                    });
                                    break;
                                case 'radio':
                                    u6v[g2v.id] = new W1(g2v, {
                                        tap: n6v.tap
                                    });
                                    break;
                                case 'select':
                                case 'select-one':
                                case 'select-multiple':
                                    u6v[g2v.id] = new R1(g2v, {
                                        tap: n6v.tap
                                    });
                                    break;
                                case 'textarea':
                                    u6v[g2v.id] = new G1(g2v, {
                                        tap: n6v.tap
                                    });
                                    break;
                                case 'segmented':
                                    u6v[g2v.id] = new S1(g2v, {
                                        theme: n6v.theme,
                                        tap: n6v.tap
                                    });
                                    break;
                                case 'stepper':
                                    u6v[g2v.id] = new b3(g2v, {
                                        theme: n6v.theme
                                    });
                                    break;
                                case 'hidden':
                                    return;
                                default:
                                    u6v[g2v.id] = new R2(g2v, {
                                        tap: n6v.tap
                                    });
                                    break;
                            }
                        }
                    }
                });
                if (!T2v) {
                    y1();
                }
            };
            s6v._init = function() {
                if (!J.themes.form[n6v.theme]) {
                    n6v.theme = 'mobiscroll';
                }
                if (!U6v.hasClass('mbsc-form')) {
                    U6v.on('touchstart', r2v).show();
                }
                if (b2v) {
                    U6v.removeClass(b2v);
                }
                b2v = 'mbsc-form mbsc-no-touch mbsc-' + n6v.theme + (n6v.baseTheme ? ' mbsc-' + n6v.baseTheme : '') + (n6v.rtl ? ' mbsc-rtl' : ' mbsc-ltr');
                U6v.addClass(b2v);
                s6v.refresh();
            };
            s6v._destroy = function() {
                U6v.removeClass(b2v).off('touchstart', r2v);
                for (var q2v in u6v) {
                    u6v[q2v].destroy();
                }
            };
            n6v = s6v.settings;
            v2v = s6v.trigger;
            s6v.init(t2v);
        };
        G6.prototype = {
            _hasDef: true,
            _hasTheme: true,
            _hasLang: true,
            _class: 'form',
            _defaults: {
                tap: true,
                stopProp: true,
                lang: 'en'
            }
        };
        J.themes.form.mobiscroll = {};
        J.classes.Form = G6;
        J.presetShort('form', 'Form');
        B(function() {
            var P2v = '[mbsc-enhance],[mbsc-form]';
            B(P2v).each(function() {
                new G6(this);
            });
            B(document).on('mbsc-enhance', function(x2v, Z2v) {
                if (B(x2v.target).is(P2v)) {
                    new G6(x2v.target, Z2v);
                } else {
                    B(P2v, x2v.target).each(function() {
                        new G6(this, Z2v);
                    });
                }
            });
            B(document).on('mbsc-refresh', function(a2v) {
                var M2v;
                if (B(a2v.target).is(P2v)) {
                    M2v = h1[a2v.target.id];
                    if (M2v) {
                        M2v.refresh();
                    }
                } else {
                    B(P2v, a2v.target).each(function() {
                        M2v = h1[this.id];
                        if (M2v) {
                            M2v.refresh();
                        }
                    });
                }
            });
        });
        var l6 = J.$;
        var o1 = {
            invalid: [],
            showInput: true,
            inputClass: ''
        };
        J.presets.scroller.list = function(f2v) {
            function A2v(c2v, n2v, u2v) {
                var O2v = 0,
                    Y2v = [];
                while (O2v < c2v) {
                    Y2v[O2v] = W2v(u2v, O2v, n2v);
                    O2v++;
                }
                return Y2v;
            }

            function W2v(r3v, v3v, T3v) {
                var s2v = 0,
                    b3v, U2v = T3v,
                    J3v = [];
                while (s2v < v3v) {
                    var t3v = r3v[s2v];
                    for (b3v in U2v) {
                        if (U2v[b3v].key == t3v) {
                            U2v = U2v[b3v].children;
                            break;
                        }
                    }
                    s2v++;
                }
                s2v = 0;
                while (s2v < U2v.length) {
                    if (U2v[s2v].invalid) {
                        J3v.push(U2v[s2v].key);
                    }
                    s2v++;
                }
                return J3v;
            }

            function R2v(I3v, Q3v) {
                var g3v = [];
                while (I3v) {
                    g3v[--I3v] = true;
                }
                g3v[Q3v] = false;
                return g3v;
            }

            function j2v(x3v) {
                var P3v = [],
                    q3v;
                for (q3v = 0; q3v < x3v; q3v++) {
                    P3v[q3v] = D2v.labels && D2v.labels[q3v] ? D2v.labels[q3v] : q3v;
                }
                return P3v;
            }

            function o2v(E3v, l3v, N3v) {
                var Z3v = 0,
                    M3v, e3v, f3v, D3v = [
                        []
                    ],
                    a3v = l2v;
                if (l3v) {
                    for (M3v = 0; M3v < l3v; M3v++) {
                        if (m2v) {
                            D3v[0][M3v] = {};
                        } else {
                            D3v[M3v] = [{}];
                        }
                    }
                }
                while (Z3v < E3v.length) {
                    if (m2v) {
                        D3v[0][Z3v] = G2v(a3v, V2v[Z3v]);
                    } else {
                        D3v[Z3v] = [G2v(a3v, V2v[Z3v])];
                    }
                    M3v = 0;
                    f3v = undefined;
                    while (M3v < a3v.length && f3v === undefined) {
                        if (a3v[M3v].key == E3v[Z3v] && (N3v !== undefined && Z3v <= N3v || N3v === undefined)) {
                            f3v = M3v;
                        }
                        M3v++;
                    }
                    if (f3v !== undefined && a3v[f3v].children) {
                        Z3v++;
                        a3v = a3v[f3v].children;
                    } else if ((e3v = X2v(a3v)) && e3v.children) {
                        Z3v++;
                        a3v = e3v.children;
                    } else {
                        return D3v;
                    }
                }
                return D3v;
            }

            function X2v(X3v, m3v) {
                if (!X3v) {
                    return false;
                }
                var d3v = 0,
                    h3v;
                while (d3v < X3v.length) {
                    if (!(h3v = X3v[d3v++]).invalid) {
                        return m3v ? d3v - 1 : h3v;
                    }
                }
                return false;
            }

            function G2v(i3v, C3v) {
                var w3v = {
                        data: [],
                        label: C3v
                    },
                    z3v = 0;
                while (z3v < i3v.length) {
                    w3v.data.push({
                        value: i3v[z3v].key,
                        display: i3v[z3v].value
                    });
                    z3v++;
                }
                return w3v;
            }

            function S2v(V3v) {
                if (f2v._isVisible) {
                    l6('.mbsc-sc-whl-w', f2v._markup).css('display', '').slice(V3v).hide();
                }
            }

            function L2v(F3v) {
                var H3v = [],
                    o3v = F3v,
                    p3v, k3v = true,
                    K3v = 0;
                while (k3v) {
                    p3v = X2v(o3v);
                    H3v[K3v++] = p3v.key;
                    k3v = p3v.children;
                    if (k3v) {
                        o3v = k3v;
                    }
                }
                return H3v;
            }

            function H2v(j3v, A3v) {
                var W3v = [],
                    G3v = l2v,
                    B3v = 0,
                    L3v = false,
                    y3v, R3v, S3v;
                if (j3v[B3v] !== undefined && B3v <= A3v) {
                    y3v = 0;
                    R3v = j3v[B3v];
                    S3v = undefined;
                    while (y3v < G3v.length && S3v === undefined) {
                        if (G3v[y3v].key == j3v[B3v] && !G3v[y3v].invalid) {
                            S3v = y3v;
                        }
                        y3v++;
                    }
                } else {
                    S3v = X2v(G3v, true);
                    R3v = G3v[S3v].key;
                }
                L3v = S3v !== undefined ? G3v[S3v].children : false;
                W3v[B3v] = R3v;
                while (L3v) {
                    G3v = G3v[S3v].children;
                    B3v++;
                    L3v = false;
                    S3v = undefined;
                    if (j3v[B3v] !== undefined && B3v <= A3v) {
                        y3v = 0;
                        R3v = j3v[B3v];
                        S3v = undefined;
                        while (y3v < G3v.length && S3v === undefined) {
                            if (G3v[y3v].key == j3v[B3v] && !G3v[y3v].invalid) {
                                S3v = y3v;
                            }
                            y3v++;
                        }
                    } else {
                        S3v = X2v(G3v, true);
                        S3v = S3v === false ? undefined : S3v;
                        R3v = G3v[S3v].key;
                    }
                    L3v = S3v !== undefined && X2v(G3v[S3v].children) ? G3v[S3v].children : false;
                    W3v[B3v] = R3v;
                }
                return {
                    lvl: B3v + 1,
                    nVector: W3v
                };
            }

            function K2v(Y3v) {
                var O3v = [];
                N2v = N2v > i2v++ ? N2v : i2v;
                Y3v.children('li').each(function(J1v) {
                    var c3v = l6(this),
                        n3v = c3v.clone();
                    n3v.children('ul,ol').remove();
                    var U3v = f2v._processMarkup ? f2v._processMarkup(n3v) : n3v.html().replace(/^\s\s*/, '').replace(/\s\s*$/, ''),
                        b1v = c3v.attr('data-invalid') ? true : false,
                        u3v = {
                            key: c3v.attr('data-val') === undefined || c3v.attr('data-val') === null ? J1v : c3v.attr('data-val'),
                            value: U3v,
                            invalid: b1v,
                            children: null
                        },
                        s3v = c3v.children('ul,ol');
                    if (s3v.length) {
                        u3v.children = K2v(s3v);
                    }
                    O3v.push(u3v);
                });
                i2v--;
                return O3v;
            }

            function y2v(v1v, q1v, g1v) {
                var t1v, r1v = (q1v || 0) + 1,
                    I1v = [],
                    T1v = {},
                    Q1v = {};
                T1v = o2v(v1v, null, q1v);
                for (t1v = 0; t1v < v1v.length; t1v++) {
                    f2v._tempWheelArray[t1v] = v1v[t1v] = g1v.nVector[t1v] || 0;
                }
                while (r1v < g1v.lvl) {
                    Q1v[r1v] = m2v ? T1v[0][r1v] : T1v[r1v][0];
                    I1v.push(r1v++);
                }
                S2v(g1v.lvl);
                z2v = v1v.slice(0);
                if (I1v.length) {
                    h2v = true;
                    f2v.changeWheel(Q1v);
                }
            }
            var B2v = l6.extend({}, f2v.settings),
                D2v = l6.extend(f2v.settings, o1, B2v),
                C2v = D2v.layout || (/top|bottom/.test(D2v.display) ? 'liquid' : ''),
                m2v = C2v == 'liquid',
                F2v = D2v.readonly,
                d2v = l6(this),
                E2v, h2v, w2v = this.id + '_dummy',
                N2v = 0,
                i2v = 0,
                e2v, z2v = [],
                l2v = D2v.wheelArray || K2v(d2v),
                V2v = j2v(N2v),
                k2v = L2v(l2v),
                p2v = o2v(k2v, N2v);
            l6('#' + w2v).remove();
            if (D2v.showInput) {
                E2v = l6('<input type="text" id="' + w2v + '" value="" class="' + D2v.inputClass + '" placeholder="' + (D2v.placeholder || '') + '" readonly />').insertBefore(d2v);
                D2v.anchor = E2v;
                f2v.attachShow(E2v);
            }
            if (!D2v.wheelArray) {
                d2v.hide();
            }
            return {
                wheels: p2v,
                layout: C2v,
                headerText: false,
                setOnTap: N2v == 1,
                formatValue: function P1v(x1v) {
                    if (e2v === undefined) {
                        e2v = H2v(x1v, x1v.length).lvl;
                    }
                    return x1v.slice(0, e2v).join(' ');
                },
                parseValue: function Z1v(M1v) {
                    return M1v ? (M1v + '').split(' ') : (D2v.defaultValue || k2v).slice(0);
                },
                onBeforeShow: function a1v() {
                    var D1v = f2v.getArrayVal(true);
                    z2v = D1v.slice(0);
                    D2v.wheels = o2v(D1v, N2v, N2v);
                    h2v = true;
                },
                onWheelGestureStart: function f1v(N1v) {
                    D2v.readonly = R2v(N2v, N1v.index);
                },
                onWheelAnimationEnd: function e1v(X1v) {
                    var E1v = X1v.index,
                        l1v = f2v.getArrayVal(true),
                        d1v = H2v(l1v, E1v);
                    e2v = d1v.lvl;
                    D2v.readonly = F2v;
                    if (l1v[E1v] != z2v[E1v]) {
                        y2v(l1v, E1v, d1v);
                    }
                },
                onFill: function h1v(m1v) {
                    e2v = undefined;
                    if (E2v) {
                        E2v.val(m1v.valueText);
                    }
                },
                validate: function z1v(V1v) {
                    var i1v = V1v.values,
                        C1v = V1v.index,
                        w1v = H2v(i1v, i1v.length);
                    e2v = w1v.lvl;
                    if (C1v === undefined) {
                        S2v(w1v.lvl);
                        if (!h2v) {
                            y2v(i1v, C1v, w1v);
                        }
                    }
                    h2v = false;
                    return {
                        disabled: A2v(e2v, l2v, i1v)
                    };
                },
                onDestroy: function k1v() {
                    if (E2v) {
                        E2v.remove();
                    }
                    d2v.show();
                }
            };
        };
        var V1 = J.$;
        var k1 = J.presets.scroller;
        J.presetShort('image');
        k1.image = function(H1v) {
            if (H1v.settings.enhance) {
                H1v._processMarkup = function(o1v) {
                    var p1v = o1v.attr('data-icon');
                    o1v.children().each(function(F1v, K1v) {
                        K1v = V1(K1v);
                        if (K1v.is('img')) {
                            V1('<div class="mbsc-img-c"></div>').insertAfter(K1v).append(K1v.addClass('mbsc-img'));
                        } else if (K1v.is('p')) {
                            K1v.addClass('mbsc-img-txt');
                        }
                    });
                    if (p1v) {
                        o1v.prepend('<div class="mbsc-ic mbsc-ic-' + p1v + '"></div');
                    }
                    o1v.html('<div class="mbsc-img-w">' + o1v.html() + '</div>');
                    return o1v.html();
                };
            }
            return k1.list.call(this, H1v);
        };
       
       
       (function(t49, P49, F49) {
            var a49, i49 = J,
                q49 = i49.$,
                A49 = q49.extend,
                d49 = i49.classes,
                c49 = i49.util,
                E49 = c49.prefix,
                w49 = c49.jsPrefix,
                K49 = c49.getCoord,
                Q49 = c49.testTouch,
                U49 = c49.vibrate,
                Z49 = c49.animEnd,
                C49 = 1,
                x49 = function() {},
                m49 = t49.requestAnimationFrame || function(Y49) {
                    Y49();
                },
                p49 = t49.cancelAnimationFrame || x49,
                M49 = 'transparent';
            d49.ListView = function(R99, s89) {
                function i89(I09, e09, r09) {
                    var s09, O09;
                    if (I09 && I09.length) {
                        s09 = 100 / (I09.length + 2);
                        q49.each(I09, function(n09, G09) {
                            if (G09.key === F49) {
                                G09.key = M89++;
                            }
                            if (G09.percent === F49) {
                                G09.percent = e09 * s09 * (n09 + 1);
                                if (r09) {
                                    O09 = A49({}, G09);
                                    O09.key = M89++;
                                    O09.percent = -s09 * (n09 + 1);
                                    I09.push(O09);
                                    V79[O09.key] = O09;
                                }
                            }
                            V79[G09.key] = G09;
                        });
                    }
                }

                function E89(J09, k09) {
                    var B09, V09 = J09.attr('data-ref');
                    B09 = K89[V09] = K89[V09] || [];
                    if (k09) {
                        B09.push(k09);
                    }
                    if (J09.attr('data-action')) {
                        return;
                    }
                    k09 = B09.shift();
                    J09.attr('data-action', 1);
                    k09(function() {
                        J09.removeAttr('data-action');
                        if (B09.length) {
                            E89(J09);
                        } else {
                            delete K89[V09];
                        }
                    });
                }

                function E99(X09, v09, L09) {
                    function u09() {
                        clearTimeout(o09);
                        l79--;
                        X09.off(Z49, u09).removeClass(v09);
                        L09.call(G49, X09);
                    }
                    var o09;
                    L09 = L09 || x49;
                    if (v49.animation && v09 !== 'mbsc-lv-item-none') {
                        l79++;
                        X09.on(Z49, u09).addClass(v09);
                        o09 = setTimeout(u09, 500);
                    } else {
                        L09.call(G49, X09);
                    }
                }

                function U89(p09, Y09) {
                    if (!l79) {
                        if (p09.hasClass('mbsc-lv-parent')) {
                            C79++;
                            m89('r', W49[p09.attr('data-ref')].child, null, Y09);
                        } else if (p09.hasClass('mbsc-lv-back')) {
                            C79--;
                            m89('l', W49[p09.attr('data-back')].parent, W49[p09.attr('data-back')].item, Y09);
                        }
                    }
                }

                function m89(M09, A09, t09, U09, Q09) {
                    var m09 = A09.parent(),
                        Z09 = A09.prev();
                    U09 = U09 || x49;
                    if (Z09[0] === S49[0]) {
                        Z09 = S49.prev();
                    }
                    if (j49[0] !== A09[0]) {
                        I49('onNavStart', {
                            level: C79,
                            direction: M09,
                            list: A09[0]
                        });
                        d89.prepend(A09.addClass('mbsc-lv-v mbsc-lv-sl-new'));
                        k79(o49);
                        E99(d89, 'mbsc-lv-sl-' + M09, function() {
                            j49.removeClass('mbsc-lv-sl-curr');
                            A09.removeClass('mbsc-lv-sl-new').addClass('mbsc-lv-sl-curr');
                            if (s79 && s79.length) {
                                j49.removeClass('mbsc-lv-v').insertAfter(s79);
                            } else {
                                j79.append(j49.removeClass('mbsc-lv-v'));
                            }
                            s79 = Z09;
                            j79 = m09;
                            j49 = A09;
                            k79(t09, Q09);
                            U09.call(G49, t09);
                            I49('onNavEnd', {
                                level: C79,
                                direction: M09,
                                list: A09[0]
                            });
                        });
                    } else {
                        k79(t09, Q09);
                        U09.call(G49, t09);
                    }
                }

                function k79(C09, E09) {
                    if (C09) {
                        var x09 = k49.scrollTop(),
                            d09 = C09.is('.mbsc-lv-item') ? C09[0].offsetHeight : 0,
                            P09 = C09.offset().top + (y79 ? x09 - Z89 : 0);
                        if (E09) {
                            if (P09 < x09 || P09 + d09 > x09 + X79) {
                                k49.scrollTop(P09);
                            }
                        } else {
                            if (P09 < x09) {
                                k49.scrollTop(P09);
                            } else if (P09 + d09 > x09 + X79) {
                                k49.scrollTop(P09 + d09 - X79 / 2);
                            }
                        }
                    }
                }

                function P99(F09, i09) {
                    return +(i09 < 0 ? w79((F09.actionsWidth || 0).right) || w79(F09.actionsWidth) || w79(v49.actionsWidth.right) || w79(v49.actionsWidth) : w79((F09.actionsWidth || 0).left) || w79(F09.actionsWidth) || w79(v49.actionsWidth.left) || w79(v49.actionsWidth));
                }

                function w79(a09) {
                    return c49.isNumeric(a09) ? a09 + '' : 0;
                }

                function F99(w09) {
                    return (w09 > 0 ? J49.right : J49.left).color || M49;
                }

                function n79(c09, K09) {
                    c09 = c09[K09]();
                    while (c09.length && (!c09.hasClass('mbsc-lv-item') || c09.hasClass('mbsc-lv-ph') || c09.hasClass('mbsc-lv-item-dragging'))) {
                        if (!X49.sortable.group && c09.hasClass('mbsc-lv-gr-title')) {
                            return false;
                        }
                        c09 = c09[K09]();
                    }
                    return c09;
                }

                function U99(q09) {
                    var H09 = 0,
                        l09 = W49[q09.attr('data-ref')];
                    while (l09 && l09.ref) {
                        H09++;
                        l09 = W49[l09.ref];
                    }
                    return H09;
                }

                function Z79(b09) {
                    if (typeof b09 !== 'object') {
                        b09 = q49('li[data-id="' + b09 + '"]', o49);
                    }
                    return q49(b09);
                }

                function o79(y09) {
                    return y09.children('li').not('.mbsc-lv-back').not('.mbsc-lv-removed').not('.mbsc-lv-ph');
                }

                function q99(f09) {
                    q49('li', f09).not('.mbsc-lv-item').each(function() {
                        H99(q49(this));
                    });
                    q49('li[data-role="list-divider"]', f09).removeClass('mbsc-lv-item').addClass('mbsc-lv-gr-title');
                    q49('ul,ol', f09).not('.mbsc-lv').addClass('mbsc-lv').prepend(P89).parent().addClass('mbsc-lv-parent').prepend(x89);
                    q49('.mbsc-lv-back', f09).each(function() {
                        q49(this).attr('data-back', q49(this).parent().parent().attr('data-ref'));
                    });
                }

                function H99(D39) {
                    var W39;
                    if (!D39.attr('data-ref')) {
                        W39 = C49++;
                        D39.attr('data-ref', W39);
                        W49[W39] = {
                            item: D39,
                            child: D39.children('ul,ol'),
                            parent: D39.parent(),
                            ref: D39.parent()[0] === G49 ? null : D39.parent().parent().attr('data-ref')
                        };
                    }
                    D39.addClass('mbsc-lv-item');
                    if (X49.sortable.handle && D39.attr('data-role') != 'list-divider' && !D39.children('.mbsc-lv-handle-c').length) {
                        D39.append(K99);
                    }
                    if (v49.enhance && !D39.hasClass('mbsc-lv-item-enhanced')) {
                        var R09 = D39.attr('data-icon'),
                            z09 = D39.find('img').eq(0).addClass('mbsc-lv-img');
                        if (z09.is(':first-child')) {
                            D39.addClass('mbsc-lv-img-' + (v49.rtl ? 'right' : 'left'));
                        } else if (z09.length) {
                            D39.addClass('mbsc-lv-img-' + (v49.rtl ? 'left' : 'right'));
                        }
                        D39.addClass('mbsc-lv-item-enhanced').children().each(function(T09, N09) {
                            N09 = q49(N09);
                            if (N09.is('p, h1, h2, h3, h4, h5, h6')) {
                                N09.addClass('mbsc-lv-txt');
                            }
                        });
                        if (R09) {
                            D39.addClass('mbsc-lv-item-ic-' + (D39.attr('data-icon-align') || (v49.rtl ? 'right' : 'left'))).append('<div class="mbsc-lv-item-ic mbsc-ic mbsc-ic-' + R09 + '"></div>');
                        }
                    }
                }

                function m79(h39, S39) {
                    return q49.isFunction(h39) ? h39.call(this, S39, X49) : h39;
                }

                function Y79(g39) {
                    N79 = g39[0].style;
                    N79[w49 + 'Transform'] = '';
                    N79[w49 + 'Transition'] = '';
                    N79.top = '';
                    g39.removeClass('mbsc-lv-item-swiping');
                }

                function y99(j39) {
                    j39.css('top', '').removeClass('mbsc-lv-item-undo');
                    if (R89) {
                        X49.animate(z79, 'collapse', function() {
                            z79.remove();
                        });
                    } else {
                        z79.remove();
                    }
                    v89();
                    W79 = null;
                    R89 = null;
                }

                function v89(G39, n39) {
                    if (!T79) {
                        u79.attr('class', 'mbsc-lv-ic-s mbsc-lv-ic mbsc-ic mbsc-ic-none');
                        B49.attr('style', '').removeClass('mbsc-lv-stage-c-v');
                        g79.html('');
                    }
                    B49.removeClass('mbsc-lv-left mbsc-lv-right');
                    if (G39) {
                        I49('onSlideEnd', {
                            target: G39[0],
                            index: u49
                        });
                        if (n39) {
                            n39();
                        }
                    }
                }

                function N89(s39, r39) {
                    var e39 = m79(s39.text, {
                        target: L49[0],
                        index: u49
                    }) || '';
                    if (m79(s39.disabled, {
                            target: L49[0],
                            index: u49
                        })) {
                        B49.addClass('mbsc-lv-ic-disabled');
                    } else {
                        B49.removeClass('mbsc-lv-ic-disabled');
                    }
                    B49.css('background-color', s39.color || (s39.percent === 0 ? F99(s49) : M49));
                    S49.attr('class', 'mbsc-lv-ic-c mbsc-lv-ic-' + (r39 ? 'move-' : '') + (s49 < 0 ? 'right' : 'left'));
                    u79.attr('class', ' mbsc-lv-ic-s mbsc-lv-ic mbsc-ic mbsc-ic-' + (s39.icon || 'none'));
                    g79.attr('class', 'mbsc-lv-ic-text' + (s39.icon ? '' : ' mbsc-lv-ic-text-only') + (e39 ? '' : ' mbsc-lv-ic-only')).html(e39 || '&nbsp;');
                    if (v49.animateIcons) {
                        if (l89) {
                            u79.addClass('mbsc-lv-ic-v');
                        } else {
                            setTimeout(function() {
                                u79.addClass('mbsc-lv-ic-a');
                            }, 10);
                        }
                    }
                }

                function C89() {
                    clearTimeout(h79);
                    if (!y89 && X49.sortable) {
                        y89 = true;
                        J79.remove();
                    }
                }

                function z99(I39, B39, V39, O39) {
                    B39 = Math.max(F89, Math.min(B39, c89));
                    N79 = I39[0].style;
                    N79[w49 + 'Transform'] = 'translate3d(0,' + B39 + 'px,0)';
                    N79[w49 + 'Transition'] = E49 + 'transform ' + (V39 || 0) + 'ms ease-out';
                    if (O39) {
                        l79++;
                        setTimeout(function() {
                            O39();
                            l79--;
                        }, V39);
                    }
                }

                function U79(u39, v39, o39, k39, J39) {
                    v39 = Math.max(H79 == 'right' ? 0 : -100, Math.min(v39, H79 == 'left' ? 0 : 100));
                    N79 = u39[0].style;
                    u39.attr('data-pos', v39);
                    N79[w49 + 'Transform'] = 'translate3d(' + (k39 ? E79 * v39 / 100 + 'px' : v39 + '%') + ',0,0)';
                    N79[w49 + 'Transition'] = E49 + 'transform ' + (o39 || 0) + 'ms';
                    if (J39) {
                        l79++;
                        setTimeout(function() {
                            J39();
                            l79--;
                        }, o39);
                    }
                    s49 = v39;
                }

                function e79(Y39, L39, X39) {
                    q49(P49).off('.mbsc-lv-conf');
                    S49.off('.mbsc-lv-conf');
                    if (L39 !== false) {
                        U79(Y39, 0, Y39.attr('data-pos') !== '0' ? 200 : 0, false, function() {
                            v89(Y39, X39);
                            Y79(Y39);
                        });
                    } else {
                        v89(Y39, X39);
                    }
                    a49 = false;
                }

                function D89() {
                    U79(L49, W89 + g49 * 100 / E79);
                    H89 = false;
                }

                function S89(Z39, d39, M39, E39, A39) {
                    var t39, U39;
                    a49 = true;
                    q49(P49).off('.mbsc-lv-conf').on('touchstart.mbsc-lv-conf mousedown.mbsc-lv-conf', function(Q39) {
                        Q39.preventDefault();
                        if (E39) {
                            y99(d39);
                        }
                        e79(d39, true, A39);
                    });
                    if (!B79) {
                        S49.off('.mbsc-lv-conf').on('touchstart.mbsc-lv-conf mousedown.mbsc-lv-conf', function(m39) {
                            m39.stopPropagation();
                            t39 = K49(m39, 'X');
                            U39 = K49(m39, 'Y');
                        }).on('touchend.mbsc-lv-conf mouseup.mbsc-lv-conf', function(p39) {
                            p39.preventDefault();
                            if (p39.type === 'touchend') {
                                c49.preventClick();
                            }
                            if (Math.abs(K49(p39, 'X') - t39) < 10 && Math.abs(K49(p39, 'Y') - U39) < 10) {
                                p89(Z39, d39, M39, A39);
                                if (E39) {
                                    R89 = null;
                                    y99(d39);
                                }
                            }
                        });
                    }
                }

                function p89(F39, a39, i39, C39) {
                    var P39, x39 = {
                        icon: 'undo2',
                        text: v49.undoText,
                        color: '#b1b1b1',
                        action: function() {
                            X49.undo();
                        }
                    };
                    if (F39.undo) {
                        X49.startActionTrack();
                        if (q49.isFunction(F39.undo)) {
                            X49.addUndoAction(function() {
                                F39.undo.call(G49, {
                                    target: a39[0],
                                    index: i39
                                }, X49);
                            });
                        }
                        W79 = a39.attr('data-ref');
                    }
                    P39 = F39.action.call(G49, {
                        target: a39[0],
                        index: i39
                    }, X49);
                    if (F39.undo) {
                        X49.endActionTrack();
                        if (P39 !== false) {
                            U79(a39, +a39.attr('data-pos') < 0 ? -100 : 100, 200);
                        }
                        z79.height(O49).insertAfter(a39);
                        a39.css('top', r49).addClass('mbsc-lv-item-undo');
                        a89.hide();
                        S49.show();
                        B49.append(S49);
                        N89(x39);
                        S89(x39, a39, i39, true, C39);
                    } else {
                        e79(a39, P39, C39);
                    }
                }

                function g89(w39, K39) {
                    if (m79(K39.disabled, {
                            target: L49[0],
                            index: u49
                        })) {
                        q49('.mbsc-ic-' + K39.icon, B49).addClass('mbsc-lv-ic-disabled');
                    }
                }

                function M99() {
                    if (x79 || !T79) {
                        var b39, l39 = k49.scrollTop(),
                            y39 = V49.offset().top,
                            H39 = V49[0].offsetHeight,
                            f39 = y79 ? k49.offset().top : l39;
                        q49('.mbsc-lv-gr-title', V49).each(function(c39, q39) {
                            if (q49(q39).offset().top < f39) {
                                b39 = q39;
                            }
                        });
                        if (y39 < f39 && y39 + H39 > f39) {
                            b79.show().empty().append(q49(b39).clone());
                        } else {
                            b79.hide();
                        }
                    }
                }

                function n89(T39) {
                    if (D79) {
                        T39.stopPropagation();
                        T39.preventDefault();
                        D79 = false;
                    }
                }

                function o89() {
                    clearTimeout(a99);
                    a99 = setTimeout(function() {
                        X79 = k49[0].innerHeight || k49.innerHeight();
                        Z89 = y79 ? k49.offset().top : 0;
                        if (T79) {
                            r49 = L49[0].offsetTop;
                            O49 = L49[0].offsetHeight;
                            B49.css({
                                top: r49,
                                height: O49
                            });
                        }
                    }, 200);
                }

                function r89() {
                    if (!z89) {
                        clearTimeout(b99);
                        if (a49) {
                            q49(P49).trigger('touchstart');
                        }
                        if (Q89) {
                            X49.close(q79, b89);
                            Q89 = false;
                            q79 = null;
                        }
                    }
                }

                function I79(D99, W99, R39, z39) {
                    D99.removeClass('mbsc-lv-item-dragging');
                    z79.remove();
                    I49('onSortEnd', {
                        target: D99[0],
                        index: D49
                    });
                    if (v49.vibrate) {
                        U49();
                    }
                    if (z39) {
                        X49.addUndoAction(function(N39) {
                            X49.move(D99, W99, null, N39, R39, true);
                        }, true);
                        I49('onSortUpdate', {
                            target: D99[0],
                            index: D49
                        });
                    }
                }

                function J89() {
                    x79 = true;
                    R79 = false;
                    f79 = false;
                    L79 = 0;
                    D49 = u49;
                    if (v49.vibrate) {
                        U49();
                    }
                    h49 = n79(L49, 'next');
                    c79 = h49.length && h49[0].offsetTop;
                    e49 = n79(L49, 'prev');
                    K79 = e49.length && e49[0].offsetTop + e49[0].offsetHeight;
                    z79.height(O49).insertAfter(L49);
                    L49.css({
                        top: r49
                    }).addClass('mbsc-lv-item-dragging').removeClass('mbsc-lv-item-active').appendTo(d99);
                    I49('onSortStart', {
                        target: L49[0],
                        index: D49
                    });
                }

                function l99(r99) {
                    var j99, g99, n99, G99 = false,
                        h99 = true;
                    p49(N99);
                    H89 = false;
                    if (!t79) {
                        D89();
                    }
                    if (J49.actions) {
                        if (Math.abs(s49) > 10 && O79) {
                            U79(L49, s49 < 0 ? -O79 : O79, 200);
                            G99 = true;
                            a49 = true;
                            j89 = L49;
                            f99 = u49;
                            q49(P49).on('touchstart.mbsc-lv-conf mousedown.mbsc-lv-conf', function(S99) {
                                S99.preventDefault();
                                e79(L49, true, r99);
                            });
                        }
                    } else if (s49) {
                        if (v49.quickSwipe && !t79) {
                            n99 = new Date() - h89;
                            j99 = n99 < 300 && g49 < -50;
                            g99 = n99 < 300 && g49 > 50;
                            if (j99) {
                                l89 = true;
                                n49 = J49.left;
                                N89(n49, v49.iconSlide);
                            } else if (g99) {
                                l89 = true;
                                n49 = J49.right;
                                N89(n49, v49.iconSlide);
                            }
                        }
                        if (n49 && n49.action) {
                            A99 = m79(n49.disabled, {
                                target: L49[0],
                                index: u49
                            });
                            if (!A99) {
                                G99 = true;
                                a49 = t79 || m79(n49.confirm, {
                                    target: L49[0],
                                    index: u49
                                });
                                if (a49) {
                                    U79(L49, (s49 < 0 ? -1 : 1) * S49[0].offsetWidth * 100 / E79, 200, true);
                                    S89(n49, L49, u49, false, r99);
                                } else {
                                    p89(n49, L49, u49, r99);
                                }
                            }
                        }
                    }
                    if (!G99) {
                        e79(L49, h99, r99);
                    }
                    H79 = false;
                }

                function V89() {
                    var e99 = false;
                    if (!H89) {
                        if (J49.actions) {
                            B49.attr('class', 'mbsc-lv-stage-c-v mbsc-lv-stage-c mbsc-lv-' + (s49 < 0 ? 'right' : 'left'));
                        } else {
                            if (F79 && s49 <= F79.percent) {
                                a79--;
                                i79 = F79;
                                F79 = v79[a79];
                                e99 = true;
                            } else if (i79 && s49 >= i79.percent) {
                                a79++;
                                F79 = i79;
                                i79 = v79[a79];
                                e99 = true;
                            }
                            if (e99) {
                                n49 = s49 > 0 ? F79 : i79;
                                if (n49) {
                                    N89(n49, v49.iconSlide);
                                    I49('onStageChange', {
                                        target: L49[0],
                                        index: u49,
                                        stage: n49
                                    });
                                }
                            }
                        }
                        if (!t79) {
                            H89 = true;
                            N99 = m49(D89);
                        }
                    }
                }

                function I89() {
                    H79 = m79(J49.swipe, {
                        target: L49[0],
                        index: u49,
                        direction: g49 > 0 ? 'right' : 'left'
                    });
                    if (H79) {
                        C89();
                        clearTimeout(M79);
                        if (J49.actions) {
                            O79 = P99(J49, g49);
                            a89.html(J49.icons).show().children().css('width', O79 + '%');
                            S49.hide();
                            q49('.mbsc-lv-ic-m', B49).removeClass('mbsc-lv-ic-disabled');
                            q49(J49.leftMenu).each(g89);
                            q49(J49.rightMenu).each(g89);
                        } else {
                            S49.show();
                            a89.hide();
                            a79 = J49.start + (g49 > 0 ? 0 : 1);
                            F79 = v79[a79 - 1];
                            i79 = v79[a79];
                        }
                        L49.addClass('mbsc-lv-item-swiping').removeClass('mbsc-lv-item-active');
                        g79.css('line-height', O49 + 'px');
                        B49.css({
                            top: r49,
                            height: O49,
                            backgroundColor: F99(g49)
                        }).addClass('mbsc-lv-stage-c-v').appendTo(j49.parent());
                        if (v49.iconSlide) {
                            L49.append(S49);
                        }
                        I49('onSlideStart', {
                            target: L49[0],
                            index: u49
                        });
                    }
                }

                function f89(V99) {
                    var O99, k99, B99, I99, s99 = L49;
                    if (T79) {
                        T79 = false;
                        C89();
                        if (V99.type == 'mouseup') {
                            q49(P49).off('mousemove', k89).off('mouseup', f89);
                        }
                        if (!A79) {
                            T99 = setTimeout(function() {
                                z89 = false;
                            }, 300);
                        }
                        if (H79 || A79 || x79) {
                            D79 = true;
                        }
                        if (H79) {
                            l99();
                        } else if (x79) {
                            B99 = j49;
                            if (R79) {
                                Y79(L49.detach());
                                k99 = W49[R79.attr('data-ref')];
                                D49 = o79(k99.child).length;
                                R79.removeClass('mbsc-lv-item-hl');
                                if (v49.navigateOnDrop) {
                                    U89(R79, function() {
                                        X49.add(null, L49, null, null, R79, true);
                                        k79(L49);
                                        I79(L49, u49, B99, true);
                                    });
                                } else {
                                    X49.add(null, L49, null, null, R79, true);
                                    I79(L49, u49, B99, true);
                                }
                            } else if (f79) {
                                Y79(L49.detach());
                                k99 = W49[f79.attr('data-back')];
                                D49 = o79(k99.parent).index(k99.item) + 1;
                                f79.removeClass('mbsc-lv-item-hl');
                                if (v49.navigateOnDrop) {
                                    U89(f79, function() {
                                        X49.add(null, L49, D49, null, j49, true);
                                        k79(L49);
                                        I79(L49, u49, B99, true);
                                    });
                                } else {
                                    X49.add(null, L49, D49, null, k99.parent, true);
                                    I79(L49, u49, B99, true);
                                }
                            } else {
                                O99 = z79[0].offsetTop - r49;
                                z99(L49, O99, Math.abs(O99 - Math.max(F89, Math.min(d79 + L79, c89))) * 6, function() {
                                    Y79(L49);
                                    L49.insertBefore(z79);
                                    I79(L49, u49, B99, D49 !== u49);
                                });
                            }
                            x79 = false;
                        } else if (!A79 && Math.abs(g49) < 5 && Math.abs(d79) < 5) {
                            if (J49.tap) {
                                I99 = J49.tap.call(G49, {
                                    target: L49,
                                    index: u49,
                                    domEvent: V99
                                }, X49);
                            }
                            if (B89) {
                                if (V99.type === 'touchend') {
                                    c49.preventClick();
                                }
                                L49.addClass('mbsc-lv-item-active');
                                I49('onItemActivate', {
                                    target: L49[0],
                                    domEvent: V99
                                });
                            }
                            I99 = I49('onItemTap', {
                                target: L49[0],
                                index: u49,
                                domEvent: V99
                            });
                            if (I99 !== false) {
                                U89(L49);
                            }
                        }
                        clearTimeout(M79);
                        setTimeout(function() {
                            s99.removeClass('mbsc-lv-item-active');
                            I49('onItemDeactivate', {
                                target: s99[0]
                            });
                        }, 100);
                        A79 = false;
                        n49 = null;
                    }
                }

                function k89(L99) {
                    var X99 = false,
                        v99 = true;
                    if (T79) {
                        x99 = K49(L99, 'X');
                        i99 = K49(L99, 'Y');
                        g49 = x99 - r79;
                        d79 = i99 - G79;
                        clearTimeout(C99);
                        if (!x79 && !H79 && !A79 && !L49.hasClass('mbsc-lv-back')) {
                            if (Math.abs(d79) > 10) {
                                A79 = true;
                                f89(A49({}, L99, {
                                    type: L99.type == 'mousemove' ? 'mouseup' : 'touchend'
                                }));
                                clearTimeout(M79);
                            } else if (Math.abs(g49) > 7) {
                                I89();
                            }
                        }
                        if (H79) {
                            L99.preventDefault();
                            s49 = g49 / E79 * 100;
                            V89();
                        } else if (x79) {
                            L99.preventDefault();
                            var J99, u99 = k49.scrollTop(),
                                Y99 = Math.max(F89, Math.min(d79 + L79, c89)),
                                o99 = y79 ? L89 - Z89 + u99 - L79 : L89;
                            if (X79 + u99 < o99 + Y99 + O49) {
                                k49.scrollTop(o99 + Y99 - X79 + O49);
                                J99 = true;
                            } else if (o99 + Y99 < u99) {
                                k49.scrollTop(o99 + Y99);
                                J99 = true;
                            }
                            if (J99) {
                                L79 += k49.scrollTop() - u99;
                            }
                            if (c79) {
                                if (X49.sortable.multiLevel && h49.hasClass('mbsc-lv-parent')) {
                                    if (r49 + O49 / 4 + Y99 > c79) {
                                        X99 = true;
                                    } else if (r49 + O49 - O49 / 4 + Y99 > c79) {
                                        R79 = h49.addClass('mbsc-lv-item-hl');
                                        v99 = false;
                                    }
                                } else if (r49 + O49 / 2 + Y99 > c79) {
                                    if (h49.hasClass('mbsc-lv-back')) {
                                        if (X49.sortable.multiLevel) {
                                            f79 = h49.addClass('mbsc-lv-item-hl');
                                            v99 = false;
                                        }
                                    } else {
                                        X99 = true;
                                    }
                                }
                                if (X99) {
                                    z79.insertAfter(h49);
                                    e49 = h49;
                                    h49 = n79(h49, 'next');
                                    K79 = c79;
                                    c79 = h49.length && h49[0].offsetTop;
                                    D49++;
                                }
                            }
                            if (!X99 && K79) {
                                if (X49.sortable.multiLevel && e49.hasClass('mbsc-lv-parent')) {
                                    if (r49 + O49 - O49 / 4 + Y99 < K79) {
                                        X99 = true;
                                    } else if (r49 + O49 / 4 + Y99 < K79) {
                                        R79 = e49.addClass('mbsc-lv-item-hl');
                                        v99 = false;
                                    }
                                } else if (r49 + O49 / 2 + Y99 < K79) {
                                    if (e49.hasClass('mbsc-lv-back')) {
                                        if (X49.sortable.multiLevel) {
                                            f79 = e49.addClass('mbsc-lv-item-hl');
                                            v99 = false;
                                        }
                                    } else {
                                        X99 = true;
                                    }
                                }
                                if (X99) {
                                    z79.insertBefore(e49);
                                    h49 = e49;
                                    e49 = n79(e49, 'prev');
                                    c79 = K79;
                                    K79 = e49.length && e49[0].offsetTop + e49[0].offsetHeight;
                                    D49--;
                                }
                            }
                            if (v99) {
                                if (R79) {
                                    R79.removeClass('mbsc-lv-item-hl');
                                    R79 = false;
                                }
                                if (f79) {
                                    f79.removeClass('mbsc-lv-item-hl');
                                    f79 = false;
                                }
                            }
                            if (X99) {
                                I49('onSortChange', [L49, D49]);
                            }
                            z99(L49, Y99);
                            I49('onSort', [L49, D49]);
                        } else if (Math.abs(g49) > 5 || Math.abs(d79) > 5) {
                            C89();
                        }
                    }
                }

                function Q99(m99) {
                    var p99;
                    if (m99.type === 'touchstart') {
                        z89 = true;
                        clearTimeout(T99);
                    }
                    if (Q49(m99, this) && !T79 && !l79 && !a49 && !T89) {
                        T79 = true;
                        y89 = true;
                        r79 = K49(m99, 'X');
                        G79 = K49(m99, 'Y');
                        g49 = 0;
                        d79 = 0;
                        L49 = q49(this);
                        p99 = L49;
                        e89();
                        B89 = v49.onItemTap || J49.tap || L49.hasClass('mbsc-lv-parent') || L49.hasClass('mbsc-lv-back');
                        Z99 = V49.offset().top;
                        L89 = L49.offset().top;
                        if (B89) {
                            M79 = setTimeout(function() {
                                p99.addClass('mbsc-lv-item-active');
                                I49('onItemActivate', {
                                    target: p99[0],
                                    domEvent: m99
                                });
                            }, 120);
                        }
                        if (X49.sortable && !L49.hasClass('mbsc-lv-back')) {
                            if (!X49.sortable.group) {
                                t89 = L49.nextUntil('.mbsc-lv-gr-title').filter('.mbsc-lv-item');
                                X89 = L49.prevUntil('.mbsc-lv-gr-title').filter('.mbsc-lv-item');
                            }
                            F89 = (!X49.sortable.group ? X89.length ? X89.eq(-1) : L49 : j49.children('li').eq(0))[0].offsetTop - r49;
                            c89 = (!X49.sortable.group ? t89.length ? t89.eq(-1) : L49 : j49.children('li').eq(-1))[0].offsetTop - r49;
                            if (X49.sortable.handle) {
                                if (q49(m99.target).hasClass('mbsc-lv-handle')) {
                                    clearTimeout(M79);
                                    if (w49 === 'Moz') {
                                        m99.preventDefault();
                                        J89();
                                    } else {
                                        h79 = setTimeout(function() {
                                            J89();
                                        }, 100);
                                    }
                                }
                            } else {
                                h79 = setTimeout(function() {
                                    J79.appendTo(L49);
                                    J79[0].style[w49 + 'Animation'] = 'mbsc-lv-fill ' + (v49.sortDelay - 100) + 'ms linear';
                                    clearTimeout(C99);
                                    clearTimeout(M79);
                                    y89 = false;
                                    h79 = setTimeout(function() {
                                        J79[0].style[w49 + 'Animation'] = '';
                                        J89();
                                    }, v49.sortDelay - 80);
                                }, 80);
                            }
                        }
                        if (m99.type == 'mousedown') {
                            q49(P49).on('mousemove', k89).on('mouseup', f89);
                        }
                    }
                }

                function e89() {
                    l89 = false;
                    D79 = false;
                    s49 = 0;
                    W89 = 0;
                    h89 = new Date();
                    E79 = j49.width();
                    w99 = o79(j49);
                    u49 = w99.index(L49);
                    O49 = L49[0].offsetHeight;
                    r49 = L49[0].offsetTop;
                    J49 = p79[L49.attr('data-type') || 'defaults'];
                    v79 = J49.stages;
                }
                var T79, O79, M79, s49, y89, j89, f99, o49, D49, j49, s79, j79, w99, n49, a79, a99, B79, A99, g49, d79, R79, f79, x79, d99, C99, x99, i99, I49, J79, q89, b79, Y89, t99, y79, K99, c99, q79, Q89, b89, O89, b99, P89, x89, u79, S49, B49, E79, L49, O49, u49, L89, Z99, c89, F89, a89, h49, c79, i79, t89, S79, D79, z89, T99, X89, z79, e49, K79, F79, l89, N99, H89, v49, A79, t79, d89, M89, v79, W89, h89, r79, G79, N79, H79, u89, G89, B89, g79, h79, J49, p79, W79, R89, k49, X79, L79, Z89, X49 = this,
                    G49 = R99,
                    V49 = q49(G49),
                    l79 = 0,
                    C79 = 0,
                    r49 = 0,
                    V79 = {},
                    K89 = {},
                    W49 = {};
                d49.Base.call(this, R99, s89, true);
                X49.animate = function(j09, g09, h09) {
                    E99(j09, 'mbsc-lv-item-' + g09, h09);
                };
                X49.add = function(F5z, c5z, z5z, l5z, a5z, T5z) {
                    var q5z, f5z, H5z, w5z, N5z, b5z, y5z = '',
                        D09 = a5z === F49 ? V49 : Z79(a5z),
                        W09 = D09,
                        S09 = typeof c5z !== 'object' ? q49('<li data-ref="' + C49++ + '" data-id="' + F5z + '">' + c5z + '</li>') : c5z,
                        K5z = S09.attr('data-pos') < 0 ? 'left' : 'right',
                        R5z = S09.attr('data-ref');
                    l5z = l5z || x49;
                    if (!R5z) {
                        R5z = C49++;
                        S09.addClass('mbsc-lv-item').attr('data-ref', R5z);
                    }
                    H99(S09);
                    if (!T5z) {
                        X49.addUndoAction(function(i5z) {
                            if (w5z) {
                                X49.navigate(D09, function() {
                                    W09.remove();
                                    D09.removeClass('mbsc-lv-parent').children('.mbsc-lv-arr').remove();
                                    N5z.child = D09.children('ul,ol');
                                    X49.remove(S09, null, i5z, true);
                                });
                            } else {
                                X49.remove(S09, null, i5z, true);
                            }
                        }, true);
                    }
                    E89(S09, function(P5z) {
                        Y79(S09.css('top', '').removeClass('mbsc-lv-item-undo'));
                        if (D09.is('li')) {
                            b5z = D09.attr('data-ref');
                            if (!D09.children('ul,ol').length) {
                                w5z = true;
                                D09.append('<ul></ul>');
                            }
                        } else {
                            b5z = D09.children('.mbsc-lv-back').attr('data-back');
                        }
                        N5z = W49[b5z];
                        if (N5z) {
                            if (!N5z.child.length) {
                                D09.addClass('mbsc-lv-parent').prepend(x89);
                                W09 = D09.children('ul,ol').prepend(P89).addClass('mbsc-lv');
                                N5z.child = W09;
                                q49('.mbsc-lv-back', D09).attr('data-back', b5z);
                            } else {
                                W09 = N5z.child;
                            }
                        }
                        W49[R5z] = {
                            item: S09,
                            child: S09.children('ul,ol'),
                            parent: W09,
                            ref: b5z
                        };
                        H5z = o79(W09);
                        f5z = H5z.length;
                        if (z5z === F49 || z5z === null) {
                            z5z = f5z;
                        }
                        if (T5z) {
                            y5z = 'mbsc-lv-item-new-' + (T5z ? K5z : '');
                        }
                        q99(S09.addClass(y5z));
                        if (z5z !== false) {
                            if (!f5z) {
                                q5z = q49('.mbsc-lv-back', W09);
                                if (q5z.length) {
                                    S09.insertAfter(q5z);
                                } else {
                                    W09.append(S09);
                                }
                            } else if (z5z < f5z) {
                                S09.insertBefore(H5z.eq(z5z));
                            } else {
                                S09.insertAfter(H5z.eq(f5z - 1));
                            }
                        }
                        if (W09.hasClass('mbsc-lv-v')) {
                            X49.animate(S09.height(S09[0].offsetHeight), T5z && W79 === R5z ? 'none' : 'expand', function(x5z) {
                                X49.animate(x5z.height(''), T5z ? 'add-' + K5z : 'pop-in', function(C5z) {
                                    l5z.call(G49, C5z.removeClass(y5z));
                                    P5z();
                                });
                            });
                        } else {
                            l5z.call(G49, S09.removeClass(y5z));
                            P5z();
                        }
                        o49.trigger('mbsc-enhance', [{
                            theme: v49.theme,
                            lang: v49.lang
                        }]);
                        I49('onItemAdd', {
                            target: S09[0]
                        });
                    });
                };
                X49.swipe = function(d5z, A5z, E5z, t5z, U5z) {
                    d5z = Z79(d5z);
                    L49 = d5z;
                    B79 = t5z;
                    t79 = true;
                    T79 = true;
                    E5z = E5z === F49 ? 300 : E5z;
                    g49 = A5z > 0 ? 1 : -1;
                    e89();
                    I89();
                    U79(d5z, A5z, E5z);
                    clearTimeout(G89);
                    clearInterval(u89);
                    u89 = setInterval(function() {
                        s49 = c49.getPosition(d5z) / E79 * 100;
                        V89();
                    }, 10);
                    G89 = setTimeout(function() {
                        clearInterval(u89);
                        s49 = A5z;
                        V89();
                        l99(U5z);
                        B79 = false;
                        t79 = false;
                        T79 = false;
                    }, E5z);
                };
                X49.openStage = function(M5z, Z5z, Q5z, m5z) {
                    if (V79[Z5z]) {
                        X49.swipe(M5z, V79[Z5z].percent, Q5z, m5z);
                    }
                };
                X49.openActions = function(p5z, X5z, L5z, v5z) {
                    p5z = Z79(p5z);
                    var Y5z = P99(p79[p5z.attr('data-type') || 'defaults'], X5z == 'left' ? -1 : 1);
                    X49.swipe(p5z, X5z == 'left' ? -Y5z : Y5z, L5z, v5z);
                };
                X49.close = function(u5z, o5z) {
                    X49.swipe(u5z, 0, o5z);
                };
                X49.remove = function(J5z, V5z, k5z, I5z) {
                    var s5z, B5z, O5z;
                    k5z = k5z || x49;
                    J5z = Z79(J5z);
                    if (J5z.length) {
                        B5z = J5z.parent();
                        s5z = o79(B5z).index(J5z);
                        O5z = J5z[0].style;
                        if (!I5z) {
                            if (J5z.attr('data-ref') === W79) {
                                R89 = true;
                            }
                            X49.addUndoAction(function(e5z) {
                                X49.add(null, J5z, s5z, e5z, B5z, true);
                            }, true);
                        }
                        E89(J5z, function(r5z) {
                            V5z = V5z || (J5z.attr('data-pos') < 0 ? 'left' : 'right');
                            if (B5z.hasClass('mbsc-lv-v')) {
                                X49.animate(J5z.addClass('mbsc-lv-removed'), I5z ? 'pop-out' : 'remove-' + V5z, function(G5z) {
                                    O5z.height = G5z[0].offsetHeight + 'px';
                                    X49.animate(G5z, 'collapse', function(n5z) {
                                        O5z.height = '';
                                        Y79(n5z.removeClass('mbsc-lv-removed'));
                                        if (k5z.call(G49, n5z) !== false) {
                                            n5z.remove();
                                        }
                                        r5z();
                                    });
                                });
                            } else {
                                if (k5z.call(G49, J5z) !== false) {
                                    J5z.remove();
                                }
                                r5z();
                            }
                            I49('onItemRemove', {
                                target: J5z[0]
                            });
                        });
                    }
                };
                X49.move = function(j5z, h5z, S5z, D5z, W5z, g5z) {
                    j5z = Z79(j5z);
                    if (!g5z) {
                        X49.startActionTrack();
                    }
                    B49.append(S49);
                    X49.remove(j5z, S5z, null, g5z);
                    X49.add(null, j5z, h5z, D5z, W5z, g5z);
                    if (!g5z) {
                        X49.endActionTrack();
                    }
                };
                X49.navigate = function(R1z, T1z) {
                    var z1z, N1z;
                    R1z = Z79(R1z);
                    z1z = W49[R1z.attr('data-ref')];
                    N1z = U99(R1z);
                    if (z1z) {
                        m89(N1z >= C79 ? 'r' : 'l', z1z.parent, R1z, T1z, true);
                        C79 = N1z;
                    }
                };
                X49._processSettings = function() {
                    if (V49.is('[mbsc-enhance]')) {
                        Y89 = true;
                        V49.removeAttr('mbsc-enhance');
                    }
                };
                X49._init = function() {
                    var H1z, q1z, c1z, f1z = 0,
                        y1z = '',
                        b1z = '',
						p = V49.find("ul,ol").length ? "left" : "right",
                        l1z = '';
  
					c1z = v49.sort || v49.sortable;;
					
					H1z = 'mbsc-lv-cont mbsc-lv-' + v49.theme + (v49.rtl ? ' mbsc-lv-rtl' : '') + (v49.baseTheme ? ' mbsc-lv-' + v49.baseTheme : '') + (v49.animateIcons ? ' mbsc-lv-ic-anim' : '') + (v49.striped ? ' mbsc-lv-alt-row ' : '') + (v49.fixedHeader ? ' mbsc-lv-has-fixed-header ' : '');
					
                    X49.sortable = c1z || false;
                    if (!o49) {
                        y1z += '<div class="mbsc-lv-multi-c"></div>';
                        y1z += '<div class="mbsc-lv-ic-c"><div class="mbsc-lv-ic-s mbsc-lv-ic mbsc-ic mbsc-ic-none"></div><div class="mbsc-lv-ic-text"></div></div>';
                        V49.addClass('mbsc-lv mbsc-lv-v mbsc-lv-root').show();
                        B49 = q49('<div class="mbsc-lv-stage-c">' + y1z + '</div>');
                        S49 = q49('.mbsc-lv-ic-c', B49);
                        a89 = q49('.mbsc-lv-multi-c', B49);
                        u79 = q49('.mbsc-lv-ic-s', B49);
                        g79 = q49('.mbsc-lv-ic-text', B49);
                        z79 = q49('<li class="mbsc-lv-item mbsc-lv-ph"></li>');
                        J79 = q49('<div class="mbsc-lv-fill-item"></div>');
                        o49 = q49('<div class="' + H1z + '"><ul class="mbsc-lv mbsc-lv-dummy"></ul><div class="mbsc-lv-sl-c"></div></div>');
                        y79 = v49.context !== 'body';
                        k49 = q49(y79 ? v49.context : t49);
                        d99 = q49('.mbsc-lv-dummy', o49);
                        o49.insertAfter(V49);
                        k49.on('orientationchange resize', o89);
                        o89();
                        o49.on('touchstart mousedown', '.mbsc-lv-item', Q99).on('touchmove', '.mbsc-lv-item', k89).on('touchend touchcancel', '.mbsc-lv-item', f89);
                        G49.addEventListener('click', n89, true);
                        o49.on('touchstart mousedown', '.mbsc-lv-ic-m', function(K1z) {
                            if (!B79) {
                                K1z.stopPropagation();
                                K1z.preventDefault();
                            }
                            r79 = K49(K1z, 'X');
                            G79 = K49(K1z, 'Y');
                        }).on('touchend mouseup', '.mbsc-lv-ic-m', function(w1z) {
                            if (!B79) {
                                if (w1z.type === 'touchend') {
                                    c49.preventClick();
                                }
                                if (a49 && !q49(this).hasClass('mbsc-lv-ic-disabled') && Math.abs(K49(w1z, 'X') - r79) < 10 && Math.abs(K49(w1z, 'Y') - G79) < 10) {
                                    p89((s49 < 0 ? J49.rightMenu : J49.leftMenu)[q49(this).index()], j89, f99);
                                }
                            }
                        });
                        d89 = q49('.mbsc-lv-sl-c', o49).append(V49.addClass('mbsc-lv-sl-curr')).attr('data-ref', C49++);
                        j49 = V49;
                        j79 = o49;
                    } else {
                        o49.attr('class', H1z);
                        if (c1z.handle) {
                            q49('.mbsc-lv-handle-c', V49).remove();
                        }
                        q49('li:not(.mbsc-lv-back)', V49).removeClass('mbsc-lv-item');
                    }
					
					P89 = '<li class="mbsc-lv-item mbsc-lv-back">' + v49.backText + '<div class="mbsc-lv-arr mbsc-lv-ic mbsc-ic ' + v49.leftArrowClass + '"></div></li>';
					x89 = '<div class="mbsc-lv-arr mbsc-lv-ic mbsc-ic ' + v49.rightArrowClass + '"></div>';
					if (X49.sortable.handle) {
						var t59 = X49.sortable.handle === true ? p : X49.sortable.handle;
						K99 = '<div class="mbsc-lv-handle-c mbsc-lv-item-h-' + t59 + ' mbsc-lv-handle"><div class="' + v49.handleClass + ' mbsc-lv-handle-bar-c mbsc-lv-handle">' + v49.handleMarkup + '</div></div>';
					}
					
                    q99(V49);
                    M89 = 0;
                    p79 = v49.itemGroups || {};
                    p79.defaults = {
                        swipeleft: v49.swipeleft,
                        swiperight: v49.swiperight,
                        stages: v49.stages,
                        actions: v49.actions,
                        actionsWidth: v49.actionsWidth
                    };
                    q49.each(p79, function(F1z, a1z) {
                        a1z.swipe = a1z.swipe !== F49 ? a1z.swipe : v49.swipe;
                        a1z.stages = a1z.stages || [];
                        i89(a1z.stages, 1, true);
                        i89(a1z.stages.left, 1);
                        i89(a1z.stages.right, -1);
                        if (a1z.stages.left || a1z.stages.right) {
                            a1z.stages = [].concat(a1z.stages.left || [], a1z.stages.right || []);
                        }
                        q89 = false;
                        if (!a1z.stages.length) {
                            if (a1z.swipeleft) {
                                a1z.stages.push({
                                    percent: -30,
                                    action: a1z.swipeleft
                                });
                            }
                            if (a1z.swiperight) {
                                a1z.stages.push({
                                    percent: 30,
                                    action: a1z.swiperight
                                });
                            }
                        }
                        q49.each(a1z.stages, function(P1z, i1z) {
                            if (i1z.percent === 0) {
                                q89 = true;
                                return false;
                            }
                        });
                        if (!q89) {
                            a1z.stages.push({
                                percent: 0
                            });
                        }
                        a1z.stages.sort(function(x1z, C1z) {
                            return x1z.percent - C1z.percent;
                        });
                        q49.each(a1z.stages, function(d1z, E1z) {
                            if (E1z.percent === 0) {
                                a1z.start = d1z;
                                return false;
                            }
                        });
                        if (q89) {
                            a1z.left = a1z.right = a1z.stages[a1z.start];
                        } else {
                            a1z.left = a1z.stages[a1z.start - 1] || {};
                            a1z.right = a1z.stages[a1z.start + 1] || {};
                        }
                        if (a1z.actions) {
                            a1z.leftMenu = a1z.actions.left || a1z.actions;
                            a1z.rightMenu = a1z.actions.right || a1z.leftMenu;
                            b1z = '';
                            l1z = '';
                            for (f1z = 0; f1z < a1z.leftMenu.length; f1z++) {
                                b1z += '<div ' + (a1z.leftMenu[f1z].color ? 'style="background-color: ' + a1z.leftMenu[f1z].color + '"' : '') + ' class="mbsc-lv-ic-m mbsc-lv-ic mbsc-ic mbsc-ic-' + a1z.leftMenu[f1z].icon + '">' + (a1z.leftMenu[f1z].text || '') + '</div>';
                            }
                            for (f1z = 0; f1z < a1z.rightMenu.length; ++f1z) {
                                l1z += '<div ' + (a1z.rightMenu[f1z].color ? 'style="background-color: ' + a1z.rightMenu[f1z].color + '"' : '') + ' class="mbsc-lv-ic-m mbsc-lv-ic mbsc-ic mbsc-ic-' + a1z.rightMenu[f1z].icon + '">' + (a1z.rightMenu[f1z].text || '') + '</div>';
                            }
                            if (a1z.actions.left) {
                                a1z.swipe = a1z.actions.right ? a1z.swipe : 'right';
                            }
                            if (a1z.actions.right) {
                                a1z.swipe = a1z.actions.left ? a1z.swipe : 'left';
                            }
                            a1z.icons = '<div class="mbsc-lv-multi mbsc-lv-multi-ic-left">' + b1z + '</div><div class="mbsc-lv-multi mbsc-lv-multi-ic-right">' + l1z + '</div>';
                        }
                    });
                    if (v49.fixedHeader) {
                        q1z = 'mbsc-lv-fixed-header' + (y79 ? ' mbsc-lv-fixed-header-ctx mbsc-lv-' + v49.theme + (v49.baseTheme ? ' mbsc-lv-' + v49.baseTheme : '') : '');
                        if (!b79) {
                            b79 = q49('<div class="' + q1z + '"></div>');
                            if (y79) {
                                k49.before(b79);
                            } else {
                                o49.prepend(b79);
                            }
                            S79 = c49.throttle(M99, 200);
                            k49.on('scroll touchmove', S79);
                        } else {
                            b79.attr('class', q1z);
                        }
                    }
                    if (v49.hover) {
                        if (!b89) {
                            o49.on('mouseover.mbsc-lv', '.mbsc-lv-item', function() {
                                if (!q79 || q79[0] != this) {
                                    r89();
                                    q79 = q49(this);
                                    if (p79[q79.attr('data-type') || 'defaults'].actions) {
                                        b99 = setTimeout(function() {
                                            if (!z89) {
                                                Q89 = true;
                                                X49.openActions(q79, c99, b89, false);
                                            } else {
                                                q79 = null;
                                            }
                                        }, O89);
                                    }
                                }
                            }).on('mouseleave.mbsc-lv', r89);
                        }
                        b89 = v49.hover.time || 200;
                        O89 = v49.hover.timeout || 200;
                        c99 = v49.hover.direction || v49.hover || 'right';
                    }
                    if (Y89) {
                        o49.attr('mbsc-enhance', '');
                    }
                    o49.trigger('mbsc-enhance', [{
                        theme: v49.theme,
                        lang: v49.lang
                    }]);
                };
                X49._destroy = function() {
                    j79.append(j49);
                    if (y79 && b79) {
                        b79.remove();
                    }
                    if (Y89) {
                        V49.attr('mbsc-enhance', '');
                    }
                    G49.removeEventListener('click', n89, true);
                    o49.find('.mbsc-lv-txt,.mbsc-lv-img').removeClass('mbsc-lv-txt mbsc-lv-img');
                    o49.find('ul,ol').removeClass('mbsc-lv mbsc-lv-v mbsc-lv-root mbsc-lv-sl-curr').find('li').removeClass('mbsc-lv-gr-title mbsc-lv-item mbsc-lv-item-enhanced mbsc-lv-parent mbsc-lv-img-left mbsc-lv-img-right mbsc-lv-item-ic-left mbsc-lv-item-ic-right').removeAttr('data-ref');
                    q49('.mbsc-lv-back,.mbsc-lv-handle-c,.mbsc-lv-arr,.mbsc-lv-item-ic', o49).remove();
                    V49.insertAfter(o49);
                    o49.remove();
                    B49.remove();
                    k49.off('orientationchange resize', o89);
                    if (S79) {
                        k49.off('scroll touchmove', S79);
                    }
                };
                var T89, A89 = [],
                    P79 = [],
                    w89 = [],
                    Q79 = 0;
                X49.startActionTrack = function() {
                    if (!Q79) {
                        w89 = [];
                    }
                    Q79++;
                };
                X49.endActionTrack = function() {
                    Q79--;
                    if (!Q79) {
                        P79.push(w89);
                    }
                };
                X49.addUndoAction = function(t1z, U1z) {
                    var A1z = {
                        action: t1z,
                        async: U1z
                    };
                    if (Q79) {
                        w89.push(A1z);
                    } else {
                        P79.push([A1z]);
                        if (P79.length > v49.undoLimit) {
                            P79.shift();
                        }
                    }
                };
                X49.undo = function() {
                    function p1z() {
                        Q1z = A89.shift();
                        if (Q1z) {
                            T89 = true;
                            M1z = Q1z.length - 1;
                            m1z();
                        }
                    }

                    function m1z() {
                        if (M1z < 0) {
                            T89 = false;
                            p1z();
                        } else {
                            Z1z = Q1z[M1z];
                            M1z--;
                            if (Z1z.async) {
                                Z1z.action(m1z);
                            } else {
                                Z1z.action();
                                m1z();
                            }
                        }
                    }
                    var Z1z, M1z, Q1z;
                    if (P79.length) {
                        A89.push(P79.pop());
                    }
                    if (!T89) {
                        p1z();
                    }
                };
                v49 = X49.settings;
                I49 = X49.trigger;
                X49.init(s89);
            };
            d49.ListView.prototype = {
                _class: 'listview',
                _hasDef: true,
                _hasTheme: true,
                _hasLang: true,
                _defaults: {
                    context: 'body',
                    actionsWidth: 90,
                    sortDelay: 250,
                    undoLimit: 10,
                    swipe: true,
                    quickSwipe: true,
                    animateIcons: true,
                    animation: true,
                    revert: true,
                    vibrate: true,
                    handleClass: '',
                    handleMarkup: '<div class="mbsc-lv-handle-bar mbsc-lv-handle"></div><div class="mbsc-lv-handle-bar mbsc-lv-handle"></div><div class="mbsc-lv-handle-bar mbsc-lv-handle"></div>',
                    leftArrowClass: 'mbsc-ic-arrow-left4',
                    rightArrowClass: 'mbsc-ic-arrow-right4',
                    backText: 'Back',
                    undoText: 'Undo',
                    stages: []
                }
            };
            i49.themes.listview.mobiscroll = {
                leftArrowClass: 'mbsc-ic-arrow-left5',
                rightArrowClass: 'mbsc-ic-arrow-right5'
            };
            i49.presetShort('listview', 'ListView');
        }(window, document));
   
   
   
   
        var W = J.$;
        var U1 = {
            batch: 50,
            min: 0,
            max: 100,
            defaultUnit: '',
            units: null,
            unitNames: null,
            invalid: [],
            sign: false,
            step: 0.05,
            scale: 2,
            convert: function W6p(A6p) {
                return A6p;
            },
            signText: '&nbsp;',
            wholeText: 'Whole',
            fractionText: 'Fraction',
            unitText: 'Unit'
        };
        J.presets.scroller.measurement = function(P2p) {
            function S2p(y2p) {
                return Math.max(b2p, Math.min(I2p, n6p ? y2p < 0 ? Math.ceil(y2p) : Math.floor(y2p) : C2p(Math.round(y2p - d2p), T2p) + d2p));
            }

            function i2p(j2p) {
                return n6p ? C2p((Math.abs(j2p) - Math.abs(S2p(j2p))) * a2p - X2p, T2p) + X2p : 0;
            }

            function l2p(R2p) {
                var L2p = S2p(R2p),
                    W2p = i2p(R2p),
                    A2p = R2p < 0 ? '-' : '+';
                if (W2p >= a2p) {
                    if (R2p < 0) {
                        L2p--;
                    } else {
                        L2p++;
                    }
                    W2p = 0;
                }
                return [A2p, L2p, W2p];
            }

            function p2p(O2p) {
                var Y2p = +O2p[s6p],
                    c2p = n6p ? O2p[Q2p] / a2p * (Y2p < 0 ? -1 : 1) : 0;
                return (c6p && O2p[0] == '-' ? -1 : 1) * (Y2p + c2p);
            }

            function C2p(u2p, n2p) {
                return Math.round(u2p / n2p) * n2p;
            }

            function B2p(s2p, U2p) {
                s2p = s2p + '';
                while (s2p.length < U2p) {
                    s2p = '0' + s2p;
                }
                return s2p;
            }

            function M2p(b3p, J3p, t3p) {
                if (J3p === t3p || !O6p.convert) {
                    return b3p;
                }
                return O6p.convert.call(this, b3p, J3p, t3p);
            }

            function H2p(r3p, v3p, T3p) {
                r3p = r3p > T3p ? T3p : r3p;
                r3p = r3p < v3p ? v3p : r3p;
                return r3p;
            }

            function V2p(Q3p) {
                var g3p, I3p;
                v2p = M2p(O6p.min, q2p, Q3p);
                r2p = M2p(O6p.max, q2p, Q3p);
                if (n6p) {
                    b2p = v2p < 0 ? Math.ceil(v2p) : Math.floor(v2p);
                    I2p = r2p < 0 ? Math.ceil(r2p) : Math.floor(r2p);
                    k2p = i2p(v2p);
                    w2p = i2p(r2p);
                } else {
                    b2p = Math.round(v2p);
                    I2p = Math.round(r2p);
                    I2p = b2p + Math.floor((I2p - b2p) / T2p) * T2p;
                    d2p = b2p % T2p;
                }
                g3p = b2p;
                I3p = I2p;
                if (c6p) {
                    I3p = Math.abs(g3p) > Math.abs(I3p) ? Math.abs(g3p) : Math.abs(I3p);
                    g3p = g3p < 0 ? 0 : g3p;
                }
                Z2p.min = g3p < 0 ? Math.ceil(g3p / U6p) : Math.floor(g3p / U6p);
                Z2p.max = I3p < 0 ? Math.ceil(I3p / U6p) : Math.floor(I3p / U6p);
            }

            function F2p(q3p) {
                return p2p(q3p).toFixed(n6p ? m2p : 0) + (t2p ? ' ' + N2p[q3p[f2p]] : '');
            }
            var G2p = W.extend({}, P2p.settings),
                O6p = W.extend(P2p.settings, U1, G2p),
                E2p = {},
                D2p = [
                    []
                ],
                g2p = {},
                Z2p = {},
                e2p = {},
                z2p = [],
                c6p = O6p.sign,
                t2p = O6p.units && O6p.units.length,
                q2p = t2p ? O6p.defaultUnit || O6p.units[0] : '',
                N2p = [],
                n6p = O6p.step < 1,
                U6p = O6p.step > 1 ? O6p.step : 1,
                m2p = n6p ? Math.max(O6p.scale, (O6p.step + '').split('.')[1].length) : 1,
                a2p = Math.pow(10, m2p),
                T2p = Math.round(n6p ? O6p.step * a2p : O6p.step),
                K2p, u6p, x2p, o2p = -1,
                Q2p, s6p, f2p, v2p, r2p, b2p, I2p, k2p, w2p, d2p = 0,
                X2p = 0,
                h2p, Y6p, J2p = 0;
            P2p.setVal = function(P3p, x3p, Z3p, M3p, a3p) {
                P2p._setVal(W.isArray(P3p) ? F2p(P3p) : P3p, x3p, Z3p, M3p, a3p);
            };
            if (O6p.units) {
                for (Y6p = 0; Y6p < O6p.units.length; ++Y6p) {
                    h2p = O6p.units[Y6p];
                    N2p.push(O6p.unitNames ? O6p.unitNames[h2p] || h2p : h2p);
                }
            }
            if (c6p) {
                c6p = false;
                if (t2p) {
                    for (Y6p = 0; Y6p < O6p.units.length; Y6p++) {
                        if (M2p(O6p.min, q2p, O6p.units[Y6p]) < 0) {
                            c6p = true;
                        }
                    }
                } else {
                    c6p = O6p.min < 0;
                }
            }
            if (c6p) {
                D2p[0].push({
                    data: ['-', '+'],
                    label: O6p.signText
                });
                o2p = J2p++;
            }
            Z2p = {
                label: O6p.wholeText,
                data: function D3p(f3p) {
                    return b2p % U6p + f3p * U6p;
                },
                getIndex: function N3p(e3p) {
                    return Math.round((e3p - b2p % U6p) / U6p);
                }
            };
            D2p[0].push(Z2p);
            s6p = J2p++;
            V2p(q2p);
            if (n6p) {
                D2p[0].push(e2p);
                e2p.data = [];
                e2p.label = O6p.fractionText;
                for (Y6p = X2p; Y6p < a2p; Y6p += T2p) {
                    z2p.push(Y6p);
                    e2p.data.push({
                        value: Y6p,
                        display: '.' + B2p(Y6p, m2p)
                    });
                }
                Q2p = J2p++;
                K2p = Math.ceil(100 / T2p);
                if (O6p.invalid && O6p.invalid.length) {
                    W.each(O6p.invalid, function(d3p, l3p) {
                        var E3p = l3p > 0 ? Math.floor(l3p) : Math.ceil(l3p);
                        if (E3p === 0) {
                            E3p = l3p <= 0 ? -0.001 : 0.001;
                        }
                        g2p[E3p] = (g2p[E3p] || 0) + 1;
                        if (l3p === 0) {
                            E3p = 0.001;
                            g2p[E3p] = (g2p[E3p] || 0) + 1;
                        }
                    });
                    W.each(g2p, function(X3p, h3p) {
                        if (h3p < K2p) {
                            delete g2p[X3p];
                        } else {
                            g2p[X3p] = X3p;
                        }
                    });
                }
            }
            if (t2p) {
                E2p = {
                    data: [],
                    label: O6p.unitText,
                    cssClass: 'mbsc-msr-whl-unit',
                    circular: false
                };
                for (Y6p = 0; Y6p < O6p.units.length; Y6p++) {
                    E2p.data.push({
                        value: Y6p,
                        display: N2p[Y6p]
                    });
                }
                D2p[0].push(E2p);
            }
            f2p = J2p;
            return {
                wheels: D2p,
                minWidth: c6p && n6p ? 70 : 80,
                showLabel: false,
                formatValue: F2p,
                compClass: 'mbsc-msr',
                parseValue: function m3p(V3p) {
                    var H3p = (typeof V3p === 'number' ? V3p + '' : V3p) || O6p.defaultValue,
                        k3p = (H3p + '').split(' '),
                        i3p = +k3p[0],
                        C3p = [],
                        w3p, z3p = '';
                    if (t2p) {
                        z3p = W.inArray(k3p[1], N2p);
                        z3p = z3p == -1 ? W.inArray(q2p, O6p.units) : z3p;
                        z3p = z3p == -1 ? 0 : z3p;
                    }
                    x2p = t2p ? O6p.units[z3p] : '';
                    V2p(x2p);
                    i3p = isNaN(i3p) ? 0 : i3p;
                    i3p = H2p(i3p, v2p, r2p);
                    w3p = l2p(i3p);
                    w3p[1] = H2p(w3p[1], b2p, I2p);
                    u6p = i3p;
                    if (c6p) {
                        C3p[0] = w3p[0];
                        w3p[1] = Math.abs(w3p[1]);
                    }
                    C3p[s6p] = w3p[1];
                    if (n6p) {
                        C3p[Q2p] = w3p[2];
                    }
                    if (t2p) {
                        C3p[f2p] = z3p;
                    }
                    return C3p;
                },
                onCancel: function o3p() {
                    u6p = undefined;
                },
                validate: function p3p(W3p) {
                    var y3p, F3p, O3p, j3p, L3p, K3p = W3p.values,
                        B3p = W3p.index,
                        c3p = W3p.direction,
                        R3p = {},
                        S3p = [],
                        A3p = {},
                        G3p = t2p ? O6p.units[K3p[f2p]] : '';
                    if (c6p && B3p === 0) {
                        u6p = Math.abs(u6p) * (K3p[0] == '-' ? -1 : 1);
                    }
                    if (B3p === s6p || B3p === Q2p && n6p || u6p === undefined || B3p === undefined) {
                        u6p = p2p(K3p);
                        x2p = G3p;
                    }
                    if (t2p && B3p === f2p && x2p !== G3p || B3p === undefined) {
                        V2p(G3p);
                        u6p = M2p(u6p, x2p, G3p);
                        x2p = G3p;
                        F3p = l2p(u6p);
                        if (B3p !== undefined) {
                            A3p[s6p] = Z2p;
                            P2p.changeWheel(A3p);
                        }
                        if (c6p) {
                            K3p[0] = F3p[0];
                        }
                    }
                    S3p[s6p] = [];
                    if (c6p) {
                        S3p[0] = [];
                        if (v2p > 0) {
                            S3p[0].push('-');
                            K3p[0] = '+';
                        }
                        if (r2p < 0) {
                            S3p[0].push('+');
                            K3p[0] = '-';
                        }
                        L3p = Math.abs(K3p[0] == '-' ? b2p : I2p);
                        for (J2p = L3p + U6p; J2p < L3p + 20 * U6p; J2p += U6p) {
                            S3p[s6p].push(J2p);
                            R3p[J2p] = true;
                        }
                    }
                    u6p = H2p(u6p, v2p, r2p);
                    F3p = l2p(u6p);
                    O3p = c6p ? Math.abs(F3p[1]) : F3p[1];
                    y3p = c6p ? K3p[0] == '-' : u6p < 0;
                    K3p[s6p] = O3p;
                    if (y3p) {
                        F3p[0] = '-';
                    }
                    if (n6p) {
                        K3p[Q2p] = F3p[2];
                    }
                    W.each(n6p ? g2p : O6p.invalid, function(U3p, s3p) {
                        if (c6p && y3p) {
                            if (s3p <= 0) {
                                s3p = Math.abs(s3p);
                            } else {
                                return;
                            }
                        }
                        s3p = C2p(M2p(s3p, q2p, G3p), n6p ? 1 : T2p);
                        R3p[s3p] = true;
                        S3p[s6p].push(s3p);
                    });
                    K3p[s6p] = P2p.getValidValue(s6p, O3p, c3p, R3p);
                    F3p[1] = K3p[s6p] * (c6p && y3p ? -1 : 1);
                    if (n6p) {
                        S3p[Q2p] = [];
                        var Y3p = c6p ? K3p[0] + K3p[1] : (u6p < 0 ? '-' : '+') + Math.abs(F3p[1]),
                            u3p = (v2p < 0 ? '-' : '+') + Math.abs(b2p),
                            n3p = (r2p < 0 ? '-' : '+') + Math.abs(I2p);
                        if (Y3p === u3p) {
                            W(z2p).each(function(J1p, b1p) {
                                if (y3p ? b1p > k2p : b1p < k2p) {
                                    S3p[Q2p].push(b1p);
                                }
                            });
                        }
                        if (Y3p === n3p) {
                            W(z2p).each(function(r1p, t1p) {
                                if (y3p ? t1p < w2p : t1p > w2p) {
                                    S3p[Q2p].push(t1p);
                                }
                            });
                        }
                        W.each(O6p.invalid, function(T1p, v1p) {
                            j3p = l2p(M2p(v1p, q2p, G3p));
                            if ((F3p[0] === j3p[0] || F3p[1] === 0 && j3p[1] === 0 && j3p[2] === 0) && F3p[1] === j3p[1]) {
                                S3p[Q2p].push(j3p[2]);
                            }
                        });
                    }
                    return {
                        disabled: S3p,
                        valid: K3p
                    };
                }
            };
        };
        J.presetShort('measurement');
        var R3 = J.$;
        var y3 = J.presets.scroller;
        var t8 = {
            min: 0,
            max: 100,
            defaultUnit: 'km',
            units: ['m', 'km', 'in', 'ft', 'yd', 'mi']
        };
        var o3 = {
            mm: 0.001,
            cm: 0.01,
            dm: 0.1,
            m: 1,
            dam: 10,
            hm: 100,
            km: 1000,
            'in': 0.0254,
            ft: 0.3048,
            yd: 0.9144,
            ch: 20.1168,
            fur: 201.168,
            mi: 1609.344,
            lea: 4828.032
        };
        J.presetShort('distance');
        y3.distance = function(g1p) {
            var I1p = R3.extend({}, t8, g1p.settings);
            R3.extend(g1p.settings, I1p, {
                sign: false,
                convert: function Q1p(q1p, P1p, x1p) {
                    return q1p * o3[P1p] / o3[x1p];
                }
            });
            return y3.measurement.call(this, g1p);
        };
        var H3 = J.$;
        var k3 = J.presets.scroller;
        var g8 = {
            min: 0,
            max: 100,
            defaultUnit: 'N',
            units: ['N', 'kp', 'lbf', 'pdl']
        };
        var V3 = {
            N: 1,
            kp: 9.80665,
            lbf: 4.448222,
            pdl: 0.138255
        };
        J.presetShort('force');
        k3.force = function(Z1p) {
            var M1p = H3.extend({}, g8, Z1p.settings);
            H3.extend(Z1p.settings, M1p, {
                sign: false,
                convert: function a1p(D1p, f1p, N1p) {
                    return D1p * V3[f1p] / V3[N1p];
                }
            });
            return k3.measurement.call(this, Z1p);
        };
        var C3 = J.$;
        var z3 = J.presets.scroller;
        var P8 = {
            min: 0,
            max: 1000,
            defaultUnit: 'kg',
            units: ['g', 'kg', 'oz', 'lb'],
            unitNames: {
                tlong: 't (long)',
                tshort: 't (short)'
            }
        };
        var h3 = {
            mg: 0.001,
            cg: 0.01,
            dg: 0.1,
            g: 1,
            dag: 10,
            hg: 100,
            kg: 1000,
            t: 1000000,
            drc: 1.7718452,
            oz: 28.3495,
            lb: 453.59237,
            st: 6350.29318,
            qtr: 12700.58636,
            cwt: 50802.34544,
            tlong: 1016046.9088,
            tshort: 907184.74
        };
        J.presetShort('mass');
        z3.mass = function(e1p) {
            var E1p = C3.extend({}, P8, e1p.settings);
            C3.extend(e1p.settings, E1p, {
                sign: false,
                convert: function l1p(d1p, X1p, h1p) {
                    return d1p * h3[X1p] / h3[h1p];
                }
            });
            return z3.measurement.call(this, e1p);
        };
        var E3 = J.$;
        var M3 = J.presets.scroller;
        var a8 = {
            min: 0,
            max: 100,
            defaultUnit: 'kph',
            units: ['kph', 'mph', 'mps', 'fps', 'knot'],
            unitNames: {
                kph: 'km/h',
                mph: 'mi/h',
                mps: 'm/s',
                fps: 'ft/s',
                knot: 'knot'
            }
        };
        var x3 = {
            kph: 1,
            mph: 1.60934,
            mps: 3.6,
            fps: 1.09728,
            knot: 1.852
        };
        J.presetShort('speed');
        M3.speed = function(m1p) {
            var z1p = E3.extend({}, a8, m1p.settings);
            E3.extend(m1p.settings, z1p, {
                sign: false,
                convert: function i1p(w1p, C1p, V1p) {
                    return w1p * x3[C1p] / x3[V1p];
                }
            });
            return M3.measurement.call(this, m1p);
        };
        var q3 = J.$;
        var z1 = J.presets.scroller;
        var e8 = {
            min: -20,
            max: 40,
            defaultUnit: 'c',
            units: ['c', 'k', 'f', 'r'],
            unitNames: {
                c: 'Â°C',
                k: 'K',
                f: 'Â°F',
                r: 'Â°R'
            }
        };
        var E8 = {
            c2k: function k1p(H1p) {
                return H1p + 273.15;
            },
            c2f: function o1p(p1p) {
                return p1p * 9 / 5 + 32;
            },
            c2r: function K1p(F1p) {
                return (F1p + 273.15) * 9 / 5;
            },
            k2c: function S1p(G1p) {
                return G1p - 273.15;
            },
            k2f: function B1p(y1p) {
                return y1p * 9 / 5 - 459.67;
            },
            k2r: function j1p(R1p) {
                return R1p * 9 / 5;
            },
            f2c: function L1p(W1p) {
                return (W1p - 32) * 5 / 9;
            },
            f2k: function A1p(O1p) {
                return (O1p + 459.67) * 5 / 9;
            },
            f2r: function Y1p(c1p) {
                return c1p + 459.67;
            },
            r2c: function n1p(u1p) {
                return (u1p - 491.67) * 5 / 9;
            },
            r2k: function s1p(U1p) {
                return U1p * 5 / 9;
            },
            r2f: function b8p(J8p) {
                return J8p - 459.67;
            }
        };
        J.presetShort('temperature');
        z1.temperature = function(t8p) {
            var r8p = q3.extend({}, e8, t8p.settings);
            q3.extend(t8p.settings, r8p, {
                sign: true,
                convert: function v8p(T8p, g8p, I8p) {
                    return E8[g8p + '2' + I8p](T8p);
                }
            });
            return z1.measurement.call(this, t8p);
        };
  
  	(function(y7z, l7z, b7z) {
            var z7z = J,
                R7z = z7z.$,
                T7z = R7z.extend,
                N7z = z7z.classes,
                f7z = 1;
            N7z.MenuStrip = function(Q7z, s7z) {
                function o7z(c8z, K8z) {
                    var H8z = q7z.itemWidth,
                        q8z = q7z.layout;
                    H7z.contWidth = c7z = K7z.width();
                    if (c8z && V7z === c7z || !c7z) {
                        return;
                    }
                    V7z = c7z;
                    if (z7z.util.isNumeric(q8z)) {
                        i7z = c7z ? c7z / q8z : H8z;
                        if (i7z < H8z) {
                            q8z = 'liquid';
                        }
                    }
                    if (H8z) {
                        if (q8z == 'liquid') {
                            i7z = c7z ? c7z / Math.min(Math.floor(c7z / H8z), w7z.children().length) : H8z;
                        } else if (q8z == 'fixed') {
                            i7z = H8z;
                        }
                    }
                    if (i7z) {
                        w7z.children().css('width', i7z + 'px');
                    }
                    if (q7z.display != 'inline') {
                        A7z.find('.mbsc-page').css('padding-' + q7z.display, Q7z.offsetHeight + 'px');
                    }
                    H7z.totalWidth = C7z = Q7z.offsetWidth;
                    T7z(P7z.settings, {
                        contSize: c7z,
                        maxSnapScroll: q7z.paging ? 1 : false,
                        maxScroll: 0,
                        minScroll: C7z > c7z ? c7z - C7z : 0,
                        snap: q7z.paging ? c7z : q7z.snap ? i7z || '.mbsc-ms-item' : false,
                        elastic: C7z > c7z ? i7z || c7z : false
                    });
                    P7z.refresh(K8z);
                }

                function e7z() {
                    w7z.find('.mbsc-ripple').remove();
                    w7z.children().each(function(l8z) {
                        var y8z, z8z = R7z(this),
                            T8z = M7z && z8z.attr('data-selected') == 'true',
                            b8z = z8z.attr('data-disabled') == 'true',
                            f8z = z8z.attr('data-icon'),
                            N8z = z8z.attr('data-ref');
                        if (!N8z) {
                            N8z = f7z++;
                        }
                        if (l8z === 0) {
                            X7z = z8z;
                        }
                        if (M7z && !x7z && T8z) {
                            a7z = z8z;
                        }
                        if (f8z) {
                            I7z = true;
                        }
                        if (z8z.text()) {
                            O7z = true;
                        }
                        y8z = 'mbsc-ms-item mbsc-btn-e ' + (q7z.itemClass || '') + (T8z ? t7z : '') + (b8z ? ' mbsc-btn-d ' + (q7z.disabledClass || '') : '') + (f8z ? ' mbsc-ms-ic mbsc-ic mbsc-ic-' + f8z : '');
                        z8z.attr('data-ref', N8z).attr('data-role', 'button').attr('aria-selected', T8z ? 'true' : 'false').attr('aria-disabled', b8z ? 'true' : 'false').removeClass(m7z[N8z]).addClass(y8z);
                        m7z[N8z] = y8z;
                    });
                    if (I7z) {
                        K7z.addClass('mbsc-ms-icons');
                    }
                    if (O7z) {
                        K7z.addClass('mbsc-ms-txt');
                    }
                }

                function E7z(R8z) {
                    if (typeof R8z !== 'object') {
                        R8z = w7z.children('[data-id="' + R8z + '"]');
                    }
                    return R7z(R8z);
                }

                function Z7z(W7z) {
                    W7z.removeClass(t7z).removeAttr('data-selected').removeAttr('aria-selected');
                }

                function L7z(D7z) {
                    D7z.addClass(t7z).attr('data-selected', 'true').attr('aria-selected', 'true');
                }

                function U7z(G7z, g7z) {
                    if (!G7z.length) {
                        return;
                    }
                    var h7z = G7z.offset().left,
                        n7z = G7z[0].offsetLeft,
                        j7z = G7z[0].offsetWidth,
                        S7z = K7z.offset().left;
                    a7z = G7z;
                    if (g7z === b7z) {
                        g7z = !x7z;
                    }
                    if (M7z && g7z) {
                        if (x7z) {
                            if (G7z.attr('data-selected')) {
                                Z7z(G7z);
                            } else {
                                L7z(G7z);
                            }
                        } else {
                            Z7z(R7z('.mbsc-ms-item-sel', w7z));
                            L7z(G7z);
                        }
                    }
                    if (d7z) {
                        n7z = C7z - n7z - j7z;
                    }
                    if (k7z == 'a') {
                        if (h7z < S7z) {
                            P7z.scroll(d7z ? n7z + j7z - c7z : -n7z, p7z, true);
                        } else if (h7z + j7z > S7z + c7z) {
                            P7z.scroll(d7z ? n7z : c7z - n7z - j7z, p7z, true);
                        }
                    } else {
                        P7z.scroll(c7z / 2 - n7z - j7z / 2, p7z, true);
                    }
                    if (g7z) {
                        F7z('onItemTap', {
                            target: G7z[0]
                        });
                    }
                }

                function Y7z(r7z) {
                    clearTimeout(B7z);
                    B7z = setTimeout(function() {
                        o7z(r7z.type !== 'load');
                    }, 200);
                }
                var a7z, K7z, A7z, X7z, v7z, u7z, c7z, I7z, O7z, i7z, x7z, V7z, B7z, d7z, M7z, t7z, P7z, k7z, q7z, C7z, J7z, F7z, m7z = {},
                    p7z = 1000,
                    H7z = this,
                    w7z = R7z(Q7z);
                N7z.Base.call(this, Q7z, s7z, true);
                H7z.navigate = function(w8z, a8z) {
                    U7z(E7z(w8z), a8z);
                };
                H7z.next = function(i8z) {
                    var F8z = a7z ? a7z.next() : X7z;
                    if (F8z.length) {
                        a7z = F8z;
                        U7z(a7z, i8z);
                    }
                };
                H7z.prev = function(x8z) {
                    var P8z = a7z ? a7z.prev() : X7z;
                    if (P8z.length) {
                        a7z = P8z;
                        U7z(a7z, x8z);
                    }
                };
                H7z.select = function(C8z) {
                    if (!x7z) {
                        Z7z(R7z('.mbsc-ms-item-sel', w7z));
                    }
                    L7z(E7z(C8z));
                };
                H7z.deselect = function(d8z) {
                    Z7z(E7z(d8z));
                };
                H7z.enable = function(E8z) {
                    E7z(E8z).removeClass('mbsc-btn-d').removeAttr('data-disabled').removeAttr('aria-disabled');
                };
                H7z.disable = function(A8z) {
                    E7z(A8z).addClass('mbsc-btn-d').attr('data-disabled', 'true').attr('aria-disabled', 'true');
                };
                H7z.refresh = H7z.position = function(t8z) {
                    e7z();
                    o7z(false, t8z);
                };
                H7z._init = function() {
                    A7z = R7z(q7z.context);
                    v7z = R7z(q7z.context == 'body' ? y7z : q7z.context);
					
					if (q7z.type == 'tabs') {
						q7z.select = q7z.select || 'single';
						q7z.variant = q7z.variant || 'b';
					} else if (g.type == 'options') {
						q7z.select = q7z.select || 'multiple';
						q7z.variant = q7z.variant || 'a';
					} else if (g.type == 'menu') {
						q7z.select = q7z.select || 'off';
						q7z.variant = q7z.variant || 'a';
					}
					if (q7z.itemWidth && q7z.snap === b7z) {
						q7z.snap = true;
					}
                    k7z = q7z.variant;
                    M7z = q7z.select != 'off';
                    x7z = q7z.select == 'multiple';
                    t7z = ' mbsc-ms-item-sel ' + (q7z.activeClass || '');
                    d7z = q7z.rtl;
				    u7z = 'mbsc-ms-c' + ' mbsc-ms-' + k7z + ' mbsc-ms-' + q7z.display + ' mbsc-' + q7z.theme + ' ' + (q7z.baseTheme ? ' mbsc-' + q7z.baseTheme : '') + ' ' + (q7z.cssClass || '') + ' ' + (q7z.wrapperClass || '') + (d7z ? ' mbsc-ms-rtl' : ' mbsc-ms-ltr') + (q7z.itemWidth ? ' mbsc-ms-hasw' : '') + (q7z.context == 'body' ? '' : ' mbsc-ms-ctx') + (M7z ? '' : ' mbsc-ms-nosel');                 
                    if (!K7z) {
                        K7z = R7z('<div class="' + u7z + '"><div class="mbsc-ms-sc"></div></div>').insertAfter(w7z);
                        K7z.find('.mbsc-ms-sc').append(w7z);
                        P7z = new z7z.classes.ScrollView(K7z[0], {
                            axis: 'X',
                            contSize: 0,
                            maxScroll: 0,
                            maxSnapScroll: 1,
                            minScroll: 0,
                            snap: 1,
                            elastic: 1,
                            rtl: d7z,
                            mousewheel: q7z.mousewheel,
                            onStart: function(U8z) {
                                if (!J7z && U8z.domEvent.type == 'touchstart') {
                                    J7z = true;
                                    A7z.find('.mbsc-no-touch').removeClass('mbsc-no-touch');
                                }
                            },
                            onBtnTap: function(Z8z) {
                                U7z(R7z(Z8z.target), true);
                            },
                            onGestureStart: function(M8z) {
                                F7z('onGestureStart', M8z);
                            },
                            onGestureEnd: function(Q8z) {
                                F7z('onGestureEnd', Q8z);
                            },
                            onMove: function(m8z) {
                                F7z('onMove', m8z);
                            },
                            onAnimationStart: function(p8z) {
                                F7z('onAnimationStart', p8z);
                            },
                            onAnimationEnd: function(Y8z) {
                                F7z('onAnimationEnd', Y8z);
                            }
                        });
                    } else {
                        K7z.attr('class', u7z);
                    }
                    w7z.css('display', '').addClass('mbsc-ms ' + (q7z.groupClass || ''));
                    e7z();
                    F7z('onMarkupReady', {
                        target: K7z[0]
                    });
                    o7z();
                    K7z.find('img').on('load', Y7z);
                    v7z.on('orientationchange resize', Y7z);
                };
                H7z._destroy = function() {
                    if (q7z.display != 'inline') {
                        A7z.find('.mbsc-page').css('padding-' + q7z.display, '');
                    }
                    v7z.off('orientationchange resize', Y7z);
                    w7z.removeClass('mbsc-ms mbsc-ms-a mbsc-ms-b').insertAfter(K7z).find('.mbsc-ms-item').each(function() {
                        var X8z = R7z(this);
                        X8z.width('').removeClass(m7z[X8z.attr('data-ref')]);
                    });
                    K7z.remove();
                    P7z.destroy();
                };
                q7z = H7z.settings;
                F7z = H7z.trigger;
                H7z.init(s7z);
            };
            N7z.MenuStrip.prototype = {
                _class: 'menustrip',
                _hasDef: true,
                _hasTheme: true,
                _hasLang: true,
                _defaults: {
                    context: 'body',
                    type: 'options',
                    display: 'inline',
                    layout: 'liquid'
                }
            };
            z7z.presetShort('menustrip', 'MenuStrip');
        }(window, document));
	   
	   
	   
        J.presets.scroller.number = J.presets.scroller.measurement;
        J.presetShort('number');
        var Z = J.$;
        var c6 = J.util;
        var s6 = J.presets.numpad;
        var C8 = c6.testTouch;
        var Z2 = c6.getCoord;
        var k8 = c6.isNumeric;
        var W3 = function R9p() {};
        var d3 = function L9p(U9p, w5p, H5p) {
            function J5p(K5p) {
                var o5p, p5p = A9p.validate.call(U9p, {
                        values: O9p.slice(0),
                        variables: c9p
                    }, W9p) || [],
                    F5p = p5p && p5p.disabled || [];
                W9p._isValid = p5p.invalid ? false : true;
                W9p._tempValue = A9p.formatValue.call(U9p, O9p.slice(0), c9p, W9p);
                n9p = O9p.length;
                P5p = p5p.length || u9p;
                if (W9p._isVisible) {
                    Z('.mbsc-np-ph', s9p).each(function(S5p) {
                        Z(this).html(A9p.fill == 'ltr' ? S5p >= n9p ? g5p : t5p || O9p[S5p] : S5p >= u9p - P5p ? S5p + n9p < u9p ? g5p : t5p || O9p[S5p + n9p - u9p] : '');
                    });
                    Z('.mbsc-np-cph', s9p).each(function() {
                        Z(this).html(c9p[Z(this).attr('data-var')] || Z(this).attr('data-ph'));
                    });
                    if (n9p === u9p) {
                        for (o5p = 0; o5p <= 9; o5p++) {
                            F5p.push(o5p);
                        }
                    }
                    Z('.mbsc-np-btn', s9p).removeClass(r5p);
                    for (o5p = 0; o5p < F5p.length; o5p++) {
                        Z('.mbsc-np-btn[data-val="' + F5p[o5p] + '"]', s9p).addClass(r5p);
                    }
                    if (W9p._isValid) {
                        Z('.mbsc-fr-btn-s .mbsc-fr-btn', s9p).removeClass(r5p);
                    } else {
                        Z('.mbsc-fr-btn-s .mbsc-fr-btn', s9p).addClass(r5p);
                    }
                    if (W9p.live) {
                        W9p._hasValue = K5p || W9p._hasValue;
                        v5p(K5p, false, K5p);
                        if (K5p) {
                            x5p('onSet', {
                                valueText: W9p._value
                            });
                        }
                    }
                }
            }

            function v5p(B5p, y5p, G5p, j5p) {
                if (y5p) {
                    J5p();
                }
                if (!j5p) {
                    I5p = O9p.slice(0);
                    a5p = Z.extend({}, c9p);
                    f5p = Y9p.slice(0);
                    W9p._value = W9p._hasValue ? W9p._tempValue : null;
                }
                if (B5p) {
                    if (W9p._isInput) {
                        b5p.val(W9p._hasValue && W9p._isValid ? W9p._value : '');
                    }
                    x5p('onFill', {
                        valueText: W9p._hasValue ? W9p._tempValue : '',
                        change: G5p
                    });
                    if (G5p) {
                        W9p._preventChange = true;
                        b5p.trigger('change');
                    }
                }
            }

            function m5p(O5p) {
                var R5p, W5p, L5p = O5p || [],
                    A5p = [];
                Y9p = [];
                c9p = {};
                for (R5p = 0; R5p < L5p.length; R5p++) {
                    if (/:/.test(L5p[R5p])) {
                        W5p = L5p[R5p].split(':');
                        c9p[W5p[0]] = W5p[1];
                        Y9p.push(W5p[0]);
                    } else {
                        A5p.push(L5p[R5p]);
                        Y9p.push('digit');
                    }
                }
                return A5p;
            }

            function N5p(Y5p, c5p) {
                if (!n9p && !c5p && !A9p.allowLeadingZero || Y5p.hasClass('mbsc-fr-btn-d') || Y5p.hasClass('mbsc-np-btn-empty')) {
                    return;
                }
                if (n9p < u9p) {
                    Y9p.push('digit');
                    O9p.push(c5p);
                    J5p(true);
                }
            }

            function i5p(U5p) {
                var u5p, n5p, s5p = U5p.attr('data-val'),
                    J0p = U5p.attr('data-track') !== 'false',
                    b0p = U5p.attr('data-var');
                if (!U5p.hasClass('mbsc-fr-btn-d')) {
                    if (b0p) {
                        n5p = b0p.split(':');
                        if (J0p) {
                            Y9p.push(n5p[0]);
                        }
                        c9p[n5p[0]] = n5p[2] === undefined ? n5p[1] : c9p[n5p[0]] == n5p[1] ? n5p[2] : n5p[1];
                    }
                    if (s5p.length + n9p <= P5p) {
                        for (u5p = 0; u5p < s5p.length; ++u5p) {
                            n5p = k8(s5p[u5p]) ? +s5p[u5p] : s5p[u5p];
                            if (A9p.allowLeadingZero || n9p || n5p) {
                                Y9p.push('digit');
                                O9p.push(n5p);
                                n9p = O9p.length;
                            }
                        }
                    }
                    J5p(true);
                }
            }

            function M5p() {
                var r0p, v0p, t0p = Y9p.pop();
                if (n9p || t0p !== 'digit') {
                    if (t0p !== 'digit' && c9p[t0p]) {
                        delete c9p[t0p];
                        v0p = Y9p.slice(0);
                        Y9p = [];
                        for (r0p = 0; r0p < v0p.length; r0p++) {
                            if (v0p[r0p] !== t0p) {
                                Y9p.push(v0p[r0p]);
                            }
                        }
                    } else {
                        O9p.pop();
                    }
                    J5p(true);
                }
            }

            function V5p(T0p) {
                Q5p = true;
                h5p = Z2(T0p, 'X');
                X5p = Z2(T0p, 'Y');
                clearInterval(q5p);
                clearTimeout(q5p);
                M5p();
                q5p = setInterval(function() {
                    M5p();
                }, 150);
            }

            function C5p() {
                clearInterval(q5p);
                Q5p = false;
            }

            function k5p(g0p) {
                if (C8(g0p, this)) {
                    V5p(g0p);
                    if (g0p.type === 'mousedown') {
                        Z(document).on('mousemove', Z5p).on('mouseup', D5p);
                    }
                }
            }

            function Z5p(I0p) {
                if (Q5p) {
                    d5p = Z2(I0p, 'X');
                    E5p = Z2(I0p, 'Y');
                    z5p = d5p - h5p;
                    e5p = E5p - X5p;
                    if (Math.abs(z5p) > 7 || Math.abs(e5p) > 7) {
                        C5p();
                    }
                }
            }

            function D5p(Q0p) {
                if (Q5p) {
                    Q0p.preventDefault();
                    C5p();
                    if (Q0p.type === 'mouseup') {
                        Z(document).off('mousemove', Z5p).off('mouseup', D5p);
                    }
                }
            }
            var s9p, r5p, g5p, n9p, A9p, t5p, h5p, X5p, d5p, E5p, z5p, e5p, Q5p, q5p, O9p, P5p, x5p, u9p, I5p, b5p = Z(U9p),
                W9p = this,
                f5p = [],
                Y9p = [],
                c9p = {},
                a5p = {},
                l5p = {
                    107: '+',
                    109: '-'
                },
                T5p = {
                    48: 0,
                    49: 1,
                    50: 2,
                    51: 3,
                    52: 4,
                    53: 5,
                    54: 6,
                    55: 7,
                    56: 8,
                    57: 9,
                    96: 0,
                    97: 1,
                    98: 2,
                    99: 3,
                    100: 4,
                    101: 5,
                    102: 6,
                    103: 7,
                    104: 8,
                    105: 9
                };
            x6.call(this, U9p, w5p, true);
            W9p.setVal = W9p._setVal = function(q0p, P0p, x0p, Z0p) {
                W9p._hasValue = q0p !== null && q0p !== undefined;
                O9p = m5p(Z.isArray(q0p) ? q0p.slice(0) : A9p.parseValue.call(U9p, q0p, W9p));
                v5p(P0p, true, x0p === undefined ? P0p : x0p, Z0p);
            };
            W9p.getVal = W9p._getVal = function(M0p) {
                return W9p._hasValue || M0p ? W9p[M0p ? '_tempValue' : '_value'] : null;
            };
            W9p.setArrayVal = W9p.setVal;
            W9p.getArrayVal = function(a0p) {
                return a0p ? O9p.slice(0) : W9p._hasValue ? I5p.slice(0) : null;
            };
            W9p._readValue = function() {
                var D0p = b5p.val() || '';
                if (D0p !== '') {
                    W9p._hasValue = true;
                }
                if (t5p) {
                    c9p = {};
                    Y9p = [];
                    O9p = [];
                } else {
                    c9p = W9p._hasValue ? a5p : {};
                    Y9p = W9p._hasValue ? f5p : [];
                    O9p = W9p._hasValue && I5p ? I5p.slice(0) : m5p(A9p.parseValue.call(U9p, D0p, W9p));
                    v5p(false, true);
                }
            };
            W9p._fillValue = function() {
                W9p._hasValue = true;
                v5p(true, false, true);
            };
            W9p._generateContent = function() {
                var l0p, d0p, e0p, N0p = 1,
                    E0p = '',
                    f0p = '';
                f0p += '<div class="mbsc-np-hdr"><div role="button" tabindex="0" aria-label="' + A9p.deleteText + '" class="mbsc-np-del mbsc-fr-btn-e mbsc-ic mbsc-ic-' + A9p.deleteIcon + '"></div><div class="mbsc-np-dsp">';
                E0p = A9p.template.replace(/d/g, '<span class="mbsc-np-ph">' + g5p + '</span>').replace(/&#100;/g, 'd');
                E0p = E0p.replace(/{([a-zA-Z0-9]*)\:?([a-zA-Z0-9\-\_]*)}/g, '<span class="mbsc-np-cph" data-var="$1" data-ph="$2">$2</span>');
                f0p += E0p;
                f0p += '</div></div>';
                f0p += '<div class="mbsc-np-tbl-c mbsc-w-p"><div class="mbsc-np-tbl">';
                for (l0p = 0; l0p < 4; l0p++) {
                    f0p += '<div class="mbsc-np-row">';
                    for (d0p = 0; d0p < 3; d0p++) {
                        e0p = N0p;
                        if (N0p == 10 || N0p == 12) {
                            e0p = '';
                        } else if (N0p == 11) {
                            e0p = 0;
                        }
                        if (e0p === '') {
                            if (N0p == 10 && A9p.leftKey) {
                                f0p += '<div role="button" tabindex="0" class="mbsc-np-btn mbsc-np-btn-custom mbsc-fr-btn-e" ' + (A9p.leftKey.variable ? 'data-var="' + A9p.leftKey.variable + '"' : '') + ' data-val="' + (A9p.leftKey.value || '') + '" ' + (A9p.leftKey.track !== undefined ? ' data-track="' + A9p.leftKey.track + '"' : '') + '>' + A9p.leftKey.text + '</div>';
                            } else if (N0p == 12 && A9p.rightKey) {
                                f0p += '<div role="button" tabindex="0" class="mbsc-np-btn mbsc-np-btn-custom mbsc-fr-btn-e" ' + (A9p.rightKey.variable ? 'data-var="' + A9p.rightKey.variable + '"' : '') + ' data-val="' + (A9p.rightKey.value || '') + '" ' + (A9p.rightKey.track !== undefined ? ' data-track="' + A9p.rightKey.track + '"' : '') + ' >' + A9p.rightKey.text + '</div>';
                            } else {
                                f0p += '<div class="mbsc-np-btn mbsc-np-btn-empty"></div>';
                            }
                        } else {
                            f0p += '<div tabindex="0" role="button" class="mbsc-np-btn mbsc-fr-btn-e" data-val="' + e0p + '">' + e0p + '</div>';
                        }
                        N0p++;
                    }
                    f0p += '</div>';
                }
                f0p += '</div></div>';
                return f0p;
            };
            W9p._markupReady = function() {
                s9p = W9p._markup;
                J5p();
            };
            W9p._attachEvents = function(X0p) {
                X0p.on('keydown', function(h0p) {
                    var m0p;
                    if (l5p[h0p.keyCode] !== undefined) {
                        m0p = Z('.mbsc-np-btn[data-var="sign:-:"]', X0p);
                        if (m0p.length) {
                            c9p.sign = h0p.keyCode == 107 ? '-' : '';
                            i5p(m0p);
                        }
                    } else if (T5p[h0p.keyCode] !== undefined) {
                        N5p(Z('.mbsc-np-btn[data-val="' + T5p[h0p.keyCode] + '"]', X0p), T5p[h0p.keyCode]);
                    } else if (h0p.keyCode == 8) {
                        h0p.preventDefault();
                        M5p();
                    }
                });
                W9p.tap(Z('.mbsc-np-btn', X0p), function() {
                    var z0p = Z(this);
                    if (z0p.hasClass('mbsc-np-btn-custom')) {
                        i5p(z0p);
                    } else {
                        N5p(z0p, +z0p.attr('data-val'));
                    }
                }, false, 30, true);
                Z('.mbsc-np-del', X0p).on('touchstart mousedown keydown', k5p).on('touchmove mousemove', Z5p).on('keyup mouseup touchend', D5p);
            };
            W9p.__init = function() {
                A9p = W9p.settings;
                A9p.cssClass = (A9p.cssClass || '') + ' mbsc-np';
                A9p.template = A9p.template.replace(/\\d/, '&#100;');
                g5p = A9p.placeholder;
                u9p = (A9p.template.match(/d/g) || []).length;
                r5p = 'mbsc-fr-btn-d ' + (A9p.disabledClass || '');
                t5p = A9p.mask;
                x5p = W9p.trigger;
                if (t5p && b5p.is('input')) {
                    b5p.attr('type', 'password');
                }
            };
            W9p._indexOf = function(w0p, C0p) {
                var i0p;
                for (i0p = 0; i0p < w0p.length; ++i0p) {
                    if (w0p[i0p].toString() === C0p.toString()) {
                        return i0p;
                    }
                }
                return -1;
            };
            if (!H5p) {
                W9p.init(w5p);
            }
        };
        d3.prototype = {
            _hasDef: true,
            _hasTheme: true,
            _hasLang: true,
            _hasPreset: true,
            _class: 'numpad',
            _defaults: Z.extend({}, x6.prototype._defaults, {
                template: 'dd.dd',
                placeholder: '0',
                deleteIcon: 'backspace',
                allowLeadingZero: false,
                headerText: false,
                fill: 'rtl',
                deleteText: 'Delete',
                decimalSeparator: '.',
                thousandsSeparator: ',',
                validate: W3,
                parseValue: W3,
                formatValue: function V0p(B0p, j0p, y0p) {
                    var H0p, p0p = 1,
                        S0p = y0p.settings,
                        G0p = S0p.placeholder,
                        K0p = S0p.template,
                        F0p = B0p.length,
                        o0p = K0p.length,
                        k0p = '';
                    for (H0p = 0; H0p < o0p; H0p++) {
                        if (K0p[o0p - H0p - 1] == 'd') {
                            if (p0p <= F0p) {
                                k0p = B0p[F0p - p0p] + k0p;
                            } else {
                                k0p = G0p + k0p;
                            }
                            p0p++;
                        } else {
                            k0p = K0p[o0p - H0p - 1] + k0p;
                        }
                    }
                    Z.each(j0p, function(R0p, L0p) {
                        k0p = k0p.replace('{' + R0p + '}', L0p);
                    });
                    return Z('<div>' + k0p + '</div>').text();
                }
            })
        };
        J.classes.Numpad = d3;
        J.themes.numpad = J.themes.frame;
        J.presetShort('numpad', 'Numpad', false);
        var p8 = {
            min: 0,
            max: 99.99,
            scale: 2,
            prefix: '',
            suffix: '',
            returnAffix: false
        };
        s6.decimal = function(A0p) {
            function O0p(b4p, J4p) {
                var s0p, U0p = b4p.slice(0),
                    u0p = 0;
                while (U0p.length) {
                    u0p = u0p * 10 + U0p.shift();
                }
                for (s0p = 0; s0p < W0p.scale; s0p++) {
                    u0p /= 10;
                }
                return J4p ? u0p * -1 : u0p;
            }

            function c0p(r4p) {
                var t4p = O0p(r4p).toFixed(W0p.scale).replace('.', W0p.decimalSeparator).replace(/\B(?=(\d{3})+(?!\d))/g, W0p.thousandsSeparator);
                return t4p;
            }
            var n0p = Z.extend({}, A0p.settings),
                W0p = Z.extend(A0p.settings, p8, n0p),
                Y0p = W0p.min < 0;
            A0p.getVal = function(g4p) {
                var v4p = A0p._getVal(g4p),
                    T4p = (v4p + '').replace(W0p.decimalSeparator, '.').replace(W0p.thousandsSeparator, '');
                return c6.isNumeric(T4p) ? +T4p : v4p;
            };
            return {
                template: (Y0p ? '{sign}' : '') + W0p.prefix.replace(/d/g, '\\d') + Array((Math.floor(Math.max(W0p.max, Math.abs(W0p.min))) + '').length + 1).join('d') + (W0p.scale ? '.' + Array(W0p.scale + 1).join('d') : '') + W0p.suffix.replace(/d/g, '\\d'),
                leftKey: Y0p ? {
                    text: '-/+',
                    variable: 'sign:-:',
                    track: false
                } : undefined,
                parseValue: function I4p(Z4p) {
                    var q4p, Q4p, x4p = Z4p || W0p.defaultValue,
                        P4p = [];
                    if (x4p) {
                        x4p = (x4p + '').replace(W0p.decimalSeparator, '.').replace(W0p.thousandsSeparator, '');
                        Q4p = x4p.match(/\d+\.?\d*/g);
                        if (Q4p) {
                            Q4p = (+Q4p[0]).toFixed(W0p.scale);
                            for (q4p = 0; q4p < Q4p.length; q4p++) {
                                if (Q4p[q4p] != '.') {
                                    if (+Q4p[q4p]) {
                                        P4p.push(+Q4p[q4p]);
                                    } else if (P4p.length) {
                                        P4p.push(0);
                                    }
                                }
                            }
                        }
                    }
                    if (Z4p < 0) {
                        P4p.push('sign:' + '-');
                    }
                    return P4p;
                },
                formatValue: function M4p(D4p, f4p) {
                    var a4p = c0p(D4p),
                        N4p = O0p(D4p, f4p && f4p.sign == '-');
                    return (N4p < 0 ? '-' : '') + (W0p.returnAffix ? W0p.prefix + a4p + W0p.suffix : a4p);
                },
                validate: function e4p(E4p) {
                    var l4p = E4p.values,
                        h4p = c0p(l4p),
                        d4p = O0p(l4p, E4p.variables && E4p.variables.sign == '-'),
                        X4p = [];
                    if (!l4p.length && !W0p.allowLeadingZero) {
                        X4p.push(0);
                    }
                    if (A0p.isVisible()) {
                        Z('.mbsc-np-dsp', A0p._markup).html((E4p.variables.sign || '') + W0p.prefix + h4p + W0p.suffix);
                    }
                    return {
                        disabled: X4p,
                        invalid: d4p > W0p.max || d4p < W0p.min || (W0p.invalid ? A0p._indexOf(W0p.invalid, d4p) != -1 : false)
                    };
                }
            };
        };
        var e3 = ['h', 'm', 's'];
        var S8 = {
            min: 0,
            max: 362439,
            defaultValue: 0,
            hourTextShort: 'h',
            minuteTextShort: 'm',
            secTextShort: 's'
        };
        s6.timespan = function(V4p) {
            function o4p(G4p) {
                var F4p, K4p = '',
                    S4p = 60 * 60;
                Z(e3).each(function(y4p, B4p) {
                    F4p = Math.floor(G4p / S4p);
                    G4p -= F4p * S4p;
                    S4p /= 60;
                    if (F4p > 0 || B4p == 's' && !K4p) {
                        K4p = K4p + (K4p ? ' ' : '') + F4p + H4p[B4p];
                    }
                });
                return K4p;
            }
            var p4p = Z.extend({}, V4p.settings),
                C4p = Z.extend(V4p.settings, S8, p4p),
                H4p = {
                    h: C4p.hourTextShort.replace(/d/g, '\\d'),
                    m: C4p.minuteTextShort.replace(/d/g, '\\d'),
                    s: C4p.secTextShort.replace(/d/g, '\\d')
                },
                k4p = 'd<span class="mbsc-np-sup mbsc-np-time">' + H4p.s + '</span>';
            if (C4p.max > 9) {
                k4p = 'd' + k4p;
            }
            if (C4p.max > 99) {
                k4p = '<span class="mbsc-np-ts-m">' + (C4p.max > 639 ? 'd' : '') + 'd</span><span class="mbsc-np-sup mbsc-np-time">' + H4p.m + '</span>' + k4p;
            }
            if (C4p.max > 6039) {
                k4p = '<span class="mbsc-np-ts-h">' + (C4p.max > 38439 ? 'd' : '') + 'd</span><span class="mbsc-np-sup mbsc-np-time">' + H4p.h + '</span>' + k4p;
            }
            V4p.setVal = function(j4p, R4p, L4p, W4p) {
                if (c6.isNumeric(j4p)) {
                    j4p = o4p(j4p);
                }
                return V4p._setVal(j4p, R4p, L4p, W4p);
            };
            V4p.getVal = function(A4p) {
                return V4p._hasValue || A4p ? l3(V4p.getArrayVal(A4p)) : null;
            };
            return {
                template: k4p,
                parseValue: function O4p(u4p) {
                    var c4p, n4p = u4p || o4p(C4p.defaultValue),
                        Y4p = [];
                    if (n4p) {
                        Z(e3).each(function(U4p, s4p) {
                            c4p = new RegExp('(\\d+)' + H4p[s4p], 'gi').exec(n4p);
                            if (c4p) {
                                c4p = +c4p[1];
                                if (c4p > 9) {
                                    Y4p.push(Math.floor(c4p / 10));
                                    Y4p.push(c4p % 10);
                                } else {
                                    if (Y4p.length) {
                                        Y4p.push(0);
                                    }
                                    if (c4p || Y4p.length) {
                                        Y4p.push(c4p);
                                    }
                                }
                            } else if (Y4p.length) {
                                Y4p.push(0);
                                Y4p.push(0);
                            }
                        });
                    }
                    return Y4p;
                },
                formatValue: function b7p(J7p) {
                    return o4p(l3(J7p));
                },
                validate: function t7p(g7p) {
                    var v7p = g7p.values,
                        r7p = l3(v7p.slice(0)),
                        T7p = [];
                    if (!v7p.length) {
                        T7p.push(0);
                    }
                    return {
                        disabled: T7p,
                        invalid: r7p > C4p.max || r7p < C4p.min || (C4p.invalid ? V4p._indexOf(C4p.invalid, +r7p) != -1 : false)
                    };
                }
            };
        };
        var G8 = {
            timeFormat: 'hh:ii A',
            amText: 'am',
            pmText: 'pm'
        };
        s6.time = function(E7p) {
            function d7p(m7p, i7p) {
                var h7p, z7p = '';
                for (h7p = 0; h7p < m7p.length; ++h7p) {
                    z7p += m7p[h7p] + (h7p % 2 == (m7p.length % 2 == 1 ? 0 : 1) && h7p != m7p.length - 1 ? ':' : '');
                }
                Z.each(i7p, function(C7p, w7p) {
                    z7p += ' ' + w7p;
                });
                return z7p;
            }

            function X7p(k7p) {
                var V7p, p7p, o7p, G7p, B7p, R7p, K7p, F7p, y7p, j7p, H7p = [],
                    S7p = 2 * a7p.length;
                e7p = S7p;
                if (!k7p.length) {
                    if (Q7p) {
                        H7p.push(0);
                        H7p.push(I7p.leftKey.value);
                    }
                    H7p.push(I7p.rightKey.value);
                }
                if (!Q7p && (S7p - k7p.length < 2 || k7p[0] != 1 && (k7p[0] > 2 || k7p[1] > 3) && S7p - k7p.length <= 2)) {
                    H7p.push('30');
                    H7p.push('00');
                }
                if ((Q7p ? k7p[0] > 1 || k7p[1] > 2 : k7p[0] != 1 && (k7p[0] > 2 || k7p[1] > 3)) && k7p[0]) {
                    k7p.unshift(0);
                    e7p = S7p - 1;
                }
                if (k7p.length == S7p) {
                    for (V7p = 0; V7p <= 9; ++V7p) {
                        H7p.push(V7p);
                    }
                } else if (k7p.length == 1 && Q7p && k7p[0] == 1 || k7p.length && k7p.length % 2 === 0 || !Q7p && k7p[0] == 2 && k7p[1] > 3 && k7p.length % 2 == 1) {
                    for (V7p = 6; V7p <= 9; ++V7p) {
                        H7p.push(V7p);
                    }
                }
                y7p = k7p[1] !== undefined ? '' + k7p[0] + k7p[1] : '';
                j7p = +x7p == +(k7p[3] !== undefined ? '' + k7p[2] + k7p[3] : '');
                if (I7p.invalid) {
                    for (V7p = 0; V7p < I7p.invalid.length; ++V7p) {
                        R7p = I7p.invalid[V7p].getHours();
                        K7p = I7p.invalid[V7p].getMinutes();
                        F7p = I7p.invalid[V7p].getSeconds();
                        if (R7p == +y7p) {
                            if (a7p.length == 2 && (K7p < 10 ? 0 : +('' + K7p)[0]) == +k7p[2]) {
                                H7p.push(K7p < 10 ? K7p : +('' + K7p)[1]);
                                break;
                            } else if ((F7p < 10 ? 0 : +('' + F7p)[0]) == +k7p[4]) {
                                H7p.push(F7p < 10 ? F7p : +('' + F7p)[1]);
                                break;
                            }
                        }
                    }
                }
                if (I7p.min || I7p.max) {
                    p7p = +q7p == +y7p;
                    o7p = +P7p == +y7p;
                    B7p = o7p && j7p;
                    G7p = p7p && j7p;
                    if (k7p.length === 0) {
                        for (V7p = Q7p ? 2 : q7p > 19 ? q7p[0] : 3; V7p <= (q7p[0] == 1 ? 9 : q7p[0] - 1); ++V7p) {
                            H7p.push(V7p);
                        }
                        if (q7p >= 10) {
                            H7p.push(0);
                            if (q7p[0] == 2) {
                                for (V7p = 3; V7p <= 9; ++V7p) {
                                    H7p.push(V7p);
                                }
                            }
                        }
                        if (P7p && P7p < 10 || q7p && q7p >= 10) {
                            for (V7p = P7p && P7p < 10 ? +P7p[0] + 1 : 0; V7p < (q7p && q7p >= 10 ? q7p[0] : 10); ++V7p) {
                                H7p.push(V7p);
                            }
                        }
                    }
                    if (k7p.length == 1) {
                        if (k7p[0] === 0) {
                            for (V7p = 0; V7p < q7p[0]; ++V7p) {
                                H7p.push(V7p);
                            }
                        }
                        if (q7p && k7p[0] !== 0 && (Q7p ? k7p[0] == 1 : k7p[0] == 2)) {
                            for (V7p = Q7p ? 3 : 4; V7p <= 9; ++V7p) {
                                H7p.push(V7p);
                            }
                        }
                        if (k7p[0] == q7p[0]) {
                            for (V7p = 0; V7p < q7p[1]; ++V7p) {
                                H7p.push(V7p);
                            }
                        }
                        if (k7p[0] == P7p[0] && !Q7p) {
                            for (V7p = +P7p[1] + 1; V7p <= 9; ++V7p) {
                                H7p.push(V7p);
                            }
                        }
                    }
                    if (k7p.length == 2 && (p7p || o7p)) {
                        for (V7p = o7p ? +x7p[0] + 1 : 0; V7p < (p7p ? +D7p[0] : 10); ++V7p) {
                            H7p.push(V7p);
                        }
                    }
                    if (k7p.length == 3 && (o7p && k7p[2] == x7p[0] || p7p && k7p[2] == D7p[0])) {
                        for (V7p = o7p && k7p[2] == x7p[0] ? +x7p[1] + 1 : 0; V7p < (p7p && k7p[2] == D7p[0] ? +D7p[1] : 10); ++V7p) {
                            H7p.push(V7p);
                        }
                    }
                    if (k7p.length == 4 && (G7p || B7p)) {
                        for (V7p = B7p ? +Z7p[0] + 1 : 0; V7p < (G7p ? +M7p[0] : 10); ++V7p) {
                            H7p.push(V7p);
                        }
                    }
                    if (k7p.length == 5 && (G7p && k7p[4] == M7p[0] || B7p && k7p[4] == Z7p[0])) {
                        for (V7p = B7p && k7p[4] == Z7p[0] ? +Z7p[1] + 1 : 0; V7p < (G7p && k7p[4] == M7p[0] ? +M7p[1] : 10); ++V7p) {
                            H7p.push(V7p);
                        }
                    }
                }
                return H7p;
            }
            var l7p = Z.extend({}, E7p.settings),
                I7p = Z.extend(E7p.settings, G8, l7p),
                a7p = I7p.timeFormat.split(':'),
                Q7p = I7p.timeFormat.match(/a/i),
                N7p = Q7p ? Q7p[0] == 'a' ? I7p.amText : I7p.amText.toUpperCase() : '',
                f7p = Q7p ? Q7p[0] == 'a' ? I7p.pmText : I7p.pmText.toUpperCase() : '',
                e7p = 0,
                q7p = I7p.min ? '' + I7p.min.getHours() : '',
                P7p = I7p.max ? '' + I7p.max.getHours() : '',
                D7p = I7p.min ? '' + (I7p.min.getMinutes() < 10 ? '0' + I7p.min.getMinutes() : I7p.min.getMinutes()) : '',
                x7p = I7p.max ? '' + (I7p.max.getMinutes() < 10 ? '0' + I7p.max.getMinutes() : I7p.max.getMinutes()) : '',
                M7p = I7p.min ? '' + (I7p.min.getSeconds() < 10 ? '0' + I7p.min.getSeconds() : I7p.min.getSeconds()) : '',
                Z7p = I7p.max ? '' + (I7p.max.getSeconds() < 10 ? '0' + I7p.max.getSeconds() : I7p.max.getSeconds()) : '';
            I7p.min ? I7p.min.setFullYear(2014, 7, 20) : '';
            I7p.max ? I7p.max.setFullYear(2014, 7, 20) : '';
            return {
                placeholder: '-',
                allowLeadingZero: true,
                template: (a7p.length == 3 ? 'dd:dd:dd' : a7p.length == 2 ? 'dd:dd' : 'dd') + (Q7p ? '<span class="mbsc-np-sup">{ampm:--}</span>' : ''),
                leftKey: Q7p ? {
                    text: N7p,
                    variable: 'ampm:' + N7p,
                    value: '00'
                } : {
                    text: ':00',
                    value: '00'
                },
                rightKey: Q7p ? {
                    text: f7p,
                    variable: 'ampm:' + f7p,
                    value: '00'
                } : {
                    text: ':30',
                    value: '30'
                },
                parseValue: function L7p(c7p) {
                    var A7p, O7p, W7p = c7p || I7p.defaultValue,
                        Y7p = [];
                    if (W7p) {
                        W7p = W7p + '';
                        O7p = W7p.match(/\d/g);
                        if (O7p) {
                            for (A7p = 0; A7p < O7p.length; A7p++) {
                                Y7p.push(+O7p[A7p]);
                            }
                        }
                        if (Q7p) {
                            Y7p.push('ampm:' + (W7p.match(new RegExp(I7p.pmText, 'gi')) ? f7p : N7p));
                        }
                    }
                    return Y7p;
                },
                formatValue: function n7p(u7p, s7p) {
                    return d7p(u7p, s7p);
                },
                validate: function U7p(r6I) {
                    var b6I = r6I.values,
                        v6I = r6I.variables,
                        t6I = d7p(b6I, v6I),
                        J6I = b6I.length >= 3 ? new Date(2014, 7, 20, '' + b6I[0] + (b6I.length % 2 === 0 ? b6I[1] : ''), '' + b6I[b6I.length % 2 === 0 ? 2 : 1] + b6I[b6I.length % 2 === 0 ? 3 : 2]) : '';
                    return {
                        disabled: X7p(b6I),
                        length: e7p,
                        invalid: (Q7p ? !new RegExp('^(0?[1-9]|1[012])(:[0-5]\\d)?(:[0-5][0-9])' + ' (?:' + I7p.amText + '|' + I7p.pmText + ')$', 'i').test(t6I) : !/^([0-1]?[0-9]|2[0-4]):([0-5][0-9])(:[0-5][0-9])?$/.test(t6I)) || (I7p.invalid ? E7p._indexOf(I7p.invalid, J6I) != -1 : false) || !((I7p.min ? I7p.min <= J6I : true) && (I7p.max ? J6I <= I7p.max : true))
                    };
                }
            };
        };
        var B8 = {
            dateOrder: 'mdy',
            dateFormat: 'mm/dd/yy',
            delimiter: '/'
        };
        s6.date = function(e6I) {
            function d6I(w6I) {
                return w6I % 4 === 0 && w6I % 100 !== 0 || w6I % 400 === 0;
            }

            function X6I(V6I) {
                var C6I, H6I, B6I, K6I, F6I, k6I = [],
                    o6I = V6I[g6I + 3] !== undefined ? '' + V6I[g6I] + V6I[g6I + 1] + V6I[g6I + 2] + V6I[g6I + 3] : '',
                    p6I = V6I[I6I + 1] !== undefined ? '' + V6I[I6I] + V6I[I6I + 1] : '',
                    S6I = V6I[q6I + 1] !== undefined ? '' + V6I[q6I] + V6I[q6I + 1] : '',
                    j6I = '' + T6I.getMaxDayOfMonth(o6I || 2012, p6I - 1 || 0),
                    y6I = x6I === o6I && +M6I === +p6I,
                    G6I = P6I === o6I && +a6I === +p6I;
                if (T6I.invalid) {
                    for (C6I = 0; C6I < T6I.invalid.length; ++C6I) {
                        B6I = T6I.getYear(T6I.invalid[C6I]);
                        K6I = T6I.getMonth(T6I.invalid[C6I]);
                        F6I = T6I.getDay(T6I.invalid[C6I]);
                        if (B6I == +o6I && K6I + 1 == +p6I) {
                            if ((F6I < 10 ? 0 : +('' + F6I)[0]) == +V6I[q6I]) {
                                k6I.push(F6I < 10 ? F6I : +('' + F6I)[1]);
                                break;
                            }
                        }
                        if (K6I + 1 == +p6I && F6I == +S6I) {
                            if (('' + B6I).substring(0, 3) == '' + V6I[g6I] + V6I[g6I + 1] + V6I[g6I + 2]) {
                                k6I.push(('' + B6I)[3]);
                                break;
                            }
                        }
                        if (B6I == +o6I && F6I == +S6I) {
                            if ((K6I < 10 ? 0 : +('' + (K6I + 1))[0]) == +V6I[I6I]) {
                                k6I.push(K6I < 10 ? K6I : +('' + (K6I + 1))[1]);
                                break;
                            }
                        }
                    }
                }
                if (S6I == '31' && (V6I.length == I6I || V6I.length == I6I + 1)) {
                    if (V6I[I6I] != 1) {
                        k6I.push(2, 4, 6, 9, 11);
                    } else {
                        k6I.push(1);
                    }
                }
                if (S6I == '30' && V6I[I6I] === 0 && V6I.length <= I6I + 1) {
                    k6I.push(2);
                }
                if (V6I.length == I6I) {
                    for (C6I = P6I === o6I && +a6I < 10 ? 1 : 2; C6I <= 9; ++C6I) {
                        k6I.push(C6I);
                    }
                    if (x6I === o6I && +M6I >= 10) {
                        k6I.push(0);
                    }
                }
                if (V6I.length == I6I + 1) {
                    if (V6I[I6I] == 1) {
                        for (C6I = P6I === o6I ? +a6I[1] + 1 : 3; C6I <= 9; ++C6I) {
                            k6I.push(C6I);
                        }
                        if (x6I == o6I) {
                            for (C6I = 0; C6I < +M6I[1]; ++C6I) {
                                k6I.push(C6I);
                            }
                        }
                    }
                    if (V6I[I6I] === 0) {
                        k6I.push(0);
                        if (P6I === o6I || x6I === o6I) {
                            for (C6I = P6I === o6I ? +S6I > +f6I ? +a6I : +a6I + 1 : 0; C6I <= (x6I === o6I ? +S6I < +D6I ? +M6I - 1 : +M6I - 1 : 9); ++C6I) {
                                k6I.push(C6I);
                            }
                        }
                    }
                }
                if (V6I.length == q6I) {
                    for (C6I = G6I ? (+f6I > 10 ? +f6I[0] : 0) + 1 : +j6I[0] + 1; C6I <= 9; ++C6I) {
                        k6I.push(C6I);
                    }
                    if (y6I) {
                        for (C6I = 0; C6I < (+D6I < 10 ? 0 : D6I[0]); ++C6I) {
                            k6I.push(C6I);
                        }
                    }
                }
                if (V6I.length == q6I + 1) {
                    if (V6I[q6I] >= 3 || p6I == '02') {
                        for (C6I = +j6I[1] + 1; C6I <= 9; ++C6I) {
                            k6I.push(C6I);
                        }
                    }
                    if (G6I && +f6I[0] == V6I[q6I]) {
                        for (C6I = +f6I[1] + 1; C6I <= 9; ++C6I) {
                            k6I.push(C6I);
                        }
                    }
                    if (y6I && D6I[0] == V6I[q6I]) {
                        for (C6I = 0; C6I < +D6I[1]; ++C6I) {
                            k6I.push(C6I);
                        }
                    }
                    if (V6I[q6I] === 0) {
                        k6I.push(0);
                        if (G6I || y6I) {
                            for (C6I = G6I ? +f6I + 1 : 1; C6I <= (y6I ? +D6I - 1 : 9); ++C6I) {
                                k6I.push(C6I);
                            }
                        }
                    }
                }
                if (V6I[g6I + 2] !== undefined && p6I == '02' && S6I == '29') {
                    for (H6I = +('' + V6I[g6I] + V6I[g6I + 1] + V6I[g6I + 2] + 0); H6I <= +('' + V6I[g6I] + V6I[g6I + 1] + V6I[g6I + 2] + 9); ++H6I) {
                        k6I.push(!d6I(H6I) ? H6I % 10 : '');
                    }
                }
                if (V6I.length == g6I) {
                    if (T6I.min) {
                        for (C6I = 0; C6I < +x6I[0]; ++C6I) {
                            k6I.push(C6I);
                        }
                    }
                    if (T6I.max) {
                        for (C6I = +P6I[0] + 1; C6I <= 9; ++C6I) {
                            k6I.push(C6I);
                        }
                    }
                    k6I.push(0);
                }
                if (T6I.min || T6I.max) {
                    for (H6I = 1; H6I < 4; ++H6I) {
                        if (V6I.length == g6I + H6I) {
                            if (V6I[g6I + H6I - 1] == +x6I[H6I - 1] && (H6I == 3 ? V6I[g6I + H6I - 2] == +x6I[H6I - 2] : true)) {
                                for (C6I = 0; C6I < +x6I[H6I] + (H6I == 3 && V6I[I6I + 1] && +M6I > +p6I ? 1 : 0); ++C6I) {
                                    k6I.push(C6I);
                                }
                            }
                            if (V6I[g6I + H6I - 1] == +P6I[H6I - 1] && (H6I == 3 ? V6I[g6I + H6I - 2] == +P6I[H6I - 2] : true)) {
                                for (C6I = +P6I[H6I] + (H6I == 3 && +a6I < +p6I ? 0 : 1); C6I <= 9; ++C6I) {
                                    k6I.push(C6I);
                                }
                            }
                        }
                    }
                }
                return k6I;
            }

            function E6I(R6I) {
                return new Date(+('' + R6I[g6I] + R6I[g6I + 1] + R6I[g6I + 2] + R6I[g6I + 3]), +('' + R6I[I6I] + R6I[I6I + 1]) - 1, +('' + R6I[q6I] + R6I[q6I + 1]));
            }
            var g6I, I6I, q6I, N6I, Z6I = [],
                l6I = Z.extend({}, e6I.settings),
                T6I = Z.extend(e6I.settings, S.defaults, B8, l6I),
                Q6I = T6I.dateOrder,
                M6I = T6I.min ? '' + (T6I.getMonth(T6I.min) + 1) : 0,
                a6I = T6I.max ? '' + (T6I.getMonth(T6I.max) + 1) : 0,
                D6I = T6I.min ? '' + T6I.getDay(T6I.min) : 0,
                f6I = T6I.max ? '' + T6I.getDay(T6I.max) : 0,
                x6I = T6I.min ? '' + T6I.getYear(T6I.min) : 0,
                P6I = T6I.max ? '' + T6I.getYear(T6I.max) : 0;
            Q6I = Q6I.replace(/y+/gi, 'yyyy');
            Q6I = Q6I.replace(/m+/gi, 'mm');
            Q6I = Q6I.replace(/d+/gi, 'dd');
            g6I = Q6I.toUpperCase().indexOf('Y');
            I6I = Q6I.toUpperCase().indexOf('M');
            q6I = Q6I.toUpperCase().indexOf('D');
            Q6I = '';
            Z6I.push({
                val: g6I,
                n: 'yyyy'
            }, {
                val: I6I,
                n: 'mm'
            }, {
                val: q6I,
                n: 'dd'
            });
            Z6I.sort(function(h6I, m6I) {
                return h6I.val - m6I.val;
            });
            Z.each(Z6I, function(i6I, z6I) {
                Q6I += z6I.n;
            });
            g6I = Q6I.indexOf('y');
            I6I = Q6I.indexOf('m');
            q6I = Q6I.indexOf('d');
            Q6I = '';
            for (N6I = 0; N6I < 8; ++N6I) {
                Q6I += 'd';
                if (N6I + 1 == g6I || N6I + 1 == I6I || N6I + 1 == q6I) {
                    Q6I += T6I.delimiter;
                }
            }
            e6I.getVal = function(L6I) {
                return e6I._hasValue || L6I ? E6I(e6I.getArrayVal(L6I)) : null;
            };
            return {
                placeholder: '-',
                fill: 'ltr',
                allowLeadingZero: true,
                template: Q6I,
                parseValue: function W6I(n6I) {
                    var Y6I, A6I = [],
                        c6I = n6I || T6I.defaultValue,
                        O6I = S.parseDate(T6I.dateFormat, c6I, T6I);
                    if (c6I) {
                        for (Y6I = 0; Y6I < Z6I.length; ++Y6I) {
                            if (/m/i.test(Z6I[Y6I].n)) {
                                A6I = A6I.concat(((T6I.getMonth(O6I) < 9 ? '0' : '') + (T6I.getMonth(O6I) + 1)).split(''));
                            } else if (/d/i.test(Z6I[Y6I].n)) {
                                A6I = A6I.concat(((T6I.getDay(O6I) < 10 ? '0' : '') + T6I.getDay(O6I)).split(''));
                            } else {
                                A6I = A6I.concat((T6I.getYear(O6I) + '').split(''));
                            }
                        }
                    }
                    return A6I;
                },
                formatValue: function u6I(s6I) {
                    return S.formatDate(T6I.dateFormat, E6I(s6I), T6I);
                },
                validate: function U6I(t2I) {
                    var J2I = t2I.values,
                        b2I = E6I(J2I);
                    return {
                        disabled: X6I(J2I),
                        invalid: !(b2I != 'Invalid Date' && (T6I.min ? T6I.min <= b2I : true) && (T6I.max ? b2I <= T6I.max : true)) || (T6I.invalid ? e6I._indexOf(T6I.invalid, b2I) != -1 : false)
                    };
                }
            };
        };
        var M = J.$;
        var Q3 = J.presets.scroller;
        var b6 = J.util.datetime;
        var L8 = J.util;
        var W8 = L8.testTouch;
        var A8 = {
            autoCorrect: true,
            showSelector: true,
            minRange: 1,
            rangeTap: true,
            fromText: 'Start',
            toText: 'End'
        };
        J.presetShort('range');
        Q3.range = function(v2I) {
            function K2I(R2I, L2I) {
                if (R2I) {
                    R2I.setFullYear(L2I.getFullYear());
                    R2I.setMonth(L2I.getMonth());
                    R2I.setDate(L2I.getDate());
                }
            }

            function j2I(W2I) {
                v2I._startDate = x2I = I2I;
                v2I._endDate = Z2I = T2I;
                if (r2I.startInput) {
                    M(r2I.startInput).val(a2I);
                    if (W2I) {
                        M(r2I.startInput).trigger('change');
                    }
                }
                if (r2I.endInput) {
                    M(r2I.endInput).val(M2I);
                    if (W2I) {
                        M(r2I.endInput).trigger('change');
                    }
                }
            }

            function H2I(O2I, Y2I) {
                var A2I = true;
                if (O2I && I2I && T2I) {
                    if (T2I - I2I > r2I.maxRange - 1) {
                        if (g2I) {
                            I2I = new Date(T2I - r2I.maxRange + 1);
                        } else {
                            T2I = new Date(+I2I + r2I.maxRange - 1);
                        }
                    }
                    if (T2I - I2I < r2I.minRange - 1) {
                        if (g2I) {
                            I2I = new Date(T2I - r2I.minRange + 1);
                        } else {
                            T2I = new Date(+I2I + r2I.minRange - 1);
                        }
                    }
                }
                if (!I2I || !T2I) {
                    A2I = false;
                }
                if (Y2I) {
                    G2I();
                }
                return A2I;
            }

            function B2I() {
                return I2I && T2I ? Math.max(1, Math.round((new Date(T2I).setHours(0, 0, 0, 0) - new Date(I2I).setHours(0, 0, 0, 0)) / 86400000) + 1) : 0;
            }

            function y2I(c2I) {
                c2I.addClass('mbsc-range-btn-sel').attr('aria-checked', 'true').find('.mbsc-range-btn').addClass(m2I);
            }

            function k2I() {
                if (C2I && Q2I) {
                    M('.mbsc-range-btn-c', Q2I).removeClass('mbsc-range-btn-sel').removeAttr('aria-checked').find('.mbsc-range-btn', Q2I).removeClass(m2I);
                    y2I(M('.mbsc-range-btn-c', Q2I).eq(g2I));
                }
            }

            function G2I() {
                var n2I, b3I, u2I, J3I, s2I, U2I = 0,
                    t3I = q2I || !g2I ? ' mbsc-cal-day-hl mbsc-cal-sel-start' : ' mbsc-cal-sel-start',
                    r3I = q2I || g2I ? ' mbsc-cal-day-hl mbsc-cal-sel-end' : ' mbsc-cal-sel-end';
                a2I = I2I ? b6.formatDate(P2I, I2I, r2I) : '';
                M2I = T2I ? b6.formatDate(P2I, T2I, r2I) : '';
                if (Q2I) {
                    M('.mbsc-range-btn-v-start', Q2I).html(a2I || '&nbsp;');
                    M('.mbsc-range-btn-v-end', Q2I).html(M2I || '&nbsp;');
                    n2I = I2I ? new Date(I2I) : null;
                    u2I = T2I ? new Date(T2I) : null;
                    if (!n2I && u2I) {
                        n2I = new Date(u2I);
                    }
                    if (!u2I && n2I) {
                        u2I = new Date(n2I);
                    }
                    s2I = g2I ? u2I : n2I;
                    M('.mbsc-cal-table .mbsc-cal-day-sel .mbsc-cal-day-i', Q2I).removeClass(m2I);
                    M('.mbsc-cal-table .mbsc-cal-day-hl', Q2I).removeClass(d2I);
                    M('.mbsc-cal-table .mbsc-cal-day-sel', Q2I).removeClass('mbsc-cal-day-sel mbsc-cal-sel-start mbsc-cal-sel-end').removeAttr('aria-selected');
                    if (n2I && u2I) {
                        b3I = n2I.setHours(0, 0, 0, 0);
                        J3I = u2I.setHours(0, 0, 0, 0);
                        while (u2I >= n2I && U2I < 84) {
                            M('.mbsc-cal-day[data-full="' + s2I.getFullYear() + '-' + s2I.getMonth() + '-' + s2I.getDate() + '"]', Q2I).addClass('mbsc-cal-day-sel' + (s2I.getTime() === b3I ? t3I : '') + (s2I.getTime() === J3I ? r3I : '')).attr('aria-selected', 'true').find('.mbsc-cal-day-i ').addClass(m2I);
                            s2I.setDate(s2I.getDate() + (g2I ? -1 : 1));
                            U2I++;
                        }
                    }
                }
            }

            function i2I(v3I, T3I) {
                return {
                    h: v3I ? v3I.getHours() : T3I ? 23 : 0,
                    i: v3I ? v3I.getMinutes() : T3I ? 59 : 0,
                    s: v3I ? v3I.getSeconds() : T3I ? 59 : 0
                };
            }
            var e2I, Q2I, N2I, P2I, w2I, D2I, E2I, a2I, M2I, I2I, l2I, T2I, h2I, S2I, F2I, p2I, C2I, x2I = v2I._startDate,
                Z2I = v2I._endDate,
                g2I = 0,
                X2I = new Date(),
                o2I = M.extend({}, v2I.settings),
                r2I = M.extend(v2I.settings, A8, o2I),
                z2I = r2I.anchor,
                q2I = r2I.rangeTap,
                m2I = r2I.activeClass || '',
                V2I = 'mbsc-fr-btn-d ' + (r2I.disabledClass || ''),
                d2I = 'mbsc-cal-day-hl',
                f2I = r2I.defaultValue === null ? [] : r2I.defaultValue || [new Date(X2I.setHours(0, 0, 0, 0)), new Date(X2I.getFullYear(), X2I.getMonth(), X2I.getDate() + 6, 23, 59, 59, 999)];
            if (q2I) {
                r2I.tabs = true;
            }
            w2I = Q3.calbase.call(this, v2I);
            e2I = M.extend({}, w2I);
            P2I = v2I.format;
            S2I = r2I.controls.join('') === 'time';
            C2I = r2I.controls.length == 1 && r2I.controls[0] == 'calendar' ? r2I.showSelector : true;
            if (r2I.startInput) {
                F2I = M(r2I.startInput).prop('readonly');
                v2I.attachShow(M(r2I.startInput).prop('readonly', true), function() {
                    g2I = 0;
                    r2I.anchor = z2I || M(r2I.startInput);
                });
            }
            if (r2I.endInput) {
                p2I = M(r2I.endInput).prop('readonly');
                v2I.attachShow(M(r2I.endInput).prop('readonly', true), function() {
                    g2I = 1;
                    r2I.anchor = z2I || M(r2I.endInput);
                });
            }
            v2I.setVal = function(Q3I, P3I, x3I, q3I, Z3I) {
                var g3I = Q3I || [],
                    I3I = Q3I;
                if (g3I[0] === undefined || g3I[0] === null || g3I[0].getTime) {
                    E2I = true;
                    I2I = g3I[0] || null;
                    a2I = I2I ? b6.formatDate(P2I, I2I, r2I) : '';
                    if (!g2I) {
                        I3I = e2I.parseValue(a2I, v2I);
                    }
                }
                if (g3I[1] === undefined || g3I[1] === null || g3I[1].getTime) {
                    E2I = true;
                    T2I = g3I[1] || null;
                    M2I = T2I ? b6.formatDate(P2I, T2I, r2I) : '';
                    if (g2I) {
                        I3I = e2I.parseValue(M2I, v2I);
                    }
                }
                if (!q3I) {
                    v2I._startDate = x2I = I2I;
                    v2I._endDate = Z2I = T2I;
                }
                v2I._setVal(I3I, P3I, x3I, q3I, Z3I);
            };
            v2I.getVal = function(M3I) {
                return M3I ? [I2I, T2I] : v2I._hasValue ? [x2I, Z2I] : null;
            };
            v2I.getDayProps = function(D3I) {
                var a3I = I2I ? new Date(I2I.getFullYear(), I2I.getMonth(), I2I.getDate()) : null,
                    f3I = T2I ? new Date(T2I.getFullYear(), T2I.getMonth(), T2I.getDate()) : null;
                return {
                    selected: a3I && f3I && D3I >= a3I && D3I <= T2I,
                    cssClass: ((q2I || !g2I) && a3I && a3I.getTime() === D3I.getTime() || (q2I || g2I) && f3I && f3I.getTime() === D3I.getTime() ? d2I : '') + (a3I && a3I.getTime() === D3I.getTime() ? ' mbsc-cal-sel-start' : '') + (f3I && f3I.getTime() === D3I.getTime() ? ' mbsc-cal-sel-end' : '')
                };
            };
            v2I.setActiveDate = function(e3I) {
                var N3I;
                g2I = e3I == 'start' ? 0 : 1;
                N3I = e3I == 'start' ? I2I : T2I;
                if (v2I.isVisible()) {
                    k2I();
                    if (!q2I) {
                        M('.mbsc-cal-table .mbsc-cal-day-hl', Q2I).removeClass(d2I);
                        if (N3I) {
                            M('.mbsc-cal-day[data-full="' + N3I.getFullYear() + '-' + N3I.getMonth() + '-' + N3I.getDate() + '"]', Q2I).addClass(d2I);
                        }
                    }
                    if (N3I) {
                        D2I = true;

                        v2I.setDate(N3I, false, 1000, true);
                    }
                }
            };
            v2I.getValue = v2I.getVal;
            M.extend(w2I, {
                highlight: false,
                outerMonthChange: false,
                formatValue: function E3I() {
                    return a2I + (r2I.endInput ? '' : M2I ? ' - ' + M2I : '');
                },
                parseValue: function l3I(X3I) {
                    var d3I = X3I ? X3I.split(' - ') : [];
                    r2I.defaultValue = f2I[1];
                    if (r2I.endInput) {
                        Z2I = M(r2I.endInput).val() ? b6.parseDate(P2I, M(r2I.endInput).val(), r2I) : f2I[1];
                    } else {
                        Z2I = d3I[1] ? b6.parseDate(P2I, d3I[1], r2I) : f2I[1];
                    }
                    r2I.defaultValue = f2I[0];
                    if (r2I.startInput) {
                        x2I = M(r2I.startInput).val() ? b6.parseDate(P2I, M(r2I.startInput).val(), r2I) : f2I[0];
                    } else {
                        x2I = d3I[0] ? b6.parseDate(P2I, d3I[0], r2I) : f2I[0];
                    }
                    r2I.defaultValue = f2I[g2I];
                    a2I = x2I ? b6.formatDate(P2I, x2I, r2I) : '';
                    M2I = Z2I ? b6.formatDate(P2I, Z2I, r2I) : '';
                    v2I._startDate = x2I;
                    v2I._endDate = Z2I;
                    return e2I.parseValue(g2I ? M2I : a2I, v2I);
                },
                onFill: function h3I(m3I) {
                    j2I(m3I.change);
                },
                onBeforeClose: function z3I(i3I) {
                    if (i3I.button === 'set' && !H2I(true, true)) {
                        v2I.setActiveDate(g2I ? 'start' : 'end');
                        return false;
                    }
                },
                onHide: function w3I() {
                    e2I.onHide.call(v2I);
                    g2I = 0;
                    Q2I = null;
                    r2I.anchor = z2I;
                },
                onClear: function C3I() {
                    if (q2I) {
                        g2I = 0;
                    }
                },
                onBeforeShow: function V3I() {
                    r2I.headerText = false;
                    I2I = x2I;
                    T2I = Z2I;
                    l2I = i2I(I2I, 0);
                    h2I = i2I(T2I, 1);
                    if (r2I.counter) {
                        r2I.headerText = function() {
                            var k3I = B2I();
                            return (k3I > 1 ? r2I.selectedPluralText || r2I.selectedText : r2I.selectedText).replace(/{count}/, k3I);
                        };
                    }
                    E2I = true;
                },
                onMarkupReady: function H3I(o3I) {
                    var p3I;
                    if (I2I) {
                        D2I = true;
                        v2I.setDate(I2I, false, 0, true);
                        I2I = v2I.getDate(true);
                    }
                    if (T2I) {
                        D2I = true;
                        v2I.setDate(T2I, false, 0, true);
                        T2I = v2I.getDate(true);
                    }
                    if (g2I && T2I || !g2I && I2I) {
                        D2I = true;
                        v2I.setDate(g2I ? T2I : I2I, false, 0, true);
                    }
                    G2I();
                    e2I.onMarkupReady.call(this, o3I);
                    Q2I = M(o3I.target);
                    Q2I.addClass('mbsc-range');
                    if (C2I) {
                        p3I = '<div class="mbsc-range-btn-t" role="radiogroup">' + '<div class="mbsc-range-btn-c mbsc-range-btn-start"><div role="radio" class="mbsc-fr-btn-e mbsc-fr-btn-nhl mbsc-range-btn">' + r2I.fromText + '<div class="mbsc-range-btn-v mbsc-range-btn-v-start">' + (a2I || '&nbsp;') + '</div></div></div>' + '<div class="mbsc-range-btn-c mbsc-range-btn-end"><div role="radio" class="mbsc-fr-btn-e mbsc-fr-btn-nhl mbsc-range-btn">' + r2I.toText + '<div class="mbsc-range-btn-v mbsc-range-btn-v-end">' + (M2I || '&nbsp;') + '</div></div></div>' + '</div>';
                        M('.mbsc-cal-tabs', Q2I).before(p3I);
                        k2I();
                    }
                    M('.mbsc-range-btn-c', Q2I).on('touchstart click', function(K3I) {
                        if (W8(K3I, this)) {
                            v2I.showMonthView();
                            v2I.setActiveDate(M(this).index() ? 'end' : 'start');
                        }
                    });
                },
                onDayChange: function F3I(S3I) {
                    S3I.active = g2I ? 'end' : 'start';
                    N2I = true;
                },
                onSetDate: function G3I(j3I) {
                    var B3I = j3I.date,
                        y3I = v2I.order;
                    if (!D2I) {
                        if (y3I.h === undefined) {
                            B3I.setHours(g2I ? 23 : 0);
                        }
                        if (y3I.i === undefined) {
                            B3I.setMinutes(g2I ? 59 : 0);
                        }
                        if (y3I.s === undefined) {
                            B3I.setSeconds(g2I ? 59 : 0);
                        }
                        B3I.setMilliseconds(g2I ? 999 : 0);
                        if (!E2I || N2I) {
                            if (q2I && N2I) {
                                if (g2I == 1 && B3I < I2I) {
                                    g2I = 0;
                                }
                                if (g2I) {
                                    B3I.setHours(h2I.h, h2I.i, h2I.s, 999);
                                } else {
                                    B3I.setHours(l2I.h, l2I.i, l2I.s, 0);
                                }
                            }
                            if (g2I) {
                                T2I = new Date(B3I);
                                h2I = i2I(T2I);
                            } else {
                                I2I = new Date(B3I);
                                l2I = i2I(I2I);
                            }
                            if (S2I) {
                                K2I(I2I, B3I);
                                K2I(T2I, B3I);
                            }
                            if (q2I && N2I && !g2I) {
                                T2I = null;
                            }
                        }
                    }
                    v2I._isValid = H2I(E2I || N2I || r2I.autoCorrect, !D2I);
                    j3I.active = g2I ? 'end' : 'start';
                    if (!D2I && q2I) {
                        if (N2I) {
                            g2I = g2I ? 0 : 1;
                        }
                        k2I();
                    }
                    if (v2I.isVisible()) {
                        if (v2I._isValid) {
                            M('.mbsc-fr-btn-s .mbsc-fr-btn', v2I._markup).removeClass(V2I);
                        } else {
                            M('.mbsc-fr-btn-s .mbsc-fr-btn', v2I._markup).addClass(V2I);
                        }
                    }
                    N2I = false;
                    E2I = false;
                    D2I = false;
                },
                onTabChange: function R3I(L3I) {
                    if (L3I.tab != 'calendar') {
                        v2I.setDate(g2I ? T2I : I2I, false, 1000, true);
                    }
                    H2I(true, true);
                },
                onDestroy: function W3I() {
                    M(r2I.startInput).prop('readonly', F2I);
                    M(r2I.endInput).prop('readonly', p2I);
                }
            });
            return w2I;
        };
        var A = J.$;
        var Y8 = {
            inputClass: '',
            values: 5,
            order: 'desc',
            style: 'icon',
            invalid: [],
            icon: {
                filled: 'star3',
                empty: 'star3'
            }
        };
        J.presetShort('rating');
        J.presets.scroller.rating = function(U3I) {
            var M1I = A.extend({}, U3I.settings),
                A3I = A.extend(U3I.settings, Y8, M1I),
                c3I = A(this),
                g1I = this.id + '_dummy',
                P1I = A('label[for="' + this.id + '"]').attr('for', g1I),
                a1I = A3I.label !== undefined ? A3I.label : P1I.length ? P1I.text() : c3I.attr('name'),
                r1I = A3I.defaultValue,
                q1I = [
                    []
                ],
                x1I = {
                    data: [],
                    label: a1I,
                    circular: false
                },
                J1I = {},
                Y3I = [],
                n3I, T1I = false,
                O3I, s3I, t1I, I1I, Q1I, Z1I, u3I, v1I, D1I, b1I = A3I.style === 'grade' ? 'circle' : 'icon';
            if (c3I.is('select')) {
                A3I.values = {};
                A('option', c3I).each(function() {
                    A3I.values[A(this).val()] = A(this).text();
                });
                A('#' + g1I).remove();
            }
            if (A.isArray(A3I.values)) {
                for (O3I = 0; O3I < A3I.values.length; O3I++) {
                    u3I = +A3I.values[O3I];
                    if (isNaN(u3I)) {
                        u3I = O3I + 1;
                        T1I = true;
                    }
                    Y3I.push({
                        order: u3I,
                        key: A3I.values[O3I],
                        value: A3I.values[O3I]
                    });
                }
            } else if (A.isPlainObject(A3I.values)) {
                O3I = 1;
                T1I = true;
                for (v1I in A3I.values) {
                    u3I = +v1I;
                    if (isNaN(u3I)) {
                        u3I = O3I;
                    }
                    Y3I.push({
                        order: u3I,
                        key: v1I,
                        value: A3I.values[v1I]
                    });
                    O3I++;
                }
            } else {
                for (O3I = 1; O3I <= A3I.values; O3I++) {
                    Y3I.push({
                        order: O3I,
                        key: O3I,
                        value: O3I
                    });
                }
            }
            if (A3I.showText === undefined && T1I) {
                A3I.showText = true;
            }
            if (A3I.icon.empty === undefined) {
                A3I.icon.empty = A3I.icon.filled;
            }
            Y3I.sort(function(f1I, N1I) {
                return A3I.order == 'desc' ? N1I.order - f1I.order : f1I.order - N1I.order;
            });
            D1I = A3I.order == 'desc' ? Y3I[0].order : Y3I[Y3I.length - 1].order;
            for (O3I = 0; O3I < Y3I.length; O3I++) {
                Z1I = Y3I[O3I].order;
                I1I = Y3I[O3I].key;
                Q1I = Y3I[O3I].value;
                t1I = '';
                for (s3I = 1; s3I < Z1I + 1; s3I++) {
                    t1I += '<span class="mbsc-rating-' + b1I + (b1I === 'circle' ? '' : ' mbsc-ic mbsc-ic-' + A3I.icon.filled) + ' ">' + (b1I == 'circle' ? s3I : ' ') + '</span>';
                }
                for (s3I = Z1I + 1; s3I <= D1I; s3I++) {
                    t1I += '<span class="mbsc-rating-' + b1I + (b1I === 'circle' ? ' mbsc-rating-circle-unf' : ' mbsc-ic mbsc-ic-' + (A3I.icon.empty ? A3I.icon.empty + ' mbsc-rating-icon-unf' : '') + (A3I.icon.empty === A3I.icon.filled ? ' mbsc-rating-icon-same' : '')) + '"></span>';
                }
                if (r1I === undefined) {
                    r1I = I1I;
                }
                t1I += A3I.showText ? '<span class="mbsc-rating-txt">' + Q1I + '</span>' : '';
                x1I.data.push({
                    value: I1I,
                    display: t1I,
                    label: Q1I
                });
                J1I[I1I] = Q1I;
            }
            if (c3I.is('select')) {
                n3I = A('<input type="text" id="' + g1I + '" value="' + J1I[c3I.val()] + '" class="' + A3I.inputClass + '" placeholder="' + (A3I.placeholder || '') + '" readonly />').insertBefore(c3I);
            }
            q1I[0].push(x1I);
            if (n3I) {
                U3I.attachShow(n3I);
            }
            if (c3I.is('select')) {
                c3I.hide().closest('.ui-field-contain').trigger('create');
            }
            U3I.getVal = function(E1I) {
                var e1I = U3I._hasValue ? U3I[E1I ? '_tempWheelArray' : '_wheelArray'][0] : null;
                return J.util.isNumeric(e1I) ? +e1I : e1I;
            };
            return {
                anchor: n3I,
                wheels: q1I,
                headerText: false,
                compClass: 'mbsc-rating',
                setOnTap: true,
                formatValue: function l1I(d1I) {
                    return J1I[d1I[0]];
                },
                parseValue: function X1I(m1I) {
                    var h1I;
                    for (h1I in J1I) {
                        if (n3I && h1I == m1I || !n3I && J1I[h1I] == m1I) {
                            return [h1I];
                        }
                    }
                    return [r1I];
                },
                validate: function z1I() {
                    return {
                        disabled: [A3I.invalid]
                    };
                },
                onFill: function i1I(w1I) {
                    if (n3I) {
                        n3I.val(w1I.valueText);
                        c3I.val(U3I._tempWheelArray[0]);
                    }
                },
                onDestroy: function C1I() {
                    if (n3I) {
                        n3I.remove();
                    }
                    c3I.show();
                }
            };
        };
        var c8 = 0;
        J.util.getJson = i3;
        var C = J.$;
        var p6 = J.util;
        var A2 = p6.isString;
        var t9 = {
            inputClass: '',
            invalid: [],
            rtl: false,
            showInput: true,
            groupLabel: 'Groups',
            dataHtml: 'html',
            dataText: 'text',
            dataValue: 'value',
            dataGroup: 'group',
            dataDisabled: 'disabled',
            filterPlaceholderText: 'Type to filter',
            filterEmptyText: 'No results',
            filterClearIcon: 'material-close'
        };
        J.presetShort('select');
        J.presets.scroller.select = function(R1I) {
            function l8I(W8I) {
                var R8I, u8I, L8I, y8I, n8I, j8I, Y8I = 0,
                    A8I = 0,
                    O8I = {};
                W1I = {};
                b8I = {};
                Y1I = [];
                M8I = [];
                r8I.length = 0;
                if (Z8I) {
                    C.each(q8I, function(U8I, s8I) {
                        n8I = s8I[j1I.dataText];
                        u8I = s8I[j1I.dataHtml];
                        j8I = s8I[j1I.dataValue];
                        L8I = s8I[j1I.dataGroup];
                        y8I = {
                            value: j8I,
                            html: u8I,
                            text: n8I,
                            index: U8I
                        };
                        W1I[j8I] = y8I;
                        if (!W8I || h8I(n8I, W8I)) {
                            Y1I.push(y8I);
                            if (g8I) {
                                if (O8I[L8I] === undefined) {
                                    R8I = {
                                        text: L8I,
                                        value: A8I,
                                        options: [],
                                        index: A8I
                                    };
                                    b8I[A8I] = R8I;
                                    O8I[L8I] = A8I;
                                    M8I.push(R8I);
                                    A8I++;
                                } else {
                                    R8I = b8I[O8I[L8I]];
                                }
                                if (v8I) {
                                    y8I.index = R8I.options.length;
                                }
                                y8I.group = O8I[L8I];
                                R8I.options.push(y8I);
                            }
                            if (s8I[j1I.dataDisabled]) {
                                r8I.push(j8I);
                            }
                        }
                    });
                } else {
                    if (g8I) {
                        var c8I = true;
                        C('optgroup', A1I).each(function(b9I) {
                            b8I[b9I] = {
                                text: this.label,
                                value: b9I,
                                options: [],
                                index: b9I
                            };
                            c8I = true;
                            C('option', this).each(function(J9I) {
                                y8I = {
                                    value: this.value,
                                    text: this.text,
                                    index: v8I ? J9I : Y8I++,
                                    group: b9I
                                };
                                W1I[this.value] = y8I;
                                if (!W8I || h8I(this.text, W8I)) {
                                    if (c8I) {
                                        M8I.push(b8I[b9I]);
                                        c8I = false;
                                    }
                                    Y1I.push(y8I);
                                    b8I[b9I].options.push(y8I);
                                    if (this.disabled) {
                                        r8I.push(this.value);
                                    }
                                }
                            });
                        });
                    } else {
                        C('option', A1I).each(function(t9I) {
                            y8I = {
                                value: this.value,
                                text: this.text,
                                index: t9I
                            };
                            W1I[this.value] = y8I;
                            if (!W8I || h8I(this.text, W8I)) {
                                Y1I.push(y8I);
                                if (this.disabled) {
                                    r8I.push(this.value);
                                }
                            }
                        });
                    }
                }
                if (Y1I.length) {
                    i8I = Y1I[0].value;
                }
                if (m8I) {
                    Y1I = [];
                    Y8I = 0;
                    C.each(b8I, function(v9I, r9I) {
                        if (r9I.options.length) {
                            j8I = '__group' + v9I;
                            y8I = {
                                text: r9I.text,
                                value: j8I,
                                group: v9I,
                                index: Y8I++,
                                cssClass: 'mbsc-sel-gr'
                            };
                            W1I[j8I] = y8I;
                            Y1I.push(y8I);
                            r8I.push(y8I.value);
                            C.each(r9I.options, function(g9I, T9I) {
                                T9I.index = Y8I++;
                                Y1I.push(T9I);
                            });
                        }
                    });
                }
                if (x8I) {
                    if (Y1I.length) {
                        x8I.removeClass('mbsc-sel-empty-v');
                    } else {
                        x8I.addClass('mbsc-sel-empty-v');
                    }
                }
            }

            function C8I(Q9I, P9I, x9I) {
                var I9I, q9I = [];
                for (I9I = 0; I9I < Q9I.length; I9I++) {
                    q9I.push({
                        value: Q9I[I9I].value,
                        display: Q9I[I9I].html || Q9I[I9I].text,
                        cssClass: Q9I[I9I].cssClass
                    });
                }
                return {
                    circular: false,
                    multiple: P9I,
                    data: q9I,
                    label: x9I
                };
            }

            function V8I() {
                return C8I(M8I, false, j1I.groupLabel);
            }

            function d8I() {
                return C8I(v8I ? b8I[s1I].options : Y1I, t8I, z8I);
            }

            function H8I() {
                var M9I, a9I, Z9I = [
                    []
                ];
                if (n1I) {
                    M9I = V8I();
                    if (E8I) {
                        Z9I[0][c1I] = M9I;
                    } else {
                        Z9I[c1I] = [M9I];
                    }
                }
                a9I = d8I();
                if (E8I) {
                    Z9I[0][L1I] = a9I;
                } else {
                    Z9I[L1I] = [a9I];
                }
                return Z9I;
            }

            function a8I(D9I) {
                if (U1I) {
                    if (D9I && A2(D9I)) {
                        D9I = D9I.split(',');
                    }
                    if (C.isArray(D9I)) {
                        D9I = D9I[0];
                    }
                }
                O1I = D9I === undefined || D9I === null || D9I === '' || !W1I[D9I] ? i8I : D9I;
                if (n1I) {
                    s1I = W1I[O1I] ? W1I[O1I].group : null;
                }
            }

            function B8I(N9I, e9I) {
                var f9I = N9I ? R1I._tempWheelArray : R1I._hasValue ? R1I._wheelArray : null;
                return f9I ? j1I.group && e9I ? f9I : f9I[L1I] : null;
            }

            function G8I(X9I) {
                var E9I, l9I, d9I = [];
                if (t8I) {
                    for (E9I in R1I._tempSelected[L1I]) {
                        d9I.push(N8I[E9I] || (W1I[E9I] ? W1I[E9I].text : ''));
                    }
                    return d9I.join(', ');
                }
                l9I = X9I[L1I];
                return W1I[l9I] ? W1I[l9I].text : '';
            }

            function F8I() {
                var h9I = R1I.getVal(),
                    m9I = R1I._tempValue;
                if (!(j1I.filter && j1I.display == 'inline')) {
                    u1I.val(m9I);
                }
                A1I.val(h9I);
            }

            function S8I() {
                var z9I = {};
                z9I[L1I] = d8I();
                D8I = true;
                R1I.changeWheel(z9I);
            }

            function h8I(w9I, i9I) {
                i9I = i9I.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
                return w9I.match(new RegExp(i9I, 'ig'));
            }

            function p8I(C9I) {
                return j1I.data.dataField ? C9I[j1I.data.dataField] : j1I.data.processResponse ? j1I.data.processResponse(C9I) : C9I;
            }

            function o8I(k9I) {
                var V9I = {};
                l8I(k9I);
                j1I.wheels = H8I();
                a8I(O1I);
                V9I[L1I] = d8I();
                R1I._tempWheelArray[L1I] = O1I;
                if (n1I) {
                    V9I[c1I] = V8I();
                    R1I._tempWheelArray[c1I] = s1I;
                }
                if (R1I._isVisible) {
                    R1I.changeWheel(V9I, 0, true);
                }
            }
            var u1I, q8I, i8I, w8I, J8I, s1I, M8I, b8I, c1I, Q8I, O1I, Y1I, L1I, D8I, N8I = {},
                X8I = 1000,
                A1I = C(this),
                K8I = C.extend({}, R1I.settings),
                j1I = C.extend(R1I.settings, t9, K8I),
                x8I = C('<div class="mbsc-sel-empty">' + j1I.filterEmptyText + '</div>'),
                k8I = j1I.readonly,
                W1I = {},
                e8I = j1I.layout || (/top|bottom|inline/.test(j1I.display) || j1I.filter ? 'liquid' : ''),
                E8I = e8I == 'liquid',
                U1I = p6.isNumeric(j1I.select) ? j1I.select : j1I.select == 'multiple' || A1I.prop('multiple'),
                t8I = U1I || (j1I.filter ? 1 : false),
                P8I = this.id + '_dummy',
                f8I = C('label[for="' + this.id + '"]').attr('for', P8I),
                z8I = j1I.label !== undefined ? j1I.label : f8I.length ? f8I.text() : A1I.attr('name'),
                Z8I = !!j1I.data,
                g8I = Z8I ? !!j1I.group : C('optgroup', A1I).length,
                T8I = j1I.group,
                n1I = g8I && T8I && T8I.groupWheel !== false,
                v8I = g8I && T8I && n1I && T8I.clustered === true,
                m8I = g8I && (!T8I || T8I.header !== false && !v8I),
                I8I = A1I.val() || (U1I ? [] : ['']),
                r8I = [];
            R1I.setVal = function(H9I, p9I, K9I, o9I, F9I) {
                if (t8I) {
                    if (H9I && !U1I) {
                        H9I = [H9I];
                    }
                    if (H9I && A2(H9I)) {
                        H9I = H9I.split(',');
                    }
                    R1I._tempSelected[L1I] = p6.arrayToObject(H9I);
                    if (!o9I) {
                        R1I._selected[L1I] = p6.arrayToObject(H9I);
                    }
                    H9I = H9I ? H9I[0] : null;
                }
                R1I._setVal(H9I, p9I, K9I, o9I, F9I);
            };
            R1I.getVal = function(G9I, B9I) {
                if (t8I) {
                    var S9I = p6.objectToArray(G9I ? R1I._tempSelected[L1I] : R1I._selected[L1I]);
                    return U1I ? S9I : S9I.length ? S9I[0] : null;
                }
                return B8I(G9I, B9I);
            };
            R1I.refresh = function(y9I, j9I) {
                if (y9I) {
                    q8I = y9I;
                } else if (C.isArray(j1I.data)) {
                    q8I = j1I.data;
                }
                if (!y9I && Q8I && j9I === undefined) {
                    i3(j1I.data.url, function(R9I) {
                        q8I = p8I(R9I);
                        o8I();
                    }, j1I.data.dataType);
                } else {
                    o8I(j9I);
                }
            };
            if (!j1I.invalid.length) {
                j1I.invalid = r8I;
            }
            if (n1I) {
                c1I = 0;
                L1I = 1;
            } else {
                c1I = -1;
                L1I = 0;
            }
            if (t8I) {
                if (U1I) {
                    A1I.prop('multiple', true);
                }
                if (I8I && A2(I8I)) {
                    I8I = I8I.split(',');
                }
                R1I._selected[L1I] = p6.arrayToObject(I8I);
            }
            if (R1I._dummyInput) {
                R1I._dummyInput.remove();
            }
            if (A1I.next().is('input.mbsc-control')) {
                u1I = A1I.off('.mbsc-form').next().removeAttr('tabindex');
            } else {
                if (j1I.filter && j1I.display == 'inline') {
                    R1I._dummyInput = C('<div class="mbsc-sel-input-wrap"><input type="text" id="' + P8I + '" class="mbsc-control ' + j1I.inputClass + '" readonly /></div>');
                } else {
                    u1I = C('<input type="text" id="' + P8I + '" class="mbsc-control ' + j1I.inputClass + '" readonly />');
                    R1I._dummyInput = u1I;
                }
                if (j1I.showInput) {
                    R1I._dummyInput.insertBefore(A1I);
                    if (!u1I) {
                        u1I = R1I._dummyInput.find('#' + P8I);
                    }
                }
            }
            R1I.attachShow(u1I.attr('placeholder', j1I.placeholder || ''));
            A1I.addClass('mbsc-sel-hdn').attr('tabindex', -1);
            if (j1I.filter) {
                w8I = j1I.filter.minLength || 0;
            }
            Q8I = j1I.data && j1I.data.url;
            if (Q8I) {
                R1I.refresh();
            } else {
                if (Z8I) {
                    q8I = j1I.data;
                }
                l8I();
                a8I(A1I.val());
            }
            return {
                layout: e8I,
                headerText: false,
                anchor: u1I,
                compClass: 'mbsc-sel' + (n1I ? ' mbsc-sel-gr-whl' : '') + (t8I ? ' mbsc-sel-multi' : ''),
                setOnTap: n1I ? [false, true] : true,
                formatValue: G8I,
                parseValue: function L9I(W9I) {
                    a8I(W9I === undefined ? A1I.val() : W9I);
                    return n1I ? [s1I, O1I] : [O1I];
                },
                validate: function A9I(c9I) {
                    var Y9I = c9I.index,
                        O9I = [];
                    O9I[L1I] = j1I.invalid;
                    if (v8I && !D8I && Y9I === undefined) {
                        S8I();
                    }
                    D8I = false;
                    return {
                        disabled: O9I
                    };
                },
                onRead: F8I,
                onFill: F8I,
                onMarkupReady: function n9I(r5I, U9I) {
                    if (j1I.filter) {
                        var b5I, t5I, u9I, J5I = C('.mbsc-fr-w', r5I.target),
                            s9I = C('<span class="mbsc-sel-filter-clear mbsc-ic mbsc-ic-' + j1I.filterClearIcon + '"></span>');
                        if (j1I.display == 'inline') {
                            b5I = u1I;
                            u1I.parent().find('.mbsc-sel-filter-clear').remove();
                        } else {
                            J5I.prepend('<div class="mbsc-input mbsc-sel-filter-cont mbsc-control-w"><span class="mbsc-input-wrap"><input type="text" class="mbsc-sel-filter-input mbsc-control"/></span></div>');
                            b5I = J5I.find('.mbsc-sel-filter-input');
                        }
                        J8I = '';
                        u9I = b5I[0];
                        b5I.prop('readonly', false).attr('placeholder', j1I.filterPlaceholderText).parent().append(s9I);
                        J5I.find('.mbsc-fr-c').prepend(x8I);
                        U9I.tap(s9I, function() {
                            u9I.value = '';
                            U9I.refresh();
                            s9I.removeClass('mbsc-sel-filter-show-clear');
                        });
                        b5I.on('keydown', function(v5I) {
                            if (v5I.keyCode == 13 || v5I.keyCode == 27) {
                                v5I.stopPropagation();
                                u9I.blur();
                            }
                        }).on('keyup', function() {
                            clearTimeout(t5I);
                            if (u9I.value.length) {
                                s9I.addClass('mbsc-sel-filter-show-clear');
                            } else {
                                s9I.removeClass('mbsc-sel-filter-show-clear');
                            }
                            t5I = setTimeout(function() {
                                if (J8I === u9I.value || U9I.trigger('onFilter', {
                                        filterText: u9I.value
                                    }) === false) {
                                    return;
                                }
                                J8I = u9I.value;
                                if (J8I.length >= w8I || !J8I.length) {
                                    if (Q8I && j1I.data.remoteFilter) {
                                        i3(j1I.data.url + encodeURIComponent(J8I), function(T5I) {
                                            U9I.refresh(p8I(T5I));
                                        }, j1I.data.dataType);
                                    } else {
                                        U9I.refresh(undefined, J8I);
                                    }
                                }
                            }, 500);
                        });
                    }
                },
                onBeforeShow: function g5I() {
                    if (U1I && j1I.counter) {
                        j1I.headerText = function() {
                            var I5I = 0;
                            C.each(R1I._tempSelected[L1I], function() {
                                I5I++;
                            });
                            return (I5I > 1 ? j1I.selectedPluralText || j1I.selectedText : j1I.selectedText).replace(/{count}/, I5I);
                        };
                    }
                    a8I(A1I.val());
                    if (j1I.filter) {
                        l8I(undefined);
                    }
                    R1I.settings.wheels = H8I();
                    D8I = true;
                },
                onWheelGestureStart: function Q5I(q5I) {
                    if (q5I.index == c1I) {
                        j1I.readonly = [false, true];
                    }
                },
                onWheelAnimationEnd: function P5I(Z5I) {
                    var x5I = R1I.getArrayVal(true);
                    if (Z5I.index == c1I) {
                        j1I.readonly = k8I;
                        if (x5I[c1I] != s1I) {
                            s1I = x5I[c1I];
                            O1I = b8I[s1I].options[0].value;
                            x5I[L1I] = O1I;
                            if (v8I) {
                                S8I();
                            } else {
                                R1I.setArrayVal(x5I, false, false, true, X8I);
                            }
                        }
                    } else if (Z5I.index == L1I && x5I[L1I] != O1I) {
                        O1I = x5I[L1I];
                        if (n1I && W1I[O1I] && W1I[O1I].group != s1I) {
                            s1I = W1I[O1I].group;
                            x5I[c1I] = s1I;
                            R1I.setArrayVal(x5I, false, false, true, X8I);
                        }
                    }
                },
                onItemTap: function M5I(a5I) {
                    if (a5I.index == L1I) {
                        N8I[a5I.value] = W1I[a5I.value].text;
                        if (t8I && !U1I && a5I.selected) {
                            return false;
                        }
                    }
                },
                onClose: function D5I() {
                    if (Q8I && j1I.data.remoteFilter && J8I) {
                        R1I.refresh();
                    }
                },
                onDestroy: function f5I() {
                    if (R1I._dummyInput) {
                        R1I._dummyInput.remove();
                    }
                    A1I.removeClass('mbsc-sel-hdn').removeAttr('tabindex');
                }
            };
        };
        var D = J.$;
        var v9 = {
            autostart: false,
            step: 1,
            useShortLabels: false,
            labels: ['Years', 'Months', 'Days', 'Hours', 'Minutes', 'Seconds', ''],
            labelsShort: ['Yrs', 'Mths', 'Days', 'Hrs', 'Mins', 'Secs', ''],
            startText: 'Start',
            stopText: 'Stop',
            resetText: 'Reset',
            lapText: 'Lap',
            hideText: 'Hide'
        };
        J.presetShort('timer');
        J.presets.scroller.timer = function(N5I) {
            function n5I(t0I) {
                return new Date(t0I.getUTCFullYear(), t0I.getUTCMonth(), t0I.getUTCDate(), t0I.getUTCHours(), t0I.getUTCMinutes(), t0I.getUTCSeconds(), t0I.getUTCMilliseconds());
            }

            function J0I(P0I) {
                var r0I = {};
                if (L5I && X5I[i5I].index > X5I.days.index) {
                    var I0I, g0I, x0I, Q0I, q0I = new Date(),
                        v0I = m5I ? q0I : z5I,
                        T0I = m5I ? z5I : q0I;
                    T0I = n5I(T0I);
                    v0I = n5I(v0I);
                    r0I.years = v0I.getFullYear() - T0I.getFullYear();
                    r0I.months = v0I.getMonth() - T0I.getMonth();
                    r0I.days = v0I.getDate() - T0I.getDate();
                    r0I.hours = v0I.getHours() - T0I.getHours();
                    r0I.minutes = v0I.getMinutes() - T0I.getMinutes();
                    r0I.seconds = v0I.getSeconds() - T0I.getSeconds();
                    r0I.fract = (v0I.getMilliseconds() - T0I.getMilliseconds()) / 10;
                    for (I0I = h5I.length; I0I > 0; I0I--) {
                        g0I = h5I[I0I - 1];
                        x0I = X5I[g0I];
                        Q0I = h5I[D.inArray(g0I, h5I) - 1];
                        if (X5I[Q0I] && r0I[g0I] < 0) {
                            r0I[Q0I]--;
                            r0I[g0I] += Q0I == 'months' ? 32 - new Date(v0I.getFullYear(), v0I.getMonth(), 32).getDate() : x0I.until + 1;
                        }
                    }
                    if (i5I == 'months') {
                        r0I.months += r0I.years * 12;
                        delete r0I.years;
                    }
                } else {
                    D(h5I).each(function(M0I, Z0I) {
                        if (X5I[Z0I].index <= X5I[i5I].index) {
                            r0I[Z0I] = Math.floor(P0I / X5I[Z0I].limit);
                            P0I -= r0I[Z0I] * X5I[Z0I].limit;
                        }
                    });
                }
                return r0I;
            }

            function b0I(f0I) {
                var N0I = 1,
                    a0I = X5I[f0I],
                    D0I = a0I.wheel,
                    e0I = a0I.prefix,
                    l0I = 0,
                    d0I = a0I.until,
                    E0I = X5I[h5I[D.inArray(f0I, h5I) - 1]];
                if (a0I.index <= X5I[i5I].index && (!E0I || E0I.limit > G5I)) {
                    if (!V5I[f0I]) {
                        c5I[0].push(D0I);
                    }
                    V5I[f0I] = 1;
                    D0I.data = [];
                    D0I.label = a0I.label || '';
                    D0I.cssClass = 'mbsc-timer-whl-' + f0I;
                    if (G5I >= a0I.limit) {
                        N0I = Math.max(Math.round(G5I / a0I.limit), 1);
                        F5I = N0I * a0I.limit;
                    }
                    if (f0I == i5I) {
                        D0I.min = 0;
                        D0I.data = function(X0I) {
                            return {
                                value: X0I,
                                display: s5I(X0I, e0I, a0I.label)
                            };
                        };
                        D0I.getIndex = function(h0I) {
                            return h0I;
                        };
                    } else {
                        for (B5I = l0I; B5I <= d0I; B5I += N0I) {
                            D0I.data.push({
                                value: B5I,
                                display: s5I(B5I, e0I, a0I.label)
                            });
                        }
                    }
                }
            }

            function s5I(m0I, z0I, i0I) {
                return (z0I || '') + (m0I < 10 ? '0' : '') + m0I + '<span class="mbsc-timer-lbl">' + i0I + '</span>';
            }

            function H5I(k0I) {
                var w0I = [],
                    C0I, V0I = J0I(k0I);
                D(h5I).each(function(o0I, H0I) {
                    if (V5I[H0I]) {
                        C0I = Math.max(Math.round(G5I / X5I[H0I].limit), 1);
                        w0I.push(Math.round(V0I[H0I] / C0I) * C0I);
                    }
                });
                return w0I;
            }

            function Y5I(p0I) {
                if (L5I) {
                    l5I = z5I - new Date();
                    if (l5I < 0) {
                        l5I *= -1;
                        m5I = true;
                    } else {
                        m5I = false;
                    }
                    E5I = 0;
                    p5I = true;
                } else if (z5I !== undefined) {
                    p5I = false;
                    l5I = z5I * 1000;
                    m5I = e5I.mode != 'countdown';
                    if (p0I) {
                        E5I = 0;
                    }
                } else {
                    l5I = 0;
                    m5I = e5I.mode != 'countdown';
                    p5I = m5I;
                    if (p0I) {
                        E5I = 0;
                    }
                }
            }

            function O5I() {
                if (w5I) {
                    D('.mbsc-fr-w', d5I).addClass('mbsc-timer-running mbsc-timer-locked');
                    D('.mbsc-timer-btn-toggle-c > div', d5I).text(e5I.stopText);
                    if (N5I.buttons.start.icon) {
                        D('.mbsc-timer-btn-toggle-c > div', d5I).removeClass('mbsc-ic-' + N5I.buttons.start.icon);
                    }
                    if (N5I.buttons.stop.icon) {
                        D('.mbsc-timer-btn-toggle-c > div', d5I).addClass('mbsc-ic-' + N5I.buttons.stop.icon);
                    }
                    if (e5I.mode == 'stopwatch') {
                        D('.mbsc-timer-btn-resetlap-c > div', d5I).text(e5I.lapText);
                        if (N5I.buttons.reset.icon) {
                            D('.mbsc-timer-btn-resetlap-c > div', d5I).removeClass('mbsc-ic-' + N5I.buttons.reset.icon);
                        }
                        if (N5I.buttons.lap.icon) {
                            D('.mbsc-timer-btn-resetlap-c > div', d5I).addClass('mbsc-ic-' + N5I.buttons.lap.icon);
                        }
                    }
                } else {
                    D('.mbsc-fr-w', d5I).removeClass('mbsc-timer-running');
                    D('.mbsc-timer-btn-toggle-c > div', d5I).text(e5I.startText);
                    if (N5I.buttons.start.icon) {
                        D('.mbsc-timer-btn-toggle-c > div', d5I).addClass('mbsc-ic-' + N5I.buttons.start.icon);
                    }
                    if (N5I.buttons.stop.icon) {
                        D('.mbsc-timer-btn-toggle-c > div', d5I).removeClass('mbsc-ic-' + N5I.buttons.stop.icon);
                    }
                    if (e5I.mode == 'stopwatch') {
                        D('.mbsc-timer-btn-resetlap-c > div', d5I).text(e5I.resetText);
                        if (N5I.buttons.reset.icon) {
                            D('.mbsc-timer-btn-resetlap-c > div', d5I).addClass('mbsc-ic-' + N5I.buttons.reset.icon);
                        }
                        if (N5I.buttons.lap.icon) {
                            D('.mbsc-timer-btn-resetlap-c > div', d5I).removeClass('mbsc-ic-' + N5I.buttons.lap.icon);
                        }
                    }
                }
            }
            var B5I, W5I, F5I, o5I, K5I, S5I, l5I, E5I, m5I, d5I, U5I, u5I = D.extend({}, N5I.settings),
                e5I = D.extend(N5I.settings, v9, u5I),
                C5I = e5I.useShortLabels ? e5I.labelsShort : e5I.labels,
                A5I = ['toggle', 'resetlap'],
                h5I = ['years', 'months', 'days', 'hours', 'minutes', 'seconds', 'fract'],
                X5I = {
                    'years': {
                        index: 6,
                        until: 10,
                        limit: 1000 * 60 * 60 * 24 * 365,
                        label: C5I[0],
                        wheel: {}
                    },
                    'months': {
                        index: 5,
                        until: 11,
                        limit: 1000 * 60 * 60 * 24 * 30,
                        label: C5I[1],
                        wheel: {}
                    },
                    'days': {
                        index: 4,
                        until: 31,
                        limit: 1000 * 60 * 60 * 24,
                        label: C5I[2],
                        wheel: {}
                    },
                    'hours': {
                        index: 3,
                        until: 23,
                        limit: 1000 * 60 * 60,
                        label: C5I[3],
                        wheel: {}
                    },
                    'minutes': {
                        index: 2,
                        until: 59,
                        limit: 1000 * 60,
                        label: C5I[4],
                        wheel: {}
                    },
                    'seconds': {
                        index: 1,
                        until: 59,
                        limit: 1000,
                        label: C5I[5],
                        wheel: {}
                    },
                    'fract': {
                        index: 0,
                        until: 99,
                        limit: 10,
                        label: C5I[6],
                        prefix: '.',
                        wheel: {}
                    }
                },
                V5I = {},
                j5I = [],
                R5I = 0,
                w5I = false,
                k5I = true,
                p5I = false,
                G5I = Math.max(10, e5I.step * 1000),
                i5I = e5I.maxWheel,
                y5I = e5I.mode == 'stopwatch' || L5I,
                z5I = e5I.targetTime,
                L5I = z5I && z5I.getTime !== undefined,
                c5I = [
                    []
                ];
            N5I.start = function() {
                if (k5I) {
                    N5I.reset();
                }
                if (!w5I) {
                    Y5I();
                    if (!p5I && E5I >= l5I) {
                        return;
                    }
                    w5I = true;
                    k5I = false;
                    K5I = new Date();
                    o5I = E5I;
                    e5I.readonly = true;
                    N5I.setVal(H5I(m5I ? E5I : l5I - E5I), true, true, false, 100);
                    W5I = setInterval(function() {
                        E5I = new Date() - K5I + o5I;
                        N5I.setVal(H5I(m5I ? E5I : l5I - E5I), true, true, false, Math.min(100, F5I - 10));
                        if (!p5I && E5I + F5I >= l5I) {
                            clearInterval(W5I);
                            setTimeout(function() {
                                N5I.stop();
                                E5I = l5I;
                                N5I.setVal(H5I(m5I ? E5I : 0), true, true, false, 100);
                                N5I.trigger('onFinish', {
                                    time: l5I
                                });
                                k5I = true;
                            }, l5I - E5I);
                        }
                    }, F5I);
                    O5I();
                    N5I.trigger('onStart');
                }
            };
            N5I.stop = function() {
                if (w5I) {
                    w5I = false;
                    clearInterval(W5I);
                    E5I = new Date() - K5I + o5I;
                    O5I();
                    N5I.trigger('onStop', {
                        ellapsed: E5I
                    });
                }
            };
            N5I.toggle = function() {
                if (w5I) {
                    N5I.stop();
                } else {
                    N5I.start();
                }
            };
            N5I.reset = function() {
                N5I.stop();
                E5I = 0;
                j5I = [];
                R5I = 0;
                N5I.setVal(H5I(m5I ? 0 : l5I), true, true, false, 100);
                N5I.settings.readonly = y5I;
                k5I = true;
                if (!y5I) {
                    D('.mbsc-fr-w', d5I).removeClass('mbsc-timer-locked');
                }
                N5I.trigger('onReset');
            };
            N5I.lap = function() {
                if (w5I) {
                    S5I = new Date() - K5I + o5I;
                    U5I = S5I - R5I;
                    R5I = S5I;
                    j5I.push(S5I);
                    N5I.trigger('onLap', {
                        ellapsed: S5I,
                        lap: U5I,
                        laps: j5I
                    });
                }
            };
            N5I.resetlap = function() {
                if (w5I && e5I.mode == 'stopwatch') {
                    N5I.lap();
                } else {
                    N5I.reset();
                }
            };
            N5I.getTime = function() {
                return l5I;
            };
            N5I.setTime = function(K0I) {
                z5I = K0I / 1000;
                l5I = K0I;
            };
            N5I.getEllapsedTime = function() {
                return w5I ? new Date() - K5I + o5I : 0;
            };
            N5I.setEllapsedTime = function(F0I, S0I) {
                if (!k5I) {
                    o5I = E5I = F0I;
                    K5I = new Date();
                    N5I.setVal(H5I(m5I ? E5I : l5I - E5I), true, S0I, false, 100);
                }
            };
            Y5I(true);
            if (!i5I && !l5I) {
                i5I = 'minutes';
            }
            if (e5I.display !== 'inline') {
                A5I.push('hide');
            }
            if (!i5I) {
                D(h5I).each(function(B0I, G0I) {
                    if (!i5I && l5I >= X5I[G0I].limit) {
                        i5I = G0I;
                        return false;
                    }
                });
            }
            D(h5I).each(function(j0I, y0I) {
                b0I(y0I);
            });
            F5I = Math.max(87, F5I);
            if (e5I.autostart) {
                setTimeout(function() {
                    N5I.start();
                }, 0);
            }
            N5I.handlers.toggle = N5I.toggle;
            N5I.handlers.start = N5I.start;
            N5I.handlers.stop = N5I.stop;
            N5I.handlers.resetlap = N5I.resetlap;
            N5I.handlers.reset = N5I.reset;
            N5I.handlers.lap = N5I.lap;
            N5I.buttons.toggle = {
                parentClass: 'mbsc-timer-btn-toggle-c',
                text: e5I.startText,
                icon: e5I.startIcon,
                handler: 'toggle'
            };
            N5I.buttons.start = {
                text: e5I.startText,
                icon: e5I.startIcon,
                handler: 'start'
            };
            N5I.buttons.stop = {
                text: e5I.stopText,
                icon: e5I.stopIcon,
                handler: 'stop'
            };
            N5I.buttons.reset = {
                text: e5I.resetText,
                icon: e5I.resetIcon,
                handler: 'reset'
            };
            N5I.buttons.lap = {
                text: e5I.lapText,
                icon: e5I.lapIcon,
                handler: 'lap'
            };
            N5I.buttons.resetlap = {
                parentClass: 'mbsc-timer-btn-resetlap-c',
                text: e5I.resetText,
                icon: e5I.resetIcon,
                handler: 'resetlap'
            };
            N5I.buttons.hide = {
                parentClass: 'mbsc-timer-btn-hide-c',
                text: e5I.hideText,
                icon: e5I.closeIcon,
                handler: 'cancel'
            };
            return {
                wheels: c5I,
                headerText: false,
                readonly: y5I,
                buttons: A5I,
                mode: 'countdown',
                compClass: 'mbsc-timer',
                parseValue: function R0I() {
                    return H5I(m5I ? 0 : l5I);
                },
                formatValue: function L0I(O0I) {
                    var A0I = '',
                        W0I = 0;
                    D(h5I).each(function(c0I, Y0I) {
                        if (Y0I == 'fract') {
                            return;
                        }
                        if (V5I[Y0I]) {
                            A0I += O0I[W0I] + (Y0I == 'seconds' && V5I.fract ? '.' + O0I[W0I + 1] : '') + ' ' + C5I[c0I] + ' ';
                            W0I++;
                        }
                    });
                    return A0I;
                },
                validate: function n0I(s0I) {
                    var U0I = s0I.values,
                        b4I = s0I.index,
                        u0I = 0;
                    if (k5I && b4I !== undefined) {
                        z5I = 0;
                        D(h5I).each(function(t4I, J4I) {
                            if (V5I[J4I]) {
                                z5I += X5I[J4I].limit * U0I[u0I];
                                u0I++;
                            }
                        });
                        z5I /= 1000;
                        Y5I(true);
                    }
                },
                onBeforeShow: function r4I() {
                    e5I.showLabel = true;
                },
                onMarkupReady: function v4I(T4I) {
                    d5I = D(T4I.target);
                    O5I();
                    if (y5I) {
                        D('.mbsc-fr-w', d5I).addClass('mbsc-timer-locked');
                    }
                },
                onPosition: function g4I(I4I) {
                    D('.mbsc-fr-w', I4I.target).css('min-width', 0).css('min-width', D('.mbsc-fr-btn-cont', I4I.target)[0].offsetWidth);
                },
                onDestroy: function Q4I() {
                    clearInterval(W5I);
                }
            };
        };
        var G = J.$;
        var g9 = {
            wheelOrder: 'hhiiss',
            useShortLabels: false,
            min: 0,
            max: Infinity,
            labels: ['Years', 'Months', 'Days', 'Hours', 'Minutes', 'Seconds'],
            labelsShort: ['Yrs', 'Mths', 'Days', 'Hrs', 'Mins', 'Secs']
        };
        J.presetShort('timespan');
        J.presets.scroller.timespan = function(M4I) {
            function E4I(p4I) {
                var o4I = {};
                G(l4I).each(function(F4I, K4I) {
                    o4I[K4I] = a4I[K4I] ? Math.floor(p4I / P4I[K4I].limit) : 0;
                    p4I -= o4I[K4I] * P4I[K4I].limit;
                });
                return o4I;
            }

            function H4I(B4I) {
                var j4I = false,
                    y4I = h4I[a4I[B4I] - 1] || 1,
                    G4I = P4I[B4I],
                    R4I = G4I.label,
                    S4I = G4I.wheel;
                S4I.data = [];
                S4I.label = G4I.label;
                if (d4I.match(new RegExp(G4I.re + G4I.re, 'i'))) {
                    j4I = true;
                }
                if (B4I == f4I) {
                    S4I.min = e4I[B4I];
                    S4I.max = N4I[B4I];
                    S4I.data = function(L4I) {
                        return {
                            value: L4I * y4I,
                            display: w4I(L4I * y4I, j4I, R4I)
                        };
                    };
                    S4I.getIndex = function(W4I) {
                        return Math.round(W4I / y4I);
                    };
                } else {
                    for (D4I = 0; D4I <= G4I.until; D4I += y4I) {
                        S4I.data.push({
                            value: D4I,
                            display: w4I(D4I, j4I, R4I)
                        });
                    }
                }
            }

            function w4I(A4I, O4I, Y4I) {
                return (A4I < 10 && O4I ? '0' : '') + A4I + '<span class="mbsc-ts-lbl">' + Y4I + '</span>';
            }

            function V4I(n4I) {
                var u4I = 0,
                    c4I = 0;
                G.each(x4I, function(s4I, U4I) {
                    if (!isNaN(+n4I[u4I])) {
                        c4I += P4I[U4I.v].limit * n4I[s4I];
                    }
                });
                return c4I;
            }

            function k4I(J7I, b7I) {
                return Math.floor(J7I / b7I) * b7I;
            }
            var D4I, X4I, C4I, e4I, N4I, z4I = G.extend({}, M4I.settings),
                q4I = G.extend(M4I.settings, g9, z4I),
                d4I = q4I.wheelOrder,
                Z4I = q4I.useShortLabels ? q4I.labelsShort : q4I.labels,
                l4I = ['years', 'months', 'days', 'hours', 'minutes', 'seconds'],
                P4I = {
                    'years': {
                        ord: 0,
                        index: 6,
                        until: 10,
                        limit: 1000 * 60 * 60 * 24 * 365,
                        label: Z4I[0],
                        re: 'y',
                        wheel: {}
                    },
                    'months': {
                        ord: 1,
                        index: 5,
                        until: 11,
                        limit: 1000 * 60 * 60 * 24 * 30,
                        label: Z4I[1],
                        re: 'm',
                        wheel: {}
                    },
                    'days': {
                        ord: 2,
                        index: 4,
                        until: 31,
                        limit: 1000 * 60 * 60 * 24,
                        label: Z4I[2],
                        re: 'd',
                        wheel: {}
                    },
                    'hours': {
                        ord: 3,
                        index: 3,
                        until: 23,
                        limit: 1000 * 60 * 60,
                        label: Z4I[3],
                        re: 'h',
                        wheel: {}
                    },
                    'minutes': {
                        ord: 4,
                        index: 2,
                        until: 59,
                        limit: 1000 * 60,
                        label: Z4I[4],
                        re: 'i',
                        wheel: {}
                    },
                    'seconds': {
                        ord: 5,
                        index: 1,
                        until: 59,
                        limit: 1000,
                        label: Z4I[5],
                        re: 's',
                        wheel: {}
                    }
                },
                x4I = [],
                h4I = q4I.steps || [],
                a4I = {},
                f4I = 'seconds',
                i4I = q4I.defaultValue || Math.max(q4I.min, Math.min(0, q4I.max)),
                m4I = [
                    []
                ];
            G(l4I).each(function(r7I, t7I) {
                X4I = d4I.search(new RegExp(P4I[t7I].re, 'i'));
                if (X4I > -1) {
                    x4I.push({
                        o: X4I,
                        v: t7I
                    });
                    if (P4I[t7I].index > P4I[f4I].index) {
                        f4I = t7I;
                    }
                }
            });
            x4I.sort(function(v7I, T7I) {
                return v7I.o > T7I.o ? 1 : -1;
            });
            G.each(x4I, function(I7I, g7I) {
                a4I[g7I.v] = I7I + 1;
                m4I[0].push(P4I[g7I.v].wheel);
            });
            e4I = E4I(q4I.min);
            N4I = E4I(q4I.max);
            G.each(x4I, function(q7I, Q7I) {
                H4I(Q7I.v);
            });
            M4I.getVal = function(P7I, x7I) {
                return x7I ? M4I._getVal(P7I) : M4I._hasValue || P7I ? V4I(M4I.getArrayVal(P7I)) : null;
            };
            return {
                showLabel: true,
                wheels: m4I,
                compClass: 'mbsc-ts',
                parseValue: function Z7I(a7I) {
                    var M7I = [],
                        D7I;
                    if (J.util.isNumeric(a7I) || !a7I) {
                        C4I = E4I(a7I || i4I);
                        G.each(x4I, function(N7I, f7I) {
                            M7I.push(C4I[f7I.v]);
                        });
                    } else {
                        G.each(x4I, function(E7I, e7I) {
                            D7I = new RegExp('(\\d+)\\s?(' + q4I.labels[P4I[e7I.v].ord] + '|' + q4I.labelsShort[P4I[e7I.v].ord] + ')', 'gi').exec(a7I);
                            M7I.push(D7I ? D7I[1] : 0);
                        });
                    }
                    G(M7I).each(function(l7I, d7I) {
                        M7I[l7I] = k4I(d7I, h4I[l7I] || 1);
                    });
                    return M7I;
                },
                formatValue: function X7I(m7I) {
                    var h7I = '';
                    G.each(x4I, function(z7I, i7I) {
                        h7I += +m7I[z7I] ? m7I[z7I] + ' ' + P4I[i7I.v].label + ' ' : '';
                    });
                    return h7I ? h7I.replace(/\s+$/g, '') : 0;
                },
                validate: function w7I(G7I) {
                    var F7I, C7I, V7I, k7I, K7I = G7I.values,
                        S7I = G7I.direction,
                        p7I = [],
                        o7I = true,
                        H7I = true;
                    G(l4I).each(function(y7I, B7I) {
                        if (a4I[B7I] !== undefined) {
                            V7I = a4I[B7I] - 1;
                            p7I[V7I] = [];
                            k7I = {};
                            if (B7I != f4I) {
                                if (o7I) {
                                    for (C7I = N4I[B7I] + 1; C7I <= P4I[B7I].until; C7I++) {
                                        k7I[C7I] = true;
                                    }
                                }
                                if (H7I) {
                                    for (C7I = 0; C7I < e4I[B7I]; C7I++) {
                                        k7I[C7I] = true;
                                    }
                                }
                            }
                            K7I[V7I] = M4I.getValidValue(V7I, K7I[V7I], S7I, k7I);
                            F7I = E4I(V4I(K7I));
                            o7I = o7I && F7I[B7I] == N4I[B7I];
                            H7I = H7I && F7I[B7I] == e4I[B7I];
                            G.each(k7I, function(j7I) {
                                p7I[V7I].push(j7I);
                            });
                        }
                    });
                    return {
                        disabled: p7I
                    };
                }
            };
        };
        J.presets.scroller.treelist = J.presets.scroller.list;
        J.presetShort('list');
        J.presetShort('treelist');
        J.i18n.ca = {
            setText: 'Acceptar',
            cancelText: 'CancelÂ·lar',
            clearText: 'Esborrar',
            selectedText: '{count} seleccionat',
            selectedPluralText: '{count} seleccionats',
            dateFormat: 'dd/mm/yy',
            dayNames: ['Diumenge', 'Dilluns', 'Dimarts', 'Dimecres', 'Dijous', 'Divendres', 'Dissabte'],
            dayNamesShort: ['Dg', 'Dl', 'Dt', 'Dc', 'Dj', 'Dv', 'Ds'],
            dayNamesMin: ['Dg', 'Dl', 'Dt', 'Dc', 'Dj', 'Dv', 'Ds'],
            dayText: 'Dia',
            hourText: 'Hores',
            minuteText: 'Minuts',
            monthNames: ['Gener', 'Febrer', 'Mar&ccedil;', 'Abril', 'Maig', 'Juny', 'Juliol', 'Agost', 'Setembre', 'Octubre', 'Novembre', 'Desembre'],
            monthNamesShort: ['Gen', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Oct', 'Nov', 'Des'],
            monthText: 'Mes',
            secText: 'Segons',
            timeFormat: 'HH:ii',
            yearText: 'Any',
            nowText: 'Ara',
            pmText: 'pm',
            amText: 'am',
            todayText: 'Avui',
            firstDay: 1,
            dateText: 'Data',
            timeText: 'Temps',
            calendarText: 'Calendari',
            closeText: 'Tancar',
            fromText: 'Iniciar',
            toText: 'Final',
            wholeText: 'Sencer',
            fractionText: 'FracciÃ³',
            unitText: 'Unitat',
            labels: ['Anys', 'Mesos', 'Dies', 'Hores', 'Minuts', 'Segons', ''],
            labelsShort: ['Anys', 'Mesos', 'Dies', 'Hrs', 'Mins', 'Secs', ''],
            startText: 'Iniciar',
            stopText: 'Aturar',
            resetText: 'Reiniciar',
            lapText: 'Volta',
            hideText: 'Amagar',
            backText: 'Enrere',
            undoText: 'DesfÃ©s',
            offText: 'No',
            onText: 'Si'
        };
        J.i18n.cs = {
            setText: 'Zadej',
            cancelText: 'Storno',
            clearText: 'Vymazat',
            selectedText: 'OznaÄenÃ½: {count}',
            dateFormat: 'dd.mm.yy',
            dayNames: ['NedÄ›le', 'PondÄ›lÃ­', 'ÃšterÃ½', 'StÅ™eda', 'ÄŒtvrtek', 'PÃ¡tek', 'Sobota'],
            dayNamesShort: ['Ne', 'Po', 'Ãšt', 'St', 'ÄŒt', 'PÃ¡', 'So'],
            dayNamesMin: ['N', 'P', 'Ãš', 'S', 'ÄŒ', 'P', 'S'],
            dayText: 'Den',
            hourText: 'Hodiny',
            minuteText: 'Minuty',
            monthNames: ['Leden', 'Ãšnor', 'BÅ™ezen', 'Duben', 'KvÄ›ten', 'ÄŒerven', 'ÄŒervenec', 'Srpen', 'ZÃ¡Å™Ã­', 'Å˜Ã­jen', 'Listopad', 'Prosinec'],
            monthNamesShort: ['Led', 'Ãšno', 'BÅ™e', 'Dub', 'KvÄ›', 'ÄŒer', 'ÄŒvc', 'Spr', 'ZÃ¡Å™', 'Å˜Ã­j', 'Lis', 'Pro'],
            monthText: 'MÄ›sÃ­c',
            secText: 'Sekundy',
            timeFormat: 'HH:ii',
            yearText: 'Rok',
            nowText: 'TeÄ',
            amText: 'am',
            pmText: 'pm',
            todayText: 'Dnes',
            firstDay: 1,
            dateText: 'Datum',
            timeText: 'ÄŒas',
            calendarText: 'KalendÃ¡Å™',
            closeText: 'ZavÅ™Ã­t',
            fromText: 'ZaÄÃ¡tek',
            toText: 'Konec',
            wholeText: 'CelÃ½',
            fractionText: 'ÄŒÃ¡st',
            unitText: 'Jednotka',
            labels: ['Roky', 'MÄ›sÃ­ce', 'Dny', 'Hodiny', 'Minuty', 'Sekundy', ''],
            labelsShort: ['Rok', 'MÄ›s', 'Dny', 'Hod', 'Min', 'Sec', ''],
            startText: 'Start',
            stopText: 'Stop',
            resetText: 'Resetovat',
            lapText: 'Etapa',
            hideText: 'Schovat',
            backText: 'ZpÄ›t',
            undoText: 'ZpÄ›t',
            offText: 'O',
            onText: 'I',
            decimalSeparator: ',',
            thousandsSeparator: ' '
        };
        J.i18n.da = {
            setText: 'SÃ¦t',
            cancelText: 'Annuller',
            clearText: 'Ryd',
            selectedText: '{count} valgt',
            selectedPluralText: '{count} valgt',
            dateFormat: 'dd/mm/yy',
            dayNames: ['SÃ¸ndag', 'Mandag', 'Tirsdag', 'Onsdag', 'Torsdag', 'Fredag', 'LÃ¸rdag'],
            dayNamesShort: ['SÃ¸n', 'Man', 'Tir', 'Ons', 'Tor', 'Fre', 'LÃ¸r'],
            dayNamesMin: ['S', 'M', 'T', 'O', 'T', 'F', 'L'],
            dayText: 'Dag',
            hourText: 'Timer',
            minuteText: 'Minutter',
            monthNames: ['Januar', 'Februar', 'Marts', 'April', 'Maj', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'December'],
            monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'Maj', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dec'],
            monthText: 'MÃ¥ned',
            secText: 'Sekunder',
            amText: 'am',
            pmText: 'pm',
            timeFormat: 'HH.ii',
            yearText: 'Ã…r',
            nowText: 'Nu',
            todayText: 'I dag',
            firstDay: 1,
            dateText: 'Dato',
            timeText: 'Tid',
            calendarText: 'Kalender',
            closeText: 'Luk',
            fromText: 'Start',
            toText: 'Slut',
            wholeText: 'Hele',
            fractionText: 'Dele',
            unitText: 'Enhed',
            labels: ['Ã…r', 'MÃ¥neder', 'Dage', 'Timer', 'Minutter', 'Sekunder', ''],
            labelsShort: ['Ã…r', 'Mdr', 'Dg', 'Timer', 'Min', 'Sek', ''],
            startText: 'Start',
            stopText: 'Stop',
            resetText: 'Nulstil',
            lapText: 'Omgang',
            hideText: 'Skjul',
            offText: 'Fra',
            onText: 'Til',
            backText: 'Tilbage',
            undoText: 'Fortryd'
        };
        J.i18n['en-GB'] = J.i18n['en-UK'] = {
            dateFormat: 'dd/mm/yy',
            timeFormat: 'HH:ii'
        };
        J.i18n.es = {
            setText: 'Aceptar',
            cancelText: 'Cancelar',
            clearText: 'Borrar',
            selectedText: '{count} seleccionado',
            selectedPluralText: '{count} seleccionados',
            dateFormat: 'dd/mm/yy',
            dayNames: ['Domingo', 'Lunes', 'Martes', 'Mi&#xE9;rcoles', 'Jueves', 'Viernes', 'S&#xE1;bado'],
            dayNamesShort: ['Do', 'Lu', 'Ma', 'Mi', 'Ju', 'Vi', 'S&#xE1;'],
            dayNamesMin: ['D', 'L', 'M', 'M', 'J', 'V', 'S'],
            dayText: 'D&#237;a',
            hourText: 'Horas',
            minuteText: 'Minutos',
            monthNames: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
            monthNamesShort: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],
            monthText: 'Mes',
            secText: 'Segundos',
            timeFormat: 'HH:ii',
            yearText: 'A&ntilde;o',
            nowText: 'Ahora',
            pmText: 'pm',
            amText: 'am',
            todayText: 'Hoy',
            firstDay: 1,
            dateText: 'Fecha',
            timeText: 'Tiempo',
            calendarText: 'Calendario',
            closeText: 'Cerrar',
            fromText: 'Iniciar',
            toText: 'Final',
            wholeText: 'Entero',
            fractionText: 'FracciÃ³n',
            unitText: 'Unidad',
            labels: ['AÃ±os', 'Meses', 'DÃ­as', 'Horas', 'Minutos', 'Segundos', ''],
            labelsShort: ['AÃ±o', 'Mes', 'DÃ­a', 'Hora', 'Min', 'Seg', ''],
            startText: 'Iniciar',
            stopText: 'DetÃ©ngase',
            resetText: 'Reinicializar',
            lapText: 'Lap',
            hideText: 'Esconder',
            backText: 'AtrÃ¡s',
            undoText: 'Deshacer',
            offText: 'No',
            onText: 'SÃ­',
            decimalSeparator: ',',
            thousandsSeparator: ' '
        };
        var H = {
            gDaysInMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
            jDaysInMonth: [31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29]
        };
        H.jalaliToGregorian = function(u7I, c7I, n7I) {
            u7I = parseInt(u7I);
            c7I = parseInt(c7I);
            n7I = parseInt(n7I);
            var L7I;
            var O7I = u7I - 979;
            var U7I = c7I - 1;
            var s7I = n7I - 1;
            var Y7I = 365 * O7I + parseInt(O7I / 33) * 8 + parseInt((O7I % 33 + 3) / 4);
            for (L7I = 0; L7I < U7I; ++L7I) {
                Y7I += H.jDaysInMonth[L7I];
            }
            Y7I += s7I;
            var R7I = Y7I + 79;
            var W7I = 1600 + 400 * parseInt(R7I / 146097);
            R7I = R7I % 146097;
            var A7I = true;
            if (R7I >= 36525) {
                R7I--;
                W7I += 100 * parseInt(R7I / 36524);
                R7I = R7I % 36524;
                if (R7I >= 365) {
                    R7I++;
                } else {
                    A7I = false;
                }
            }
            W7I += 4 * parseInt(R7I / 1461);
            R7I %= 1461;
            if (R7I >= 366) {
                A7I = false;
                R7I--;
                W7I += parseInt(R7I / 365);
                R7I = R7I % 365;
            }
            for (L7I = 0; R7I >= H.gDaysInMonth[L7I] + (L7I == 1 && A7I); L7I++) {
                R7I -= H.gDaysInMonth[L7I] + (L7I == 1 && A7I);
            }
            var J6n = L7I + 1;
            var b6n = R7I + 1;
            return [W7I, J6n, b6n];
        };
        H.checkDate = function(r6n, t6n, v6n) {
            return !(r6n < 0 || r6n > 32767 || t6n < 1 || t6n > 12 || v6n < 1 || v6n > H.jDaysInMonth[t6n - 1] + (t6n == 12 && (r6n - 979) % 33 % 4 === 0));
        };
        H.gregorianToJalali = function(Z6n, q6n, P6n) {
            Z6n = parseInt(Z6n);
            q6n = parseInt(q6n);
            P6n = parseInt(P6n);
            var g6n;
            var I6n = Z6n - 1600;
            var x6n = q6n - 1;
            var a6n = P6n - 1;
            var Q6n = 365 * I6n + parseInt((I6n + 3) / 4) - parseInt((I6n + 99) / 100) + parseInt((I6n + 399) / 400);
            for (g6n = 0; g6n < x6n; ++g6n) {
                Q6n += H.gDaysInMonth[g6n];
            }
            if (x6n > 1 && (I6n % 4 === 0 && I6n % 100 !== 0 || I6n % 400 === 0)) {
                ++Q6n;
            }
            Q6n += a6n;
            var T6n = Q6n - 79;
            var D6n = parseInt(T6n / 12053);
            T6n %= 12053;
            var M6n = 979 + 33 * D6n + 4 * parseInt(T6n / 1461);
            T6n %= 1461;
            if (T6n >= 366) {
                M6n += parseInt((T6n - 1) / 365);
                T6n = (T6n - 1) % 365;
            }
            for (g6n = 0; g6n < 11 && T6n >= H.jDaysInMonth[g6n]; ++g6n) {
                T6n -= H.jDaysInMonth[g6n];
            }
            var N6n = g6n + 1;
            var f6n = T6n + 1;
            return [M6n, N6n, f6n];
        };
        J.i18n.fa = {
            setText: 'ØªØ§ÙŠÙŠØ¯',
            cancelText: 'Ø§Ù†ØµØ±Ø§Ù',
            clearText: 'ÙˆØ§Ø¶Ø­ ',
            selectedText: '{count} Ù…Ù†ØªØ®Ø¨',
            dateFormat: 'yy/mm/dd',
            dayNames: ['ÙŠÚ©Ø´Ù†Ø¨Ù‡', 'Ø¯ÙˆØ´Ù†Ø¨Ù‡', 'Ø³Ù‡â€ŒØ´Ù†Ø¨Ù‡', 'Ú†Ù‡Ø§Ø±Ø´Ù†Ø¨Ù‡', 'Ù¾Ù†Ø¬â€ŒØ´Ù†Ø¨Ù‡', 'Ø¬Ù…Ø¹Ù‡', 'Ø´Ù†Ø¨Ù‡'],
            dayNamesShort: ['ÛŒ', 'Ø¯', 'Ø³', 'Ú†', 'Ù¾', 'Ø¬', 'Ø´'],
            dayNamesMin: ['ÛŒ', 'Ø¯', 'Ø³', 'Ú†', 'Ù¾', 'Ø¬', 'Ø´'],
            dayText: 'Ø±ÙˆØ²',
            hourText: 'Ø³Ø§Ø¹Øª',
            minuteText: 'Ø¯Ù‚ÙŠÙ‚Ù‡',
            monthNames: ['ÙØ±ÙˆØ±Ø¯ÙŠÙ†', 'Ø§Ø±Ø¯ÙŠØ¨Ù‡Ø´Øª', 'Ø®Ø±Ø¯Ø§Ø¯', 'ØªÙŠØ±', 'Ù…Ø±Ø¯Ø§Ø¯', 'Ø´Ù‡Ø±ÙŠÙˆØ±', 'Ù…Ù‡Ø±', 'Ø¢Ø¨Ø§Ù†', 'Ø¢Ø°Ø±', 'Ø¯ÛŒ', 'Ø¨Ù‡Ù…Ù†', 'Ø§Ø³ÙÙ†Ø¯'],
            monthNamesShort: ['ÙØ±ÙˆØ±Ø¯ÙŠÙ†', 'Ø§Ø±Ø¯ÙŠØ¨Ù‡Ø´Øª', 'Ø®Ø±Ø¯Ø§Ø¯', 'ØªÙŠØ±', 'Ù…Ø±Ø¯Ø§Ø¯', 'Ø´Ù‡Ø±ÙŠÙˆØ±', 'Ù…Ù‡Ø±', 'Ø¢Ø¨Ø§Ù†', 'Ø¢Ø°Ø±', 'Ø¯ÛŒ', 'Ø¨Ù‡Ù…Ù†', 'Ø§Ø³ÙÙ†Ø¯'],
            monthText: 'Ù…Ø§Ù‡',
            secText: 'Ø«Ø§Ù†ÙŠÙ‡',
            timeFormat: 'HH:ii',
            timeWheels: 'iiHH',
            yearText: 'Ø³Ø§Ù„',
            nowText: 'Ø§Ú©Ù†ÙˆÙ†',
            amText: 'Ø¨',
            pmText: 'Øµ',
            todayText: 'Ø§Ù…Ø±ÙˆØ²',
            getYear: function e6n(E6n) {
                return H.gregorianToJalali(E6n.getFullYear(), E6n.getMonth() + 1, E6n.getDate())[0];
            },
            getMonth: function l6n(d6n) {
                return --H.gregorianToJalali(d6n.getFullYear(), d6n.getMonth() + 1, d6n.getDate())[1];
            },
            getDay: function X6n(h6n) {
                return H.gregorianToJalali(h6n.getFullYear(), h6n.getMonth() + 1, h6n.getDate())[2];
            },
            getDate: function m6n(w6n, z6n, C6n, V6n, k6n, H6n, o6n) {
                if (z6n < 0) {
                    w6n += Math.floor(z6n / 12);
                    z6n = 12 + z6n % 12;
                }
                if (z6n > 11) {
                    w6n += Math.floor(z6n / 12);
                    z6n = z6n % 12;
                }
                var i6n = H.jalaliToGregorian(w6n, +z6n + 1, C6n);
                return new Date(i6n[0], i6n[1] - 1, i6n[2], V6n || 0, k6n || 0, H6n || 0, o6n || 0);
            },
            getMaxDayOfMonth: function p6n(F6n, S6n) {
                var K6n = 31;
                while (H.checkDate(F6n, S6n + 1, K6n) === false) {
                    K6n--;
                }
                return K6n;
            },
            firstDay: 6,
            rtl: true,
            dateText: 'ØªØ§Ø±ÛŒØ® ',
            timeText: 'Ø²Ù…Ø§Ù† ',
            calendarText: 'ØªÙ‚ÙˆÛŒÙ…',
            closeText: 'Ù†Ø²Ø¯ÛŒÚ©',
            fromText: 'Ø´Ø±ÙˆØ¹ ',
            toText: 'Ù¾Ø§ÛŒØ§Ù†',
            wholeText: 'ØªÙ…Ø§Ù…',
            fractionText: 'Ú©Ø³Ø±',
            unitText: 'ÙˆØ§Ø­Ø¯',
            labels: ['Ø³Ø§Ù„', 'Ù…Ø§Ù‡', 'Ø±ÙˆØ²', 'Ø³Ø§Ø¹Øª', 'Ø¯Ù‚ÛŒÙ‚Ù‡', 'Ø«Ø§Ù†ÛŒÙ‡', ''],
            labelsShort: ['Ø³Ø§Ù„', 'Ù…Ø§Ù‡', 'Ø±ÙˆØ²', 'Ø³Ø§Ø¹Øª', 'Ø¯Ù‚ÛŒÙ‚Ù‡', 'Ø«Ø§Ù†ÛŒÙ‡', ''],
            startText: 'Ø´Ø±ÙˆØ¹',
            stopText: 'Ù¾Ø§ÙŠØ§Ù†',
            resetText: 'ØªÙ†Ø¸ÛŒÙ… Ù…Ø¬Ø¯Ø¯',
            lapText: 'Lap',
            hideText: 'Ù¾Ù†Ù‡Ø§Ù† Ú©Ø±Ø¯Ù†',
            backText: 'Ù¾Ø´Øª',
            undoText: 'ÙˆØ§Ú†ÛŒØ¯Ù†'
        };
        J.i18n.vn = {
            setText: 'OK',
            cancelText: 'Annulla',
            clearText: 'Chiarire',
            selectedText: '{count} selezionato',
            selectedPluralText: '{count} selezionati',
            dateFormat: 'dd/mm/yy',
            dayNames: ['Domenica', 'LunedÃ¬', 'MertedÃ¬', 'MercoledÃ¬', 'GiovedÃ¬', 'VenerdÃ¬', 'Sabato'],
            dayNamesShort: ['Do', 'Lu', 'Ma', 'Me', 'Gi', 'Ve', 'Sa'],
            dayNamesMin: ['D', 'L', 'M', 'M', 'G', 'V', 'S'],
            dayText: 'Giorno',
            hourText: 'Ore',
            minuteText: 'Minuti',
            monthNames: ['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'],
            monthNamesShort: ['Gen', 'Feb', 'Mar', 'Apr', 'Mag', 'Giu', 'Lug', 'Ago', 'Set', 'Ott', 'Nov', 'Dic'],
            monthText: 'Mese',
            secText: 'Secondi',
            timeFormat: 'HH:ii',
            yearText: 'Anno',
            nowText: 'Ora',
            pmText: 'pm',
            amText: 'am',
            todayText: 'Oggi',
            getYear: function e6n(E6n) { 
                if (this.isLunar) {

                    var lunar1 = convertSolar2Lunar(E6n.getDate(), E6n.getMonth() + 1, E6n.getFullYear(),7);
                    // console.log("getYear ---------");
                    // console.log(E6n);
                    // console.log(lunar1);
                    // console.log("end getYear -------");
                    // log('14841 - get lunar date');
                    // this.leap = lunar1[3];
                    // this.leap = lunar1[3];
                    return lunar1[2];

                }                
            },
            getMonth: function l6n(d6n) {
                if (this.isLunar) {

                    var lunar1 = convertSolar2Lunar(d6n.getDate(), d6n.getMonth() + 1, d6n.getFullYear(),7);
                    // this.leap = lunar1[3];
                    // console.log("getMonth ---------");
                    // console.log(d6n);
                    // console.log(lunar1);
                    // console.log("end getMonth -------");                      
                    return lunar1[1] - 1;
                }                   
            },
            getDay: function X6n(h6n) {
                if (this.isLunar) {
                    var lunar1 = convertSolar2Lunar(h6n.getDate(), h6n.getMonth() + 1, h6n.getFullYear(),7);
                    // this.leap = lunar1[3];
                    // console.log("getDay ---------");
                    // console.log(h6n);
                    // console.log(lunar1);
                    // console.log("end getDay -------");                      
                    return lunar1[0]
                }                   
            },
            getDate: function m6n(w6n, z6n, C6n, V6n, k6n, H6n, o6n) {
                var leaf = eventLeafGlobal;
                if(!is_LeapMonth(C6n,(z6n + 1),w6n,7)){
                    leaf = false;
                }
                var solar = convertLunar2Solar(C6n,z6n + 1,w6n,leaf | 0,7);
                var date = new Date(solar[2], (solar[1] - 1), solar[0]);
                    // console.log("getDate ---------");
                    // console.log(C6n + " -- " + (z6n + 1)  +" -- " + w6n +" -- " + this.leap +" -- " + V6n +k6n +H6n+o6n);
                    // console.log(solar);
                    // console.log(date);
                    // console.log("end getDate -------");
                    // console.log(this);               
                return date; 
            },
            getMaxDayOfMonth: function p6n(F6n, S6n) {
                if (this.isLunar) {
                    var leaf = eventLeafGlobal;
                    if(!is_LeapMonth(27,(S6n + 1),F6n,7)){
                        leaf = false;
                    }                    
                    var solar = convertLunar2Solar(27,S6n + 1,F6n,leaf,7);
                    return getMaxDayOfMonth(solar[0],solar[1] - 1,solar[2]);
                }
            },
            firstDay: 1,
            dateText: 'Data',
            timeText: 'Volta',
            calendarText: 'Calendario',
            closeText: 'Chiudere',
            fromText: 'Inizio',
            toText: 'Fine',
            wholeText: 'Intero',
            fractionText: 'Frazione',
            unitText: 'UnitÃ ',
            labels: ['Anni', 'Mesi', 'Giorni', 'Ore', 'Minuti', 'Secondi', ''],
            labelsShort: ['Anni', 'Mesi', 'Gio', 'Ore', 'Min', 'Sec', ''],
            startText: 'Inizio',
            stopText: 'Arresto',
            resetText: 'Ripristina',
            lapText: 'Lap',
            hideText: 'Nascondi',
            backText: 'Indietro',
            undoText: 'Annulla',
            offText: 'Via',
            onText: 'Su',
            decimalSeparator: ',',
            thousandsSeparator: ' '
        };        
        J.i18n.fr = {
            setText: 'Terminer',
            cancelText: 'Annuler',
            clearText: 'Effacer',
            selectedText: '{count} sÃ©lectionnÃ©',
            selectedPluralText: '{count} sÃ©lectionnÃ©s',
            dateFormat: 'dd/mm/yy',
            dayNames: ['&#68;imanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi'],
            dayNamesShort: ['&#68;im.', 'Lun.', 'Mar.', 'Mer.', 'Jeu.', 'Ven.', 'Sam.'],
            dayNamesMin: ['&#68;', 'L', 'M', 'M', 'J', 'V', 'S'],
            dayText: 'Jour',
            monthText: 'Mois',
            monthNames: ['Janvier', 'FÃ©vrier', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'AoÃ»t', 'Septembre', 'Octobre', 'Novembre', 'DÃ©cembre'],
            monthNamesShort: ['Janv.', 'FÃ©vr.', 'Mars', 'Avril', 'Mai', 'Juin', 'Juil.', 'AoÃ»t', 'Sept.', 'Oct.', 'Nov.', 'DÃ©c.'],
            hourText: 'Heures',
            minuteText: 'Minutes',
            secText: 'Secondes',
            timeFormat: 'HH:ii',
            yearText: 'AnnÃ©e',
            nowText: 'Maintenant',
            pmText: 'pm',
            amText: 'am',
            todayText: "Aujourd'hui",
            firstDay: 1,
            dateText: 'Date',
            timeText: 'Heure',
            calendarText: 'Calendrier',
            closeText: 'Fermer',
            fromText: 'DÃ©marrer',
            toText: 'Fin',
            wholeText: 'Entier',
            fractionText: 'Fraction',
            unitText: 'UnitÃ©',
            labels: ['Ans', 'Mois', 'Jours', 'Heures', 'Minutes', 'Secondes', ''],
            labelsShort: ['Ans', 'Mois', 'Jours', 'Hrs', 'Min', 'Sec', ''],
            startText: 'DÃ©marrer',
            stopText: 'ArrÃªter',
            resetText: 'RÃ©initialiser',
            lapText: 'Lap',
            hideText: 'Cachez',
            backText: 'Retour',
            undoText: 'Annuler',
            offText: 'Non',
            onText: 'Oui',
            decimalSeparator: ',',
            thousandsSeparator: ' '
        };
        J.i18n.he = {
            rtl: true,
            setText: '×©×ž×™×¨×”',
            cancelText: '×‘×™×˜×•×œ',
            clearText: '× ×§×”',
            selectedText: '{count} × ×‘×—×¨',
            selectedPluralText: '{count} × ×‘×—×¨×•',
            dateFormat: 'dd/mm/yy',
            dayNames: ['×¨××©×•×Ÿ', '×©× ×™', '×©×œ×™×©×™', '×¨×‘×™×¢×™', '×—×ž×™×©×™', '×©×™×©×™', '×©×‘×ª'],
            dayNamesShort: ["×'", "×‘'", "×’'", "×“'", "×”'", "×•'", "×©'"],
            dayNamesMin: ['×', '×‘', '×’', '×“', '×”', '×•', '×©'],
            dayText: '×™×•×',
            hourText: '×©×¢×•×ª',
            minuteText: '×“×§×•×ª',
            monthNames: ['×™× ×•××¨', '×¤×‘×¨×•××¨', '×ž×¨×¥', '××¤×¨×™×œ', '×ž××™', '×™×•× ×™', '×™×•×œ×™', '××•×’×•×¡×˜', '×¡×¤×˜×ž×‘×¨', '××•×§×˜×•×‘×¨', '× ×•×‘×ž×‘×¨', '×“×¦×ž×‘×¨'],
            monthNamesShort: ["×™× ×•", "×¤×‘×¨", "×ž×¨×¥", "××¤×¨", "×ž××™", "×™×•× ", "×™×•×œ", "××•×’", "×¡×¤×˜", "××•×§", "× ×•×‘", "×“×¦×ž"],
            monthText: '×—×•×“×©',
            secText: '×©× ×™×•×ª',
            amText: 'am',
            pmText: 'pm',
            timeFormat: 'HH:ii',
            timeWheels: 'iiHH',
            yearText: '×©× ×”',
            nowText: '×¢×›×©×™×•',
            firstDay: 0,
            dateText: '×ª××¨×™×š',
            timeText: '×–×ž×Ÿ',
            calendarText: '×ª××¨×™×›×•×Ÿ',
            closeText: '×¡×’×™×¨×”',
            todayText: '×”×™×•×',
            eventText: '×žÖ´×§×¨Ö¶×”',
            eventsText: '×žÖ´×§×¨Ö¶×”',
            fromText: '×”×ª×—×œ×”',
            toText: '×¡×™×•×',
            wholeText: '×›Ö¹Ö¼×œ',
            fractionText: '×©×‘×¨×™×¨',
            unitText: '×™×—×™×“×”',
            labels: ['×©× ×™×', '×—×•×“×©×™×', '×™×ž×™×', '×©×¢×•×ª', '×“×§×•×ª', '×©× ×™×™×', ''],
            labelsShort: ['×©× ×™×', '×—×•×“×©×™×', '×™×ž×™×', '×©×¢×•×ª', '×“×§×•×ª', '×©× ×™×™×', ''],
            startText: '×”×ª×—×œ',
            stopText: '×¢×¦×•×¨',
            resetText: '××ª×—×•×œ',
            lapText: '×”×§×¤×”',
            hideText: '×”×¡×ª×¨',
            offText: '×›×™×‘×•×™',
            onText: '×”×¤×¢×œ×”',
            backText: '×—×–×•×¨',
            undoText: '×‘×™×˜×•×œ ×¤×¢×•×œ×”'
        };
        J.i18n.hu = {
            setText: 'OK',
            cancelText: 'MÃ©gse',
            clearText: 'TÃ¶rlÃ©s',
            selectedText: '{count} kivÃ¡lasztva',
            dateFormat: 'yy.mm.dd.',
            dayNames: ['VasÃ¡rnap', 'HÃ©tfÅ‘', 'Kedd', 'Szerda', 'CsÃ¼tÃ¶rtÃ¶k', 'PÃ©ntek', 'Szombat'],
            dayNamesShort: ['Va', 'HÃ©', 'Ke', 'Sze', 'CsÃ¼', 'PÃ©', 'Szo'],
            dayNamesMin: ['V', 'H', 'K', 'Sz', 'Cs', 'P', 'Sz'],
            dayText: 'Nap',
            delimiter: '.',
            hourText: 'Ã“ra',
            minuteText: 'Perc',
            monthNames: ['JanuÃ¡r', 'FebruÃ¡r', 'MÃ¡rcius', 'Ãprilis', 'MÃ¡jus', 'JÃºnius', 'JÃºlius', 'Augusztus', 'Szeptember', 'OktÃ³ber', 'November', 'December'],
            monthNamesShort: ['Jan', 'Feb', 'MÃ¡r', 'Ãpr', 'MÃ¡j', 'JÃºn', 'JÃºl', 'Aug', 'Szep', 'Okt', 'Nov', 'Dec'],
            monthText: 'HÃ³nap',
            secText: 'MÃ¡sodperc',
            timeFormat: 'H:ii',
            yearText: 'Ã‰v',
            nowText: 'Most',
            pmText: 'pm',
            amText: 'am',
            firstDay: 1,
            dateText: 'DÃ¡tum',
            timeText: 'IdÅ‘',
            calendarText: 'NaptÃ¡r',
            todayText: 'Ma',
            prevMonthText: 'ElÅ‘zÅ‘ hÃ³nap',
            nextMonthText: 'KÃ¶vetkezÅ‘ hÃ³nap',
            prevYearText: 'ElÅ‘zÅ‘ Ã©v',
            nextYearText: 'KÃ¶vetkezÅ‘ Ã©v',
            closeText: 'BezÃ¡r',
            eventText: 'esemÃ©ny',
            eventsText: 'esemÃ©ny',
            fromText: 'Eleje',
            toText: 'VÃ©ge',
            wholeText: 'EgÃ©sz',
            fractionText: 'TÃ¶rt',
            unitText: 'EgysÃ©g',
            labels: ['Ã‰v', 'HÃ³nap', 'Nap', 'Ã“ra', 'Perc', 'MÃ¡sodperc', ''],
            labelsShort: ['Ã‰v', 'HÃ³.', 'Nap', 'Ã“ra', 'Perc', 'Mp.', ''],
            startText: 'IndÃ­t',
            stopText: 'MegÃ¡llÃ­t',
            resetText: 'VisszaÃ¡llÃ­t',
            lapText: 'Lap',
            hideText: 'Elrejt',
            backText: 'Vissza',
            undoText: 'Visszavon',
            offText: 'Ki',
            onText: 'Be',
            decimalSeparator: ',',
            thousandsSeparator: ' '
        };
        J.i18n.it = {
            setText: 'OK',
            cancelText: 'Annulla',
            clearText: 'Chiarire',
            selectedText: '{count} selezionato',
            selectedPluralText: '{count} selezionati',
            dateFormat: 'dd/mm/yy',
            dayNames: ['Domenica', 'LunedÃ¬', 'MertedÃ¬', 'MercoledÃ¬', 'GiovedÃ¬', 'VenerdÃ¬', 'Sabato'],
            dayNamesShort: ['Do', 'Lu', 'Ma', 'Me', 'Gi', 'Ve', 'Sa'],
            dayNamesMin: ['D', 'L', 'M', 'M', 'G', 'V', 'S'],
            dayText: 'Giorno',
            hourText: 'Ore',
            minuteText: 'Minuti',
            monthNames: ['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'],
            monthNamesShort: ['Gen', 'Feb', 'Mar', 'Apr', 'Mag', 'Giu', 'Lug', 'Ago', 'Set', 'Ott', 'Nov', 'Dic'],
            monthText: 'Mese',
            secText: 'Secondi',
            timeFormat: 'HH:ii',
            yearText: 'Anno',
            nowText: 'Ora',
            pmText: 'pm',
            amText: 'am',
            todayText: 'Oggi',
            firstDay: 1,
            dateText: 'Data',
            timeText: 'Volta',
            calendarText: 'Calendario',
            closeText: 'Chiudere',
            fromText: 'Inizio',
            toText: 'Fine',
            wholeText: 'Intero',
            fractionText: 'Frazione',
            unitText: 'UnitÃ ',
            labels: ['Anni', 'Mesi', 'Giorni', 'Ore', 'Minuti', 'Secondi', ''],
            labelsShort: ['Anni', 'Mesi', 'Gio', 'Ore', 'Min', 'Sec', ''],
            startText: 'Inizio',
            stopText: 'Arresto',
            resetText: 'Ripristina',
            lapText: 'Lap',
            hideText: 'Nascondi',
            backText: 'Indietro',
            undoText: 'Annulla',
            offText: 'Via',
            onText: 'Su',
            decimalSeparator: ',',
            thousandsSeparator: ' '
        };
        J.i18n.ja = {
            setText: 'ã‚»ãƒƒãƒˆ',
            cancelText: 'ã‚­ãƒ£ãƒ³ã‚»ãƒ«',
            clearText: 'ã‚¯ãƒªã‚¢',
            selectedText: '{count} é¸æŠž',
            dateFormat: 'yyå¹´mmæœˆddæ—¥',
            dayNames: ['æ—¥', 'æœˆ', 'ç«', 'æ°´', 'æœ¨', 'é‡‘', 'åœŸ'],
            dayNamesShort: ['æ—¥', 'æœˆ', 'ç«', 'æ°´', 'æœ¨', 'é‡‘', 'åœŸ'],
            dayNamesMin: ['æ—¥', 'æœˆ', 'ç«', 'æ°´', 'æœ¨', 'é‡‘', 'åœŸ'],
            dayText: 'æ—¥',
            hourText: 'æ™‚',
            minuteText: 'åˆ†',
            monthNames: ['1æœˆ', '2æœˆ', '3æœˆ', '4æœˆ', '5æœˆ', '6æœˆ', '7æœˆ', '8æœˆ', '9æœˆ', '10æœˆ', '11æœˆ', '12æœˆ'],
            monthNamesShort: ['1æœˆ', '2æœˆ', '3æœˆ', '4æœˆ', '5æœˆ', '6æœˆ', '7æœˆ', '8æœˆ', '9æœˆ', '10æœˆ', '11æœˆ', '12æœˆ'],
            monthText: 'æœˆ',
            secText: 'ç§’',
            timeFormat: 'HH:ii',
            yearText: 'å¹´',
            nowText: 'ä»Š',
            pmText: 'åˆå¾Œ',
            amText: 'åˆå‰',
            yearSuffix: 'å¹´',
            monthSuffix: 'æœˆ',
            daySuffix: 'æ—¥',
            todayText: 'ä»Šæ—¥',
            dateText: 'æ—¥ä»˜',
            timeText: 'æ™‚é–“',
            calendarText: 'ã‚«ãƒ¬ãƒ³ãƒ€ãƒ¼',
            closeText: 'ã‚¯ãƒ­ãƒ¼ã‚º',
            fromText: 'é–‹å§‹',
            toText: 'çµ‚ã‚ã‚Š',
            wholeText: 'å…¨æ•°',
            fractionText: 'åˆ†æ•°',
            unitText: 'å˜ä½',
            labels: ['å¹´é–“', 'æœˆé–“', 'æ—¥é–“', 'æ™‚é–“', 'åˆ†', 'ç§’', ''],
            labelsShort: ['å¹´é–“', 'æœˆé–“', 'æ—¥é–“', 'æ™‚é–“', 'åˆ†', 'ç§’', ''],
            startText: 'é–‹å§‹',
            stopText: 'åœæ­¢',
            resetText: 'ãƒªã‚»ãƒƒãƒˆ',
            lapText: 'ãƒ©ãƒƒãƒ—',
            hideText: 'éš ã™',
            backText: 'ãƒãƒƒã‚¯',
            undoText: 'ã‚¢ãƒ³ãƒ‰ã‚¥'
        };
        J.i18n.lt = {
            setText: 'OK',
            cancelText: 'AtÅ¡aukti',
            clearText: 'IÅ¡valyti',
            selectedText: 'Pasirinktas {count}',
            selectedPluralText: 'Pasirinkti {count}',
            dateFormat: 'yy-mm-dd',
            dayNames: ['Sekmadienis', 'Pirmadienis', 'Antradienis', 'TreÄiadienis', 'Ketvirtadienis', 'Penktadienis', 'Å eÅ¡tadienis'],
            dayNamesShort: ['S', 'Pr', 'A', 'T', 'K', 'Pn', 'Å '],
            dayNamesMin: ['S', 'Pr', 'A', 'T', 'K', 'Pn', 'Å '],
            dayText: 'Diena',
            hourText: 'Valanda',
            minuteText: 'Minutes',
            monthNames: ['Sausis', 'Vasaris', 'Kovas', 'Balandis', 'GeguÅ¾Ä—', 'BirÅ¾elis', 'Liepa', 'RugpjÅ«tis', 'RugsÄ—jis', 'Spalis', 'Lapkritis', 'Gruodis'],
            monthNamesShort: ['Sau', 'Vas', 'Kov', 'Bal', 'Geg', 'Bir', 'Lie', 'Rugp', 'Rugs', 'Spa', 'Lap', 'Gruo'],
            monthText: 'MÄ—nuo',
            secText: 'Sekundes',
            amText: 'am',
            pmText: 'pm',
            timeFormat: 'HH:ii',
            yearText: 'Metai',
            nowText: 'Dabar',
            todayText: 'Å iandien',
            firstDay: 1,
            dateText: 'Data',
            timeText: 'Laikas',
            calendarText: 'Kalendorius',
            closeText: 'UÅ¾daryti',
            fromText: 'Nuo',
            toText: 'Iki',
            wholeText: 'Visas',
            fractionText: 'Frakcija',
            unitText: 'Vienetas',
            labels: ['Metai', 'MÄ—nesiai', 'Dienos', 'Valandos', 'Minutes', 'Sekundes', ''],
            labelsShort: ['m', 'mÄ—n.', 'd', 'h', 'min', 's', ''],
            startText: 'PradÄ—ti',
            stopText: 'Sustabdyti',
            resetText: 'IÅ¡naujo',
            lapText: 'Ratas',
            hideText: 'SlÄ—pti',
            backText: 'Atgal',
            undoText: 'Anuliuoti',
            offText: 'IÅ¡j.',
            onText: 'Ä®j.',
            decimalSeparator: ',',
            thousandsSeparator: ' '
        };
        J.i18n.nl = {
            setText: 'Instellen',
            cancelText: 'Annuleren',
            clearText: 'Duidelijk',
            selectedText: '{count} gekozen',
            dateFormat: 'dd-mm-yy',
            dayNames: ['zondag', 'maandag', 'Dinsdag', 'Woensdag', 'Donderdag', 'Vrijdag', 'Zaterdag'],
            dayNamesShort: ['zo', 'ma', 'di', 'wo', 'do', 'vr', 'za'],
            dayNamesMin: ['z', 'm', 'd', 'w', 'd', 'v', 'z'],
            dayText: 'Dag',
            hourText: 'Uur',
            minuteText: 'Minuten',
            monthNames: ['januari', 'februari', 'maart', 'april', 'mei', 'juni', 'juli', 'augustus', 'september', 'oktober', 'november', 'december'],
            monthNamesShort: ['jan', 'feb', 'mrt', 'apr', 'mei', 'jun', 'jul', 'aug', 'sep', 'okt', 'nov', 'dec'],
            monthText: 'Maand',
            secText: 'Seconden',
            timeFormat: 'HH:ii',
            yearText: 'Jaar',
            nowText: 'Nu',
            pmText: 'pm',
            amText: 'am',
            todayText: 'Vandaag',
            firstDay: 1,
            dateText: 'Datum',
            timeText: 'Tijd',
            calendarText: 'Kalender',
            closeText: 'Sluiten',
            fromText: 'Start',
            toText: 'Einde',
            wholeText: 'geheel',
            fractionText: 'fractie',
            unitText: 'eenheid',
            labels: ['Jaren', 'Maanden', 'Dagen', 'Uren', 'Minuten', 'Seconden', ''],
            labelsShort: ['j', 'm', 'd', 'u', 'min', 'sec', ''],
            startText: 'Start',
            stopText: 'Stop',
            resetText: 'Reset',
            lapText: 'Ronde',
            hideText: 'Verbergen',
            backText: 'Terug',
            undoText: 'Onged. maken',
            offText: 'Uit',
            onText: 'Aan',
            decimalSeparator: ',',
            thousandsSeparator: ' '
        };
        J.i18n.no = {
            setText: 'OK',
            cancelText: 'Avbryt',
            clearText: 'TÃ¸mme',
            selectedText: '{count} valgt',
            dateFormat: 'dd.mm.yy',
            dayNames: ['SÃ¸ndag', 'Mandag', 'Tirsdag', 'Onsdag', 'Torsdag', 'Fredag', 'LÃ¸rdag'],
            dayNamesShort: ['SÃ¸', 'Ma', 'Ti', 'On', 'To', 'Fr', 'LÃ¸'],
            dayNamesMin: ['S', 'M', 'T', 'O', 'T', 'F', 'L'],
            dayText: 'Dag',
            delimiter: '.',
            hourText: 'Time',
            minuteText: 'Minutt',
            monthNames: ['Januar', 'Februar', 'Mars', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Desember'],
            monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Des'],
            monthText: 'MÃ¥ned',
            secText: 'Sekund',
            timeFormat: 'HH:ii',
            yearText: 'Ã…r',
            nowText: 'NÃ¥',
            pmText: 'pm',
            amText: 'am',
            todayText: 'I dag',
            firstDay: 1,
            dateText: 'Dato',
            timeText: 'Tid',
            calendarText: 'Kalender',
            closeText: 'Lukk',
            fromText: 'Start',
            toText: 'End',
            wholeText: 'Hele',
            fractionText: 'Fraksjon',
            unitText: 'Enhet',
            labels: ['Ã…r', 'MÃ¥neder', 'Dager', 'Timer', 'Minutter', 'Sekunder', ''],
            labelsShort: ['Ã…r', 'MÃ¥n', 'Dag', 'Time', 'Min', 'Sek', ''],
            startText: 'Start',
            stopText: 'Stopp',
            resetText: 'Tilbakestille',
            lapText: 'Runde',
            hideText: 'Skjul',
            backText: 'Tilbake',
            undoText: 'Angre',
            offText: 'Av',
            onText: 'PÃ¥',
            decimalSeparator: ',',
            thousandsSeparator: ' '
        };
        J.i18n.pl = {
            setText: 'Zestaw',
            cancelText: 'Anuluj',
            clearText: 'OczyÅ›ciÄ‡',
            selectedText: 'WybÃ³r: {count}',
            dateFormat: 'yy-mm-dd',
            dayNames: ['Niedziela', 'PoniedziaÅ‚ek', 'Wtorek', 'Åšroda', 'Czwartek', 'PiÄ…tek', 'Sobota'],
            dayNamesShort: ['Niedz.', 'Pon.', 'Wt.', 'Åšr.', 'Czw.', 'Pt.', 'Sob.'],
            dayNamesMin: ['N', 'P', 'W', 'Åš', 'C', 'P', 'S'],
            dayText: 'DzieÅ„',
            hourText: 'Godziny',
            minuteText: 'Minuty',
            monthNames: ['StyczeÅ„', 'Luty', 'Marzec', 'KwiecieÅ„', 'Maj', 'Czerwiec', 'Lipiec', 'SierpieÅ„', 'WrzesieÅ„', 'PaÅºdziernik', 'Listopad', 'GrudzieÅ„'],
            monthNamesShort: ['Sty', 'Lut', 'Mar', 'Kwi', 'Maj', 'Cze', 'Lip', 'Sie', 'Wrz', 'PaÅº', 'Lis', 'Gru'],
            monthText: 'MiesiÄ…c',
            secText: 'Sekundy',
            timeFormat: 'HH:ii',
            yearText: 'Rok',
            nowText: 'Teraz',
            amText: 'am',
            pmText: 'pm',
            todayText: 'Dzisiaj',
            firstDay: 1,
            dateText: 'Data',
            timeText: 'Czas',
            calendarText: 'Kalendarz',
            closeText: 'ZakoÅ„czenie',
            fromText: 'RozpoczÄ™cie',
            toText: 'Koniec',
            wholeText: 'CaÅ‚y',
            fractionText: 'UÅ‚amek',
            unitText: 'Jednostka',
            labels: ['Lata', 'MiesiÄ…c', 'Dni', 'Godziny', 'Minuty', 'Sekundy', ''],
            labelsShort: ['R', 'M', 'Dz', 'Godz', 'Min', 'Sek', ''],
            startText: 'RozpoczÄ™cie',
            stopText: 'ZatrzymaÄ‡',
            resetText: 'ZresetowaÄ‡',
            lapText: 'ZakÅ‚adka',
            hideText: 'UkryÄ‡',
            backText: 'WrÃ³Ä‡',
            undoText: 'Cofnij',
            offText: 'WyÅ‚',
            onText: 'WÅ‚',
            decimalSeparator: ',',
            thousandsSeparator: ' '
        };
        J.i18n['pt-BR'] = {
            setText: 'Selecionar',
            cancelText: 'Cancelar',
            clearText: 'Claro',
            selectedText: '{count} selecionado',
            selectedPluralText: '{count} selecionados',
            dateFormat: 'dd/mm/yy',
            dayNames: ['Domingo', 'Segunda-feira', 'TerÃ§a-feira', 'Quarta-feira', 'Quinta-feira', 'Sexta-feira', 'SÃ¡bado'],
            dayNamesShort: ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'SÃ¡b'],
            dayNamesMin: ['D', 'S', 'T', 'Q', 'Q', 'S', 'S'],
            dayText: 'Dia',
            hourText: 'Hora',
            minuteText: 'Minutos',
            monthNames: ['Janeiro', 'Fevereiro', 'MarÃ§o', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'],
            monthNamesShort: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            monthText: 'MÃªs',
            secText: 'Segundo',
            timeFormat: 'HH:ii',
            yearText: 'Ano',
            nowText: 'Agora',
            pmText: 'pm',
            amText: 'am',
            todayText: 'Hoje',
            dateText: 'Data',
            timeText: 'Tempo',
            calendarText: 'CalendÃ¡rio',
            closeText: 'Fechar',
            fromText: 'In&iacute;cio',
            toText: 'Fim',
            wholeText: 'Inteiro',
            fractionText: 'FraÃ§Ã£o',
            unitText: 'Unidade',
            labels: ['Anos', 'Meses', 'Dias', 'Horas', 'Minutos', 'Segundos', ''],
            labelsShort: ['Ano', 'M&ecirc;s', 'Dia', 'Hora', 'Min', 'Seg', ''],
            startText: 'ComeÃ§ar',
            stopText: 'Pare',
            resetText: 'Reinicializar',
            lapText: 'Lap',
            hideText: 'Esconder',
            backText: 'Anterior',
            undoText: 'Desfazer',
            offText: 'Desl',
            onText: 'Lig',
            decimalSeparator: ',',
            thousandsSeparator: ' '
        };
        J.i18n['pt-PT'] = {
            setText: 'Seleccionar',
            cancelText: 'Cancelar',
            clearText: 'Claro',
            selectedText: '{count} selecionado',
            selectedPluralText: '{count} selecionados',
            dateFormat: 'dd-mm-yy',
            dayNames: ['Domingo', 'Segunda-feira', 'TerÃ§a-feira', 'Quarta-feira', 'Quinta-feira', 'Sexta-feira', 'S&aacute;bado'],
            dayNamesShort: ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'S&aacute;b'],
            dayNamesMin: ['D', 'S', 'T', 'Q', 'Q', 'S', 'S'],
            dayText: 'Dia',
            hourText: 'Horas',
            minuteText: 'Minutos',
            monthNames: ['Janeiro', 'Fevereiro', 'Mar&ccedil;o', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'],
            monthNamesShort: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            monthText: 'M&ecirc;s',
            secText: 'Segundo',
            timeFormat: 'HH:ii',
            yearText: 'Ano',
            nowText: 'Actualizar',
            pmText: 'pm',
            amText: 'am',
            todayText: 'Hoy',
            firstDay: 1,
            dateText: 'Data',
            timeText: 'Tempo',
            calendarText: 'Calend&aacute;rio',
            closeText: 'Fechar',
            fromText: 'In&iacute;cio',
            toText: 'Fim',
            wholeText: 'Inteiro',
            fractionText: 'Frac&ccedil;&atilde;o',
            unitText: 'Unidade',
            labels: ['Anos', 'Meses', 'Dias', 'Horas', 'Minutos', 'Segundos', ''],
            labelsShort: ['Ano', 'M&ecirc;s', 'Dia', 'Hora', 'Min', 'Seg', ''],
            startText: 'Come&ccedil;ar',
            stopText: 'Parar',
            resetText: 'Reinicializar',
            lapText: 'Lap',
            hideText: 'Esconder',
            backText: 'Anterior',
            undoText: 'Anular',
            offText: 'Desl',
            onText: 'Lig',
            decimalSeparator: ',',
            thousandsSeparator: ' '
        };
        J.i18n.ro = {
            setText: 'Setare',
            cancelText: 'Anulare',
            clearText: 'Åžtergere',
            selectedText: '{count} selectat',
            selectedPluralText: '{count} selectate',
            dateFormat: 'dd.mm.yy',
            dayNames: ['DuminicÄƒ', 'Luni', 'MarÈ›i', 'Miercuri', 'Joi', 'Vineri', 'SÃ¢mbÄƒtÄƒ'],
            dayNamesShort: ['Du', 'Lu', 'Ma', 'Mi', 'Jo', 'Vi', 'SÃ¢'],
            dayNamesMin: ['D', 'L', 'M', 'M', 'J', 'V', 'S'],
            dayText: ' Ziua',
            delimiter: '.',
            hourText: ' Ore ',
            minuteText: 'Minute',
            monthNames: ['Ianuarie', 'Februarie', 'Martie', 'Aprilie', 'Mai', 'Iunie', 'Iulie', 'August', 'Septembrie', 'Octombrie', 'Noiembrie', 'Decembrie'],
            monthNamesShort: ['Ian.', 'Feb.', 'Mar.', 'Apr.', 'Mai', 'Iun.', 'Iul.', 'Aug.', 'Sept.', 'Oct.', 'Nov.', 'Dec.'],
            monthText: 'Luna',
            secText: 'Secunde',
            timeFormat: 'HH:ii',
            yearText: 'Anul',
            nowText: 'Acum',
            amText: 'am',
            pmText: 'pm',
            todayText: 'AstÄƒzi',
            firstDay: 1,
            dateText: 'Data',
            timeText: 'Ora',
            calendarText: 'Calendar',
            closeText: 'ÃŽnchidere',
            fromText: 'Start',
            toText: 'Final',
            wholeText: 'Complet',
            fractionText: 'ParÅ£ial',
            unitText: 'Unitate',
            labels: ['Ani', 'Luni', 'Zile', 'Ore', 'Minute', 'Secunde', ''],
            labelsShort: ['Ani', 'Luni', 'Zile', 'Ore', 'Min.', 'Sec.', ''],
            startText: 'Start',
            stopText: 'Stop',
            resetText: 'Resetare',
            lapText: 'TurÄƒ',
            hideText: 'Ascundere',
            backText: 'ÃŽnapoi',
            undoText: 'AnuleazÄƒ',
            offText: 'Nu',
            onText: 'Da',
            decimalSeparator: ',',
            thousandsSeparator: ' '
        };
        J.i18n['ru-UA'] = {
            setText: 'Ð£ÑÑ‚Ð°Ð½Ð¾Ð²Ð¸Ñ‚ÑŒ',
            cancelText: 'ÐžÑ‚Ð¼ÐµÐ½Ð¸Ñ‚ÑŒ',
            clearText: 'ÐžÑ‡Ð¸ÑÑ‚Ð¸Ñ‚ÑŒr',
            selectedText: '{count} Ð’Ñ–Ð±Ñ€Ð°Ñ‚ÑŒ',
            dateFormat: 'dd.mm.yy',
            dayNames: ['Ð²Ð¾ÑÐºÑ€ÐµÑÐµÐ½ÑŒÐµ', 'Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»ÑŒÐ½Ð¸Ðº', 'Ð²Ñ‚Ð¾Ñ€Ð½Ð¸Ðº', 'ÑÑ€ÐµÐ´Ð°', 'Ñ‡ÐµÑ‚Ð²ÐµÑ€Ð³', 'Ð¿ÑÑ‚Ð½Ð¸Ñ†Ð°', 'ÑÑƒÐ±Ð±Ð¾Ñ‚Ð°'],
            dayNamesShort: ['Ð²Ñ', 'Ð¿Ð½', 'Ð²Ñ‚', 'ÑÑ€', 'Ñ‡Ñ‚', 'Ð¿Ñ‚', 'ÑÐ±'],
            dayNamesMin: ['Ð²', 'Ð¿', 'Ð²', 'Ñ', 'Ñ‡', 'Ð¿', 'Ñ'],
            dayText: 'Ð”ÐµÐ½ÑŒ',
            delimiter: '.',
            hourText: 'Ð§Ð°ÑÑ‹',
            minuteText: 'ÐœÐ¸Ð½ÑƒÑ‚Ñ‹',
            monthNames: ['Ð¯Ð½Ð²Ð°Ñ€ÑŒ', 'Ð¤ÐµÐ²Ñ€Ð°Ð»ÑŒ', 'ÐœÐ°Ñ€Ñ‚', 'ÐÐ¿Ñ€ÐµÐ»ÑŒ', 'ÐœÐ°Ð¹', 'Ð˜ÑŽÐ½ÑŒ', 'Ð˜ÑŽÐ»ÑŒ', 'ÐÐ²Ð³ÑƒÑÑ‚', 'Ð¡ÐµÐ½Ñ‚ÑÐ±Ñ€ÑŒ', 'ÐžÐºÑ‚ÑÐ±Ñ€ÑŒ', 'ÐÐ¾ÑÐ±Ñ€ÑŒ', 'Ð”ÐµÐºÐ°Ð±Ñ€ÑŒ'],
            monthNamesShort: ['Ð¯Ð½Ð².', 'Ð¤ÐµÐ²Ñ€.', 'ÐœÐ°Ñ€Ñ‚', 'ÐÐ¿Ñ€.', 'ÐœÐ°Ð¹', 'Ð˜ÑŽÐ½ÑŒ', 'Ð˜ÑŽÐ»ÑŒ', 'ÐÐ²Ð³.', 'Ð¡ÐµÐ½Ñ‚.', 'ÐžÐºÑ‚.', 'ÐÐ¾ÑÐ±.', 'Ð”ÐµÐº.'],
            monthText: 'ÐœÐµÑÑÑ†Ñ‹',
            secText: 'Ð¡Ð¸ÐºÑƒÐ½Ð´Ñ‹',
            timeFormat: 'HH:ii',
            yearText: 'Ð“Ð¾Ð´',
            nowText: 'Ð¡ÐµÐ¹Ñ‡Ð°Ñ',
            amText: 'am',
            pmText: 'pm',
            todayText: 'CÐµÐ³Ð¾Ð´Ð½Ñ',
            firstDay: 1,
            dateText: 'Ð”Ð°Ñ‚Ð°',
            timeText: 'Ð’Ñ€ÐµÐ¼Ñ',
            calendarText: 'ÐšÐ°Ð»ÐµÐ½Ð´Ð°Ñ€ÑŒ',
            closeText: 'Ð—Ð°ÐºÑ€Ñ‹Ñ‚ÑŒ',
            fromText: 'ÐÐ°Ñ‡Ð°Ð»Ð¾',
            toText: 'ÐšÐ¾Ð½ÐµÑ†',
            wholeText: 'Ð’ÐµÑÑŒ',
            fractionText: 'Ð§Ð°ÑÑ‚ÑŒ',
            unitText: 'Ð•Ð´Ð¸Ð½Ð¸Ñ†Ð°',
            labels: ['Ð“Ð¾Ð´Ñ‹', ' ÐœÐµÑÑÑ†Ñ‹ ', ' Ð”Ð½Ð¸ ', ' Ð§Ð°ÑÑ‹ ', ' ÐœÐ¸Ð½ÑƒÑ‚Ñ‹ ', ' Ð¡ÐµÐºÑƒÐ½Ð´Ñ‹', ''],
            labelsShort: ['Ð“Ð¾Ð´', 'ÐœÐµÑ.', 'Ð”Ð½.', 'Ð§.', 'ÐœÐ¸Ð½.', 'Ð¡ÐµÐº.', ''],
            startText: 'Ð¡Ñ‚Ð°Ñ€Ñ‚',
            stopText: 'Ð¡Ñ‚Ð¾Ð¿',
            resetText: ' Ð¡Ð±Ñ€Ð¾Ñ ',
            lapText: ' Ð­Ñ‚Ð°Ð¿ ',
            hideText: ' Ð¡ÐºÑ€Ñ‹Ñ‚ÑŒ ',
            backText: 'Ð½Ð°Ð·Ð°Ð´',
            undoText: 'ÐžÑ‚Ð¼ÐµÐ½Ð¸Ñ‚Ð¬',
            offText: 'O',
            onText: 'I',
            decimalSeparator: ',',
            thousandsSeparator: ' '
        };
        J.i18n['ru-RU'] = J.i18n.ru = {
            setText: 'Ð£ÑÑ‚Ð°Ð½Ð¾Ð²Ð¸Ñ‚ÑŒ',
            cancelText: 'ÐžÑ‚Ð¼ÐµÐ½Ð°',
            clearText: 'ÐžÑ‡Ð¸ÑÑ‚Ð¸Ñ‚ÑŒ',
            selectedText: '{count} Ð’Ñ‹Ð±Ñ€Ð°Ñ‚ÑŒ',
            dateFormat: 'dd.mm.yy',
            dayNames: ['Ð²Ð¾ÑÐºÑ€ÐµÑÐµÐ½ÑŒÐµ', 'Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»ÑŒÐ½Ð¸Ðº', 'Ð²Ñ‚Ð¾Ñ€Ð½Ð¸Ðº', 'ÑÑ€ÐµÐ´Ð°', 'Ñ‡ÐµÑ‚Ð²ÐµÑ€Ð³', 'Ð¿ÑÑ‚Ð½Ð¸Ñ†Ð°', 'ÑÑƒÐ±Ð±Ð¾Ñ‚Ð°'],
            dayNamesShort: ['Ð²Ñ', 'Ð¿Ð½', 'Ð²Ñ‚', 'ÑÑ€', 'Ñ‡Ñ‚', 'Ð¿Ñ‚', 'ÑÐ±'],
            dayNamesMin: ['Ð²', 'Ð¿', 'Ð²', 'Ñ', 'Ñ‡', 'Ð¿', 'Ñ'],
            dayText: 'Ð”ÐµÐ½ÑŒ',
            delimiter: '.',
            hourText: 'Ð§Ð°Ñ',
            minuteText: 'ÐœÐ¸Ð½ÑƒÑ‚',
            monthNames: ['Ð¯Ð½Ð²Ð°Ñ€ÑŒ', 'Ð¤ÐµÐ²Ñ€Ð°Ð»ÑŒ', 'ÐœÐ°Ñ€Ñ‚', 'ÐÐ¿Ñ€ÐµÐ»ÑŒ', 'ÐœÐ°Ð¹', 'Ð˜ÑŽÐ½ÑŒ', 'Ð˜ÑŽÐ»ÑŒ', 'ÐÐ²Ð³ÑƒÑÑ‚', 'Ð¡ÐµÐ½Ñ‚ÑÐ±Ñ€ÑŒ', 'ÐžÐºÑ‚ÑÐ±Ñ€ÑŒ', 'ÐÐ¾ÑÐ±Ñ€ÑŒ', 'Ð”ÐµÐºÐ°Ð±Ñ€ÑŒ'],
            monthNamesShort: ['Ð¯Ð½Ð²', 'Ð¤ÐµÐ²', 'ÐœÐ°Ñ€', 'ÐÐ¿Ñ€', 'ÐœÐ°Ð¹', 'Ð˜ÑŽÐ½', 'Ð˜ÑŽÐ»', 'ÐÐ²Ð³', 'Ð¡ÐµÐ½', 'ÐžÐºÑ‚', 'ÐÐ¾Ñ', 'Ð”ÐµÐº'],
            monthText: 'ÐœÐµÑÑÑ†',
            secText: 'Ð¡ÐµÐºÑƒÐ½Ð´',
            timeFormat: 'HH:ii',
            yearText: 'Ð“Ð¾Ð´',
            nowText: 'Ð¡ÐµÐ¹Ñ‡Ð°Ñ',
            amText: 'am',
            pmText: 'pm',
            todayText: 'CÐµÐ³Ð¾Ð´Ð½Ñ',
            firstDay: 1,
            dateText: 'Ð”Ð°Ñ‚Ð°',
            timeText: 'Ð’Ñ€ÐµÐ¼Ñ',
            calendarText: 'ÐšÐ°Ð»ÐµÐ½Ð´Ð°Ñ€ÑŒ',
            closeText: 'Ð—Ð°ÐºÑ€Ñ‹Ñ‚ÑŒ',
            fromText: 'ÐÐ°Ñ‡Ð°Ð»Ð¾',
            toText: 'ÐšÐ¾Ð½ÐµÑ†',
            wholeText: 'Ð¦ÐµÐ»Ð¾Ðµ',
            fractionText: 'Ð”Ñ€Ð¾Ð±Ð½Ð¾Ðµ',
            unitText: 'Ð•Ð´Ð¸Ð½Ð¸Ñ†Ð°',
            labels: ['Ð›ÐµÑ‚', 'ÐœÐµÑÑÑ†ÐµÐ²', 'Ð”Ð½ÐµÐ¹', 'Ð§Ð°ÑÐ¾Ð²', 'ÐœÐ¸Ð½ÑƒÑ‚', 'Ð¡ÐµÐºÑƒÐ½Ð´', ''],
            labelsShort: ['Ð›ÐµÑ‚', 'ÐœÐµÑ', 'Ð”Ð½', 'Ð§Ð°Ñ', 'ÐœÐ¸Ð½', 'Ð¡ÐµÐº', ''],
            startText: 'Ð¡Ñ‚Ð°Ñ€Ñ‚',
            stopText: 'Ð¡Ñ‚Ð¾Ð¿',
            resetText: 'Ð¡Ð±Ñ€Ð¾ÑÐ¸Ñ‚ÑŒ',
            lapText: 'ÐšÑ€ÑƒÐ³',
            hideText: 'Ð¡ÐºÑ€Ñ‹Ñ‚ÑŒ',
            backText: 'Ð½Ð°Ð·Ð°Ð´',
            undoText: 'ÐžÑ‚Ð¼ÐµÐ½Ð¸Ñ‚Ð¬',
            offText: 'O',
            onText: 'I',
            decimalSeparator: ',',
            thousandsSeparator: ' '
        };
        J.i18n.sk = {
            setText: 'Zadaj',
            cancelText: 'ZruÅ¡iÅ¥',
            clearText: 'VymazaÅ¥',
            selectedText: 'OznaÄenÃ½: {count}',
            dateFormat: 'd.m.yy',
            dayNames: ['NedeÄ¾a', 'Pondelok', 'Utorok', 'Streda', 'Å tvrtok', 'Piatok', 'Sobota'],
            dayNamesShort: ['Ne', 'Po', 'Ut', 'St', 'Å t', 'Pi', 'So'],
            dayNamesMin: ['N', 'P', 'U', 'S', 'Å ', 'P', 'S'],
            dayText: 'ÄŽeÅˆ',
            hourText: 'Hodiny',
            minuteText: 'MinÃºty',
            monthNames: ['JanuÃ¡r', 'FebruÃ¡r', 'Marec', 'AprÃ­l', 'MÃ¡j', 'JÃºn', 'JÃºl', 'August', 'September', 'OktÃ³ber', 'November', 'December'],
            monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'MÃ¡j', 'JÃºn', 'JÃºl', 'Aug', 'Sep', 'Okt', 'Nov', 'Dec'],
            monthText: 'Mesiac',
            secText: 'Sekundy',
            timeFormat: 'H:ii',
            yearText: 'Rok',
            nowText: 'Teraz',
            amText: 'am',
            pmText: 'pm',
            todayText: 'Dnes',
            firstDay: 1,
            dateText: 'Datum',
            timeText: 'ÄŒas',
            calendarText: 'KalendÃ¡r',
            closeText: 'ZavrieÅ¥',
            fromText: 'ZaÄiatok',
            toText: 'Koniec',
            wholeText: 'CelÃ½',
            fractionText: 'ÄŒasÅ¥',
            unitText: 'Jednotka',
            labels: ['Roky', 'Mesiace', 'Dni', 'Hodiny', 'MinÃºty', 'Sekundy', ''],
            labelsShort: ['Rok', 'Mes', 'Dni', 'Hod', 'Min', 'Sec', ''],
            startText: 'Start',
            stopText: 'Stop',
            resetText: 'ResetovaÅ¥',
            lapText: 'Etapa',
            hideText: 'SchovaÅ¥',
            backText: 'SpÃ¤Å¥',
            undoText: 'SpÃ¤Å¥',
            offText: 'O',
            onText: 'I',
            decimalSeparator: ',',
            thousandsSeparator: ' '
        };
        J.i18n.sv = {
            setText: 'OK',
            cancelText: 'Avbryt',
            clearText: 'Klara',
            selectedText: '{count} vald',
            dateFormat: 'yy-mm-dd',
            dayNames: ['SÃ¶ndag', 'MÃ¥ndag', 'Tisdag', 'Onsdag', 'Torsdag', 'Fredag', 'LÃ¶rdag'],
            dayNamesShort: ['SÃ¶', 'MÃ¥', 'Ti', 'On', 'To', 'Fr', 'LÃ¶'],
            dayNamesMin: ['S', 'M', 'T', 'O', 'T', 'F', 'L'],
            dayText: 'Dag',
            hourText: 'Timme',
            minuteText: 'Minut',
            monthNames: ['Januari', 'Februari', 'Mars', 'April', 'Maj', 'Juni', 'Juli', 'Augusti', 'September', 'Oktober', 'November', 'December'],
            monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'Maj', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dec'],
            monthText: 'MÃ¥nad',
            secText: 'Sekund',
            timeFormat: 'HH:ii',
            yearText: 'Ã…r',
            nowText: 'Nu',
            pmText: 'pm',
            amText: 'am',
            todayText: 'I dag',
            firstDay: 1,
            dateText: 'Datum',
            timeText: 'Tid',
            calendarText: 'Kalender',
            closeText: 'StÃ¤ng',
            fromText: 'Start',
            toText: 'Slut',
            wholeText: 'Hela',
            fractionText: 'BrÃ¥k',
            unitText: 'Enhet',
            labels: ['Ã…r', 'MÃ¥nader', 'Dagar', 'Timmar', 'Minuter', 'Sekunder', ''],
            labelsShort: ['Ã…r', 'MÃ¥n', 'Dag', 'Tim', 'Min', 'Sek', ''],
            startText: 'Start',
            stopText: 'Stopp',
            resetText: 'Ã…terstÃ¤ll',
            lapText: 'Varv',
            hideText: 'DÃ¶lj',
            backText: 'Tillbaka',
            undoText: 'Ã…ngra',
            offText: 'Av',
            onText: 'PÃ¥'
        };
        J.i18n.tr = {
            setText: 'SeÃ§',
            cancelText: 'Ä°ptal',
            clearText: 'Temizleyin',
            selectedText: '{count} seÃ§ilmiÅŸ',
            dateFormat: 'dd.mm.yy',
            dayNames: ['Pazar', 'Pazartesi', 'SalÄ±', 'Ã‡arÅŸamba', 'PerÅŸembe', 'Cuma', 'Cumartesi'],
            dayNamesShort: ['Paz', 'Pzt', 'Sal', 'Ã‡ar', 'Per', 'Cum', 'Cmt'],
            dayNamesMin: ['P', 'P', 'S', 'Ã‡', 'P', 'C', 'C'],
            dayText: 'GÃ¼n',
            delimiter: '.',
            hourText: 'Saat',
            minuteText: 'Dakika',
            monthNames: ['Ocak', 'Åžubat', 'Mart', 'Nisan', 'MayÄ±s', 'Haziran', 'Temmuz', 'AÄŸustos', 'EylÃ¼l', 'Ekim', 'KasÄ±m', 'AralÄ±k'],
            monthNamesShort: ['Oca', 'Åžub', 'Mar', 'Nis', 'May', 'Haz', 'Tem', 'AÄŸu', 'Eyl', 'Eki', 'Kas', 'Ara'],
            monthText: 'Ay',
            secText: 'Saniye',
            timeFormat: 'HH:ii',
            yearText: 'YÄ±l',
            nowText: 'Åžimdi',
            pmText: 'pm',
            amText: 'am',
            todayText: 'BugÃ¼n',
            firstDay: 1,
            dateText: 'Tarih',
            timeText: 'Zaman',
            calendarText: 'Takvim',
            closeText: 'Kapatmak',
            fromText: 'BaÅŸla',
            toText: 'Son',
            wholeText: 'Tam',
            fractionText: 'Kesir',
            unitText: 'Birim',
            labels: ['YÄ±l', 'Ay', 'GÃ¼n', 'Saat', 'Dakika', 'Saniye', ''],
            labelsShort: ['YÄ±l', 'Ay', 'GÃ¼n', 'Sa', 'Dak', 'Sn', ''],
            startText: 'BaÅŸla',
            stopText: 'Durdur',
            resetText: 'SÄ±fÄ±rla',
            lapText: 'Tur',
            hideText: 'Gizle',
            backText: 'Geri',
            undoText: 'Geri Al',
            offText: 'O',
            onText: 'I',
            decimalSeparator: ',',
            thousandsSeparator: '.'
        };
        J.i18n.zh = {
            setText: 'ç¡®å®š',
            cancelText: 'å–æ¶ˆ',
            clearText: 'æ˜Žç¡®',
            selectedText: '{count} é€‰',
            dateFormat: 'yy/mm/dd',
            dayNames: ['å‘¨æ—¥', 'å‘¨ä¸€', 'å‘¨äºŒ', 'å‘¨ä¸‰', 'å‘¨å››', 'å‘¨äº”', 'å‘¨å…­'],
            dayNamesShort: ['æ—¥', 'ä¸€', 'äºŒ', 'ä¸‰', 'å››', 'äº”', 'å…­'],
            dayNamesMin: ['æ—¥', 'ä¸€', 'äºŒ', 'ä¸‰', 'å››', 'äº”', 'å…­'],
            dayText: 'æ—¥',
            hourText: 'æ—¶',
            minuteText: 'åˆ†',
            monthNames: ['1æœˆ', '2æœˆ', '3æœˆ', '4æœˆ', '5æœˆ', '6æœˆ', '7æœˆ', '8æœˆ', '9æœˆ', '10æœˆ', '11æœˆ', '12æœˆ'],
            monthNamesShort: ['ä¸€', 'äºŒ', 'ä¸‰', 'å››', 'äº”', 'å…­', 'ä¸ƒ', 'å…«', 'ä¹', 'å', 'åä¸€', 'åäºŒ'],
            monthText: 'æœˆ',
            secText: 'ç§’',
            timeFormat: 'HH:ii',
            yearText: 'å¹´',
            nowText: 'å½“å‰',
            pmText: 'ä¸‹åˆ',
            amText: 'ä¸Šåˆ',
            todayText: 'ä»Šå¤©',
            dateText: 'æ—¥',
            timeText: 'æ—¶é—´',
            calendarText: 'æ—¥åŽ†',
            closeText: 'å…³é—­',
            fromText: 'å¼€å§‹æ—¶é—´',
            toText: 'ç»“æŸæ—¶é—´',
            wholeText: 'åˆè®¡',
            fractionText: 'åˆ†æ•°',
            unitText: 'å•ä½',
            labels: ['å¹´', 'æœˆ', 'æ—¥', 'å°æ—¶', 'åˆ†é’Ÿ', 'ç§’', ''],
            labelsShort: ['å¹´', 'æœˆ', 'æ—¥', 'ç‚¹', 'åˆ†', 'ç§’', ''],
            startText: 'å¼€å§‹',
            stopText: 'åœæ­¢',
            resetText: 'é‡ç½®',
            lapText: 'åœˆ',
            hideText: 'éšè—',
            backText: 'èƒŒéƒ¨',
            undoText: 'å¤åŽŸ',
            offText: 'å…³é—­',
            onText: 'å¼€å¯',
            decimalSeparator: ',',
            thousandsSeparator: ' '
        };
        var N2 = J.themes;
        var q9 = J.$;
        N2.frame['android-holo'] = {};
        N2.scroller['android-holo'] = q9.extend({}, N2.frame['android-holo'], {
            dateDisplay: 'Mddyy',
            rows: 5,
            minWidth: 76,
            height: 36,
            showLabel: false,
            selectedLineHeight: true,
            selectedLineBorder: 2,
            useShortLabels: true,
            icon: {
                filled: 'star3',
                empty: 'star'
            },
            btnPlusClass: 'mbsc-ic mbsc-ic-arrow-down6',
            btnMinusClass: 'mbsc-ic mbsc-ic-arrow-up6'
        });
        N2.form['android-holo'] = {};
        var D2 = J.themes;
        var E = J.$;
        D2.frame.bootstrap = {
            disabledClass: 'disabled',
            activeClass: 'btn-primary',
            activeTabClass: 'active',
            todayClass: 'text-primary',
            onMarkupInserted: function G6n(y6n) {
                var B6n = E(y6n.target);
                E('.mbsc-fr-popup', B6n).addClass('popover');
                E('.mbsc-fr-w', B6n).addClass('popover-content');
                E('.mbsc-fr-hdr', B6n).addClass('popover-title');
                E('.mbsc-fr-arr-i', B6n).addClass('popover');
                E('.mbsc-fr-arr', B6n).addClass('arrow');
                E('.mbsc-fr-btn', B6n).addClass('btn btn-default');
                E('.mbsc-fr-btn-s .mbsc-fr-btn', B6n).removeClass('btn-default').addClass('btn btn-primary');
                E('.mbsc-sc-btn-plus', B6n).addClass('glyphicon glyphicon-chevron-down');
                E('.mbsc-sc-btn-minus', B6n).addClass('glyphicon glyphicon-chevron-up');
                E('.mbsc-cal-next .mbsc-cal-btn-txt', B6n).prepend('<i class="glyphicon glyphicon-chevron-right"></i>');
                E('.mbsc-cal-prev .mbsc-cal-btn-txt', B6n).prepend('<i class="glyphicon glyphicon-chevron-left"></i>');
                E('.mbsc-cal-tabs ul', B6n).addClass('nav nav-tabs');
                E('.mbsc-cal-sc-c', B6n).addClass('popover');
                E('.mbsc-cal-week-nrs-c', B6n).addClass('popover');
                E('.mbsc-cal-events', B6n).addClass('popover');
                E('.mbsc-cal-events-arr', B6n).addClass('arrow');
                E('.mbsc-range-btn', B6n).addClass('btn btn-sm btn-small btn-default');
                E('.mbsc-np-btn', B6n).addClass('btn btn-default');
                E('.mbsc-sel-filter-cont', B6n).removeClass('mbsc-input');
                E('.mbsc-sel-filter-input', B6n).addClass('form-control');
            },
            onPosition: function j6n(R6n) {
                setTimeout(function() {
                    E('.mbsc-fr-bubble-top, .mbsc-fr-bubble-top .mbsc-fr-arr-i', R6n.target).removeClass('bottom').addClass('top');
                    E('.mbsc-fr-bubble-bottom, .mbsc-fr-bubble-bottom .mbsc-fr-arr-i', R6n.target).removeClass('top').addClass('bottom');
                }, 10);
            }
        };
        D2.scroller.bootstrap = E.extend({}, D2.frame.bootstrap, {
            dateDisplay: 'Mddyy',
            btnCalPrevClass: '',
            btnCalNextClass: '',
            selectedLineHeight: true,
            onEventBubbleShow: function L6n(A6n) {
                var W6n = E(A6n.eventList);
                E('.mbsc-cal-event-list', W6n).addClass('list-group');
                E('.mbsc-cal-event', W6n).addClass('list-group-item');
                setTimeout(function() {
                    if (W6n.hasClass('mbsc-cal-events-b')) {
                        W6n.removeClass('top').addClass('bottom');
                    } else {
                        W6n.removeClass('bottom').addClass('top');
                    }
                }, 10);
            }
        });
        D2.menustrip.bootstrap = {
            wrapperClass: 'popover panel panel-default',
            groupClass: 'btn-group',
            activeClass: 'btn-primary',
            disabledClass: 'disabled',
            itemClass: 'btn btn-default'
        };
        var O6 = J.themes;
        var M9 = J.$;
        O6.frame.ios = {
            display: 'bottom',
            headerText: false,
            btnWidth: false,
            deleteIcon: 'ios-backspace',
            scroll3d: true
        };
        O6.scroller.ios = M9.extend({}, O6.frame.ios, {
            rows: 5,
            height: 34,
            minWidth: 55,
            selectedLineHeight: true,
            selectedLineBorder: 1,
            showLabel: false,
            useShortLabels: true,
            btnPlusClass: 'mbsc-ic mbsc-ic-arrow-down5',
            btnMinusClass: 'mbsc-ic mbsc-ic-arrow-up5',
            checkIcon: 'ion-ios7-checkmark-empty',
            filterClearIcon: 'ion-close-circled',
            dateDisplay: 'MMdyy',
            btnCalPrevClass: 'mbsc-ic mbsc-ic-arrow-left5',
            btnCalNextClass: 'mbsc-ic mbsc-ic-arrow-right5'
        });
        O6.listview.ios = {
            leftArrowClass: 'mbsc-ic-ion-ios7-arrow-back',
            rightArrowClass: 'mbsc-ic-ion-ios7-arrow-forward'
        };
        O6.form.ios = {};
        var q6;
        var K6;
        var F = J.$;
        var X6 = J.themes;
        var a3 = J.util;
        var q8 = a3.testTouch;
        var k6 = a3.getCoord;
        X6.frame.material = {
            headerText: false,
            btnWidth: false,
            deleteIcon: 'material-backspace',
            onMarkupReady: function Z2n(M2n) {
                a9(F(M2n.target), '.mbsc-fr-btn-e', 'mbsc-fr-btn-d', 'mbsc-fr-btn-nhl');
            }
        };
        X6.scroller.material = F.extend({}, X6.frame.material, {
            showLabel: false,
            selectedLineBorder: 2,
            weekDays: 'min',
            icon: {
                filled: 'material-star',
                empty: 'material-star-outline'
            },
            checkIcon: 'material-check',
            btnPlusClass: 'mbsc-ic mbsc-ic-material-keyboard-arrow-down',
            btnMinusClass: 'mbsc-ic mbsc-ic-material-keyboard-arrow-up',
            btnCalPrevClass: 'mbsc-ic mbsc-ic-material-keyboard-arrow-left',
            btnCalNextClass: 'mbsc-ic mbsc-ic-material-keyboard-arrow-right',
            onEventBubbleShow: function a2n(e2n) {
                var D2n = F(e2n.eventList),
                    f2n = F(e2n.target).closest('.mbsc-cal-row').index() < 2,
                    N2n = F('.mbsc-cal-event-color', D2n).eq(f2n ? 0 : -1).css('background-color');
                F('.mbsc-cal-events-arr', D2n).css('border-color', f2n ? 'transparent transparent ' + N2n + ' transparent' : N2n + 'transparent transparent transparent');
            }
        });
        X6.listview.material = {
            leftArrowClass: 'mbsc-ic-material-keyboard-arrow-left',
            rightArrowClass: 'mbsc-ic-material-keyboard-arrow-right',
            onItemActivate: function E2n(l2n) {
                K3(F(l2n.target), l2n.domEvent);
            },
            onItemDeactivate: function d2n() {
                I2(K6);
            },
            onSlideStart: function X2n(h2n) {
                F('.mbsc-ripple', h2n.target).remove();
            },
            onSortStart: function m2n(z2n) {
                F('.mbsc-ripple', z2n.target).remove();
            }
        };
        X6.menustrip.material = {
            onInit: function i2n() {
                a9(F(this), '.mbsc-ms-item.mbsc-btn-e', 'mbsc-btn-d', 'mbsc-btn-nhl');
            },
            onMarkupInit: function w2n() {
                F('.mbsc-ripple', this).remove();
            },
            onDestroy: function C2n() {
                F(this).off('.mbsc-ripple');
            }
        };
        X6.form.material = {
            addRipple: function V2n(k2n, H2n) {
                K3(k2n, H2n);
            },
            removeRipple: function o2n() {
                I2(K6);
            }
        };
        var U = J.$;
        var m2 = J.themes;
        m2.frame.wp = {
            headerText: false,
            deleteIcon: 'backspace4',
            setIcon: 'checkmark',
            cancelIcon: 'close',
            closeIcon: 'close',
            clearIcon: 'close',
            okIcon: 'checkmark',
            nowIcon: 'loop2',
            startIcon: 'play3',
            stopIcon: 'pause2',
            resetIcon: 'stop2',
            lapIcon: 'loop2',
            btnWidth: false
        };
        m2.scroller.wp = U.extend({}, m2.frame.wp, {
            minWidth: 76,
            height: 76,
            dateDisplay: 'mmMMddDDyy',
            showLabel: false,
            icon: {
                filled: 'star3',
                empty: 'star'
            },
            btnCalPrevClass: 'mbsc-ic mbsc-ic-arrow-left2',
            btnCalNextClass: 'mbsc-ic mbsc-ic-arrow-right2',
            btnPlusClass: 'mbsc-ic mbsc-ic-plus',
            btnMinusClass: 'mbsc-ic mbsc-ic-minus',
            onMarkupInserted: function p2n(y2n, j2n) {
                function R2n(L2n) {
                    return U.isArray(F2n.readonly) ? F2n.readonly[L2n] : F2n.readonly;
                }
                var K2n, S2n, B2n, G2n = U(y2n.target),
                    F2n = j2n.settings;
                U('.mbsc-sc-whl', G2n).on('touchstart mousedown wheel mousewheel', function(W2n) {
                    if (W2n.type === 'mousedown' && S2n || R2n(U(this).attr('data-index'))) {
                        return;
                    }
                    S2n = W2n.type === 'touchstart';
                    K2n = true;
                    B2n = U(this).hasClass('mbsc-sc-whl-wpa');
                    U('.mbsc-sc-whl', G2n).removeClass('mbsc-sc-whl-wpa');
                    U(this).addClass('mbsc-sc-whl-wpa');
                }).on('touchmove mousemove', function() {
                    K2n = false;
                }).on('touchend mouseup', function(A2n) {
                    if (K2n && B2n && U(A2n.target).closest('.mbsc-sc-itm').hasClass('mbsc-sc-itm-sel')) {
                        U(this).removeClass('mbsc-sc-whl-wpa');
                    }
                    if (A2n.type === 'mouseup') {
                        S2n = false;
                    }
                    K2n = false;
                });
            }
        });
        m2.form.wp = {};
        J.customTheme('android-holo-light', 'android-holo');
        J.customTheme('ios-dark', 'ios');
        J.customTheme('material-dark', 'material');
        J.customTheme('mobiscroll-dark', 'mobiscroll');
        J.customTheme('wp-light', 'wp');
        var r8 = J.themes;
        var B1 = J.$;
        var h6 = void 0;
        if (a6.name == 'android') {
            h6 = a6.majorVersion >= 5 ? 'material' : 'android-holo';
        } else if (a6.name == 'ios') {
            h6 = 'ios';
        } else if (a6.name == 'wp') {
            h6 = 'wp';
        }
        J.setAutoTheme = function() {
            B1.each(r8.frame, function(O2n, Y2n) {
                if (h6 && Y2n.baseTheme == h6 && O2n != 'android-holo-light' && O2n != 'material-dark' && O2n != 'wp-light' && O2n != 'ios-dark') {
                    J.autoTheme = O2n;
                    return false;
                } else if (O2n == h6) {
                    J.autoTheme = O2n;
                }
            });
        };
        J.setAutoTheme();
        J.apiKey = '1ab68996';
        J.apiUrl = 'https://trial.mobiscroll.com/';
        return J;
    }();
    return mobiscroll;
}));

function log(index){
    console.log(index);
}